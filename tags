!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/guru/For_checkin/RDKTV-36415/networkmanager/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$ref	NetworkManager.json	/^                                    "$ref": "#\/definitions\/frequency"$/;"	s	object:events.onAvailableSSIDs.params.properties.ssids.items.properties.frequency
$ref	NetworkManager.json	/^                                    "$ref": "#\/definitions\/security"$/;"	s	object:events.onAvailableSSIDs.params.properties.ssids.items.properties.security
$ref	NetworkManager.json	/^                                    "$ref": "#\/definitions\/strength"$/;"	s	object:events.onAvailableSSIDs.params.properties.ssids.items.properties.strength
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/autoconfig"$/;"	s	object:methods.GetIPSettings.result.properties.autoconfig
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/autoconfig"$/;"	s	object:methods.SetIPSettings.params.properties.autoconfig
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/bssid"$/;"	s	object:methods.GetConnectedSSID.result.properties.bssid
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/cacheLifetime"$/;"	s	object:methods.GetStunEndpoint.result.properties.cacheLifetime
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/cacheLifetime"$/;"	s	object:methods.SetStunEndpoint.params.properties.cacheLifetime
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/count"$/;"	s	object:methods.Ping.params.properties.count
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/dhcpserver"$/;"	s	object:methods.GetIPSettings.result.properties.dhcpserver
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/endpoint"$/;"	s	object:methods.GetStunEndpoint.result.properties.endpoint
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/endpoint"$/;"	s	object:methods.Ping.params.properties.endpoint
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/endpoint"$/;"	s	object:methods.Ping.result.properties.endpoint
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/endpoint"$/;"	s	object:methods.SetStunEndpoint.params.properties.endpoint
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/endpoint"$/;"	s	object:methods.Trace.params.properties.endpoint
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/endpoint"$/;"	s	object:methods.Trace.result.properties.endpoint
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/frequency"$/;"	s	object:methods.GetConnectedSSID.result.properties.frequency
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/gateway"$/;"	s	object:methods.GetIPSettings.result.properties.gateway
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/gateway"$/;"	s	object:methods.SetIPSettings.params.properties.gateway
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/guid"$/;"	s	object:methods.Ping.params.properties.guid
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/guid"$/;"	s	object:methods.Trace.params.properties.guid
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/interface" $/;"	s	object:events.onAddressChange.params.properties.interface
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/interface"$/;"	s	object:events.onInterfaceStateChange.params.properties.interface
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/interface"$/;"	s	object:methods.GetIPSettings.params.properties.interface
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/interface"$/;"	s	object:methods.GetIPSettings.result.properties.interface
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/interface"$/;"	s	object:methods.GetInterfaceState.params.properties.interface
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/interface"$/;"	s	object:methods.GetPrimaryInterface.result.properties.interface
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/interface"$/;"	s	object:methods.GetPublicIP.params.properties.interface
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/interface"$/;"	s	object:methods.GetPublicIP.result.properties.interface
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/interface"$/;"	s	object:methods.SetIPSettings.params.properties.interface
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/interface"$/;"	s	object:methods.SetPrimaryInterface.params.properties.interface
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/ipaddress"$/;"	s	object:events.onAddressChange.params.properties.ipaddress
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/ipaddress"$/;"	s	object:methods.GetIPSettings.result.properties.ipaddress
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/ipaddress"$/;"	s	object:methods.GetPublicIP.result.properties.ipaddress
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/ipaddress"$/;"	s	object:methods.SetIPSettings.params.properties.ipaddress
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/ipversion"$/;"	s	object:events.onAddressChange.params.properties.ipversion
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/ipversion"$/;"	s	object:methods.GetIPSettings.params.properties.ipversion
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/ipversion"$/;"	s	object:methods.GetIPSettings.result.properties.ipversion
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/ipversion"$/;"	s	object:methods.GetPublicIP.params.properties.ipversion
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/ipversion"$/;"	s	object:methods.GetPublicIP.result.properties.ipversion
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/ipversion"$/;"	s	object:methods.IsConnectedToInternet.params.properties.ipversion
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/ipversion"$/;"	s	object:methods.IsConnectedToInternet.result.properties.ipversion
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/ipversion"$/;"	s	object:methods.Ping.params.properties.ipversion
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/ipversion"$/;"	s	object:methods.SetIPSettings.params.properties.ipversion
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/ipversion"$/;"	s	object:methods.Trace.params.properties.ipversion
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/packets"$/;"	s	object:methods.Trace.params.properties.packets
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/passphrase"$/;"	s	object:methods.AddToKnownSSIDs.params.properties.passphrase
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/passphrase"$/;"	s	object:methods.WiFiConnect.params.properties.passphrase
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/port"$/;"	s	object:methods.GetStunEndpoint.result.properties.port
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/port"$/;"	s	object:methods.SetStunEndpoint.params.properties.port
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/prefix"$/;"	s	object:methods.GetIPSettings.result.properties.prefix
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/prefix"$/;"	s	object:methods.SetIPSettings.params.properties.prefix
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/primarydns"$/;"	s	object:methods.GetIPSettings.result.properties.primarydns
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/primarydns"$/;"	s	object:methods.SetIPSettings.params.properties.primarydns
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/quality"$/;"	s	object:events.onWiFiSignalStrengthChange.params.properties.quality
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/quality"$/;"	s	object:methods.GetWiFiSignalStrength.result.properties.quality
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/secondarydns"$/;"	s	object:methods.GetIPSettings.result.properties.secondarydns
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/secondarydns"$/;"	s	object:methods.SetIPSettings.params.properties.secondarydns
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/security"$/;"	s	object:methods.AddToKnownSSIDs.params.properties.security
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/security"$/;"	s	object:methods.WiFiConnect.params.properties.security
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/ssid"$/;"	s	object:events.onWiFiSignalStrengthChange.params.properties.ssid
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/ssid"$/;"	s	object:methods.AddToKnownSSIDs.params.properties.ssid
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/ssid"$/;"	s	object:methods.GetConnectedSSID.result.properties.ssid
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/ssid"$/;"	s	object:methods.GetWiFiSignalStrength.result.properties.ssid
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/ssid"$/;"	s	object:methods.RemoveKnownSSID.params.properties.ssid
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/ssid"$/;"	s	object:methods.WiFiConnect.params.properties.ssid
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/state"$/;"	s	object:methods.GetWifiState.result.properties.state
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/strength"$/;"	s	object:events.onWiFiSignalStrengthChange.params.properties.strength
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/strength"$/;"	s	object:methods.GetConnectedSSID.result.properties.strength
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/strength"$/;"	s	object:methods.GetWiFiSignalStrength.result.properties.strength
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/success"$/;"	s	object:methods.AddToKnownSSIDs.result.properties.success
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/success"$/;"	s	object:methods.GetAvailableInterfaces.result.properties.success
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/success"$/;"	s	object:methods.GetCaptivePortalURI.result.properties.success
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/success"$/;"	s	object:methods.GetConnectedSSID.result.properties.success
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/success"$/;"	s	object:methods.GetConnectivityTestEndpoints.result.properties.success
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/success"$/;"	s	object:methods.GetIPSettings.result.properties.success
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/success"$/;"	s	object:methods.GetInterfaceState.result.properties.success
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/success"$/;"	s	object:methods.GetKnownSSIDs.result.properties.success
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/success"$/;"	s	object:methods.GetLogLevel.result.properties.success
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/success"$/;"	s	object:methods.GetPublicIP.result.properties.success
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/success"$/;"	s	object:methods.GetStunEndpoint.result.properties.success
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/success"$/;"	s	object:methods.GetSupportedsecurityModes.result.properties.success
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/success"$/;"	s	object:methods.GetWiFiSignalStrength.result.properties.success
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/success"$/;"	s	object:methods.GetWifiState.result.properties.success
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/success"$/;"	s	object:methods.IsConnectedToInternet.result.properties.success
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/success"$/;"	s	object:methods.Ping.result.properties.success
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/success"$/;"	s	object:methods.RemoveKnownSSID.result.properties.success
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/success"$/;"	s	object:methods.SetConnectivityTestEndpoints.result.properties.success
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/success"$/;"	s	object:methods.SetIPSettings.result.properties.success
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/success"$/;"	s	object:methods.SetInterfaceState.result.properties.success
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/success"$/;"	s	object:methods.SetLogLevel.result.properties.success
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/success"$/;"	s	object:methods.SetPrimaryInterface.result.properties.success
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/success"$/;"	s	object:methods.SetStunEndpoint.result.properties.success
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/success"$/;"	s	object:methods.StartWPS.result.properties.success
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/success"$/;"	s	object:methods.StartWiFiScan.result.properties.success
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/success"$/;"	s	object:methods.StopWPS.result.properties.success
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/success"$/;"	s	object:methods.StopWiFiScan.result.properties.success
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/success"$/;"	s	object:methods.Trace.result.properties.success
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/success"$/;"	s	object:methods.WiFiConnect.result.properties.success
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/success"$/;"	s	object:methods.WiFiDisconnect.result.properties.success
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/timeout"$/;"	s	object:methods.GetStunEndpoint.result.properties.timeout
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/timeout"$/;"	s	object:methods.Ping.params.properties.timeout
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/timeout"$/;"	s	object:methods.SetStunEndpoint.params.properties.timeout
$ref	NetworkManager.json	/^                        "$ref": "#\/definitions\/ula"$/;"	s	object:methods.GetIPSettings.result.properties.ula
$schema	NetworkManager.json	/^    "$schema": "interface.schema.json",$/;"	s
*AddToKnownSSIDs [<sup>method</sup>](#head.Methods)*	docs/NetworkManagerPlugin.md	/^## *AddToKnownSSIDs [<sup>method<\/sup>](#head.Methods)*$/;"	s	chapter:Methods
*GetAvailableInterfaces [<sup>method</sup>](#head.Methods)*	docs/NetworkManagerPlugin.md	/^## *GetAvailableInterfaces [<sup>method<\/sup>](#head.Methods)*$/;"	s	chapter:Methods
*GetCaptivePortalURI [<sup>method</sup>](#head.Methods)*	docs/NetworkManagerPlugin.md	/^## *GetCaptivePortalURI [<sup>method<\/sup>](#head.Methods)*$/;"	s	chapter:Methods
*GetConnectedSSID [<sup>method</sup>](#head.Methods)*	docs/NetworkManagerPlugin.md	/^## *GetConnectedSSID [<sup>method<\/sup>](#head.Methods)*$/;"	s	chapter:Methods
*GetConnectivityTestEndpoints [<sup>method</sup>](#head.Methods)*	docs/NetworkManagerPlugin.md	/^## *GetConnectivityTestEndpoints [<sup>method<\/sup>](#head.Methods)*$/;"	s	chapter:Methods
*GetIPSettings [<sup>method</sup>](#head.Methods)*	docs/NetworkManagerPlugin.md	/^## *GetIPSettings [<sup>method<\/sup>](#head.Methods)*$/;"	s	chapter:Methods
*GetInterfaceState [<sup>method</sup>](#head.Methods)*	docs/NetworkManagerPlugin.md	/^## *GetInterfaceState [<sup>method<\/sup>](#head.Methods)*$/;"	s	chapter:Methods
*GetKnownSSIDs [<sup>method</sup>](#head.Methods)*	docs/NetworkManagerPlugin.md	/^## *GetKnownSSIDs [<sup>method<\/sup>](#head.Methods)*$/;"	s	chapter:Methods
*GetLogLevel [<sup>method</sup>](#head.Methods)*	docs/NetworkManagerPlugin.md	/^## *GetLogLevel [<sup>method<\/sup>](#head.Methods)*$/;"	s	chapter:Methods
*GetPrimaryInterface [<sup>method</sup>](#head.Methods)*	docs/NetworkManagerPlugin.md	/^## *GetPrimaryInterface [<sup>method<\/sup>](#head.Methods)*$/;"	s	chapter:Methods
*GetPublicIP [<sup>method</sup>](#head.Methods)*	docs/NetworkManagerPlugin.md	/^## *GetPublicIP [<sup>method<\/sup>](#head.Methods)*$/;"	s	chapter:Methods
*GetStunEndpoint [<sup>method</sup>](#head.Methods)*	docs/NetworkManagerPlugin.md	/^## *GetStunEndpoint [<sup>method<\/sup>](#head.Methods)*$/;"	s	chapter:Methods
*GetSupportedsecurityModes [<sup>method</sup>](#head.Methods)*	docs/NetworkManagerPlugin.md	/^## *GetSupportedsecurityModes [<sup>method<\/sup>](#head.Methods)*$/;"	s	chapter:Methods
*GetWiFiSignalStrength [<sup>method</sup>](#head.Methods)*	docs/NetworkManagerPlugin.md	/^## *GetWiFiSignalStrength [<sup>method<\/sup>](#head.Methods)*$/;"	s	chapter:Methods
*GetWifiState [<sup>method</sup>](#head.Methods)*	docs/NetworkManagerPlugin.md	/^## *GetWifiState [<sup>method<\/sup>](#head.Methods)*$/;"	s	chapter:Methods
*IsConnectedToInternet [<sup>method</sup>](#head.Methods)*	docs/NetworkManagerPlugin.md	/^## *IsConnectedToInternet [<sup>method<\/sup>](#head.Methods)*$/;"	s	chapter:Methods
*Ping [<sup>method</sup>](#head.Methods)*	docs/NetworkManagerPlugin.md	/^## *Ping [<sup>method<\/sup>](#head.Methods)*$/;"	s	chapter:Methods
*RemoveKnownSSID [<sup>method</sup>](#head.Methods)*	docs/NetworkManagerPlugin.md	/^## *RemoveKnownSSID [<sup>method<\/sup>](#head.Methods)*$/;"	s	chapter:Methods
*SetConnectivityTestEndpoints [<sup>method</sup>](#head.Methods)*	docs/NetworkManagerPlugin.md	/^## *SetConnectivityTestEndpoints [<sup>method<\/sup>](#head.Methods)*$/;"	s	chapter:Methods
*SetIPSettings [<sup>method</sup>](#head.Methods)*	docs/NetworkManagerPlugin.md	/^## *SetIPSettings [<sup>method<\/sup>](#head.Methods)*$/;"	s	chapter:Methods
*SetInterfaceState [<sup>method</sup>](#head.Methods)*	docs/NetworkManagerPlugin.md	/^## *SetInterfaceState [<sup>method<\/sup>](#head.Methods)*$/;"	s	chapter:Methods
*SetLogLevel [<sup>method</sup>](#head.Methods)*	docs/NetworkManagerPlugin.md	/^## *SetLogLevel [<sup>method<\/sup>](#head.Methods)*$/;"	s	chapter:Methods
*SetPrimaryInterface [<sup>method</sup>](#head.Methods)*	docs/NetworkManagerPlugin.md	/^## *SetPrimaryInterface [<sup>method<\/sup>](#head.Methods)*$/;"	s	chapter:Methods
*SetStunEndpoint [<sup>method</sup>](#head.Methods)*	docs/NetworkManagerPlugin.md	/^## *SetStunEndpoint [<sup>method<\/sup>](#head.Methods)*$/;"	s	chapter:Methods
*StartWPS [<sup>method</sup>](#head.Methods)*	docs/NetworkManagerPlugin.md	/^## *StartWPS [<sup>method<\/sup>](#head.Methods)*$/;"	s	chapter:Methods
*StartWiFiScan [<sup>method</sup>](#head.Methods)*	docs/NetworkManagerPlugin.md	/^## *StartWiFiScan [<sup>method<\/sup>](#head.Methods)*$/;"	s	chapter:Methods
*StopWPS [<sup>method</sup>](#head.Methods)*	docs/NetworkManagerPlugin.md	/^## *StopWPS [<sup>method<\/sup>](#head.Methods)*$/;"	s	chapter:Methods
*StopWiFiScan [<sup>method</sup>](#head.Methods)*	docs/NetworkManagerPlugin.md	/^## *StopWiFiScan [<sup>method<\/sup>](#head.Methods)*$/;"	s	chapter:Methods
*Trace [<sup>method</sup>](#head.Methods)*	docs/NetworkManagerPlugin.md	/^## *Trace [<sup>method<\/sup>](#head.Methods)*$/;"	s	chapter:Methods
*WiFiConnect [<sup>method</sup>](#head.Methods)*	docs/NetworkManagerPlugin.md	/^## *WiFiConnect [<sup>method<\/sup>](#head.Methods)*$/;"	s	chapter:Methods
*WiFiDisconnect [<sup>method</sup>](#head.Methods)*	docs/NetworkManagerPlugin.md	/^## *WiFiDisconnect [<sup>method<\/sup>](#head.Methods)*$/;"	s	chapter:Methods
*onActiveInterfaceChange [<sup>event</sup>](#head.Notifications)*	docs/NetworkManagerPlugin.md	/^## *onActiveInterfaceChange [<sup>event<\/sup>](#head.Notifications)*$/;"	s	chapter:Notifications
*onAddressChange [<sup>event</sup>](#head.Notifications)*	docs/NetworkManagerPlugin.md	/^## *onAddressChange [<sup>event<\/sup>](#head.Notifications)*$/;"	s	chapter:Notifications
*onAvailableSSIDs [<sup>event</sup>](#head.Notifications)*	docs/NetworkManagerPlugin.md	/^## *onAvailableSSIDs [<sup>event<\/sup>](#head.Notifications)*$/;"	s	chapter:Notifications
*onInterfaceStateChange [<sup>event</sup>](#head.Notifications)*	docs/NetworkManagerPlugin.md	/^## *onInterfaceStateChange [<sup>event<\/sup>](#head.Notifications)*$/;"	s	chapter:Notifications
*onInternetStatusChange [<sup>event</sup>](#head.Notifications)*	docs/NetworkManagerPlugin.md	/^## *onInternetStatusChange [<sup>event<\/sup>](#head.Notifications)*$/;"	s	chapter:Notifications
*onWiFiSignalStrengthChange [<sup>event</sup>](#head.Notifications)*	docs/NetworkManagerPlugin.md	/^## *onWiFiSignalStrengthChange [<sup>event<\/sup>](#head.Notifications)*$/;"	s	chapter:Notifications
*onWiFiStateChange [<sup>event</sup>](#head.Notifications)*	docs/NetworkManagerPlugin.md	/^## *onWiFiStateChange [<sup>event<\/sup>](#head.Notifications)*$/;"	s	chapter:Notifications
0	NetworkManager.json	/^                                "`ACQUIRED`",$/;"	s	array:events.onAddressChange.params.properties.status.enum
0	NetworkManager.json	/^                                "ssid",$/;"	s	array:events.onAvailableSSIDs.params.properties.ssids.items.required
0	NetworkManager.json	/^                                "type",$/;"	s	array:methods.GetAvailableInterfaces.result.properties.interfaces.items.required
0	NetworkManager.json	/^                            "NONE",$/;"	s	array:methods.GetSupportedsecurityModes.result.properties.security_modes.required
0	NetworkManager.json	/^                    "enabled",$/;"	s	array:methods.GetInterfaceState.result.required
0	NetworkManager.json	/^                    "endpoint",$/;"	s	array:methods.GetStunEndpoint.result.required
0	NetworkManager.json	/^                    "endpoint",$/;"	s	array:methods.Ping.params.required
0	NetworkManager.json	/^                    "endpoint",$/;"	s	array:methods.Ping.result.required
0	NetworkManager.json	/^                    "endpoint",$/;"	s	array:methods.SetStunEndpoint.params.required
0	NetworkManager.json	/^                    "endpoint",$/;"	s	array:methods.Trace.params.required
0	NetworkManager.json	/^                    "endpoint",$/;"	s	array:methods.Trace.result.required
0	NetworkManager.json	/^                    "endpoints"$/;"	s	array:methods.SetConnectivityTestEndpoints.params.required
0	NetworkManager.json	/^                    "endpoints",$/;"	s	array:methods.GetConnectivityTestEndpoints.result.required
0	NetworkManager.json	/^                    "interface"$/;"	s	array:methods.GetInterfaceState.params.required
0	NetworkManager.json	/^                    "interface"$/;"	s	array:methods.GetPrimaryInterface.result.required
0	NetworkManager.json	/^                    "interface"$/;"	s	array:methods.SetPrimaryInterface.params.required
0	NetworkManager.json	/^                    "interface",$/;"	s	array:events.onAddressChange.params.required
0	NetworkManager.json	/^                    "interface",$/;"	s	array:events.onInterfaceStateChange.params.required
0	NetworkManager.json	/^                    "interface",$/;"	s	array:methods.GetIPSettings.result.required
0	NetworkManager.json	/^                    "interface",$/;"	s	array:methods.GetPublicIP.result.required
0	NetworkManager.json	/^                    "interface",$/;"	s	array:methods.SetIPSettings.params.required
0	NetworkManager.json	/^                    "interface",$/;"	s	array:methods.SetInterfaceState.params.required
0	NetworkManager.json	/^                    "interfaces",$/;"	s	array:methods.GetAvailableInterfaces.result.required
0	NetworkManager.json	/^                    "ipversion",$/;"	s	array:methods.IsConnectedToInternet.result.required
0	NetworkManager.json	/^                    "level"$/;"	s	array:methods.SetLogLevel.params.required
0	NetworkManager.json	/^                    "level",$/;"	s	array:methods.GetLogLevel.result.required
0	NetworkManager.json	/^                    "method"$/;"	s	array:methods.StartWPS.params.required
0	NetworkManager.json	/^                    "prevActiveInterface",$/;"	s	array:events.onActiveInterfaceChange.params.required
0	NetworkManager.json	/^                    "prevState",$/;"	s	array:events.onInternetStatusChange.params.required
0	NetworkManager.json	/^                    "result",$/;"	s	array:methods.StartWPS.result.required
0	NetworkManager.json	/^                    "security_modes",$/;"	s	array:methods.GetSupportedsecurityModes.result.required
0	NetworkManager.json	/^                    "ssid"$/;"	s	array:methods.RemoveKnownSSID.params.required
0	NetworkManager.json	/^                    "ssid",$/;"	s	array:events.onWiFiSignalStrengthChange.params.required
0	NetworkManager.json	/^                    "ssid",$/;"	s	array:methods.AddToKnownSSIDs.params.required
0	NetworkManager.json	/^                    "ssid",$/;"	s	array:methods.GetConnectedSSID.result.required
0	NetworkManager.json	/^                    "ssid",$/;"	s	array:methods.GetWiFiSignalStrength.result.required
0	NetworkManager.json	/^                    "ssid",$/;"	s	array:methods.WiFiConnect.params.required
0	NetworkManager.json	/^                    "ssids",$/;"	s	array:methods.GetKnownSSIDs.result.required
0	NetworkManager.json	/^                    "state",$/;"	s	array:events.onWiFiStateChange.params.required
0	NetworkManager.json	/^                    "state",$/;"	s	array:methods.GetWifiState.result.required
0	NetworkManager.json	/^                    "success"  $/;"	s	array:methods.SetIPSettings.result.required
0	NetworkManager.json	/^                    "success"$/;"	s	array:methods.AddToKnownSSIDs.result.required
0	NetworkManager.json	/^                    "success"$/;"	s	array:methods.RemoveKnownSSID.result.required
0	NetworkManager.json	/^                    "success"$/;"	s	array:methods.SetConnectivityTestEndpoints.result.required
0	NetworkManager.json	/^                    "success"$/;"	s	array:methods.SetInterfaceState.result.required
0	NetworkManager.json	/^                    "success"$/;"	s	array:methods.SetLogLevel.result.required
0	NetworkManager.json	/^                    "success"$/;"	s	array:methods.SetPrimaryInterface.result.required
0	NetworkManager.json	/^                    "success"$/;"	s	array:methods.StartWiFiScan.result.required
0	NetworkManager.json	/^                    "success"$/;"	s	array:methods.StopWPS.result.required
0	NetworkManager.json	/^                    "success"$/;"	s	array:methods.StopWiFiScan.result.required
0	NetworkManager.json	/^                    "success"$/;"	s	array:methods.WiFiConnect.result.required
0	NetworkManager.json	/^                    "success"$/;"	s	array:methods.WiFiDisconnect.result.required
0	NetworkManager.json	/^                    "uri",$/;"	s	array:methods.GetCaptivePortalURI.result.required
1	NetworkManager.json	/^                                "`LOST`"$/;"	s	array:events.onAddressChange.params.properties.status.enum
1	NetworkManager.json	/^                                "name",$/;"	s	array:methods.GetAvailableInterfaces.result.properties.interfaces.items.required
1	NetworkManager.json	/^                                "security",$/;"	s	array:events.onAvailableSSIDs.params.properties.ssids.items.required
1	NetworkManager.json	/^                            "WPA_PSK",$/;"	s	array:methods.GetSupportedsecurityModes.result.properties.security_modes.required
1	NetworkManager.json	/^                    "activeInterface"$/;"	s	array:events.onActiveInterfaceChange.params.required
1	NetworkManager.json	/^                    "bssid",$/;"	s	array:methods.GetConnectedSSID.result.required
1	NetworkManager.json	/^                    "connected",$/;"	s	array:methods.IsConnectedToInternet.result.required
1	NetworkManager.json	/^                    "enabled"$/;"	s	array:methods.SetInterfaceState.params.required
1	NetworkManager.json	/^                    "ipaddress",$/;"	s	array:events.onAddressChange.params.required
1	NetworkManager.json	/^                    "ipversion"$/;"	s	array:methods.Ping.params.required
1	NetworkManager.json	/^                    "ipversion"$/;"	s	array:methods.Trace.params.required
1	NetworkManager.json	/^                    "ipversion",$/;"	s	array:methods.GetIPSettings.result.required
1	NetworkManager.json	/^                    "ipversion",$/;"	s	array:methods.GetPublicIP.result.required
1	NetworkManager.json	/^                    "ipversion",$/;"	s	array:methods.SetIPSettings.params.required
1	NetworkManager.json	/^                    "packetsTransmitted",$/;"	s	array:methods.Ping.result.required
1	NetworkManager.json	/^                    "passphrase",$/;"	s	array:methods.AddToKnownSSIDs.params.required
1	NetworkManager.json	/^                    "passphrase",$/;"	s	array:methods.WiFiConnect.params.required
1	NetworkManager.json	/^                    "port"$/;"	s	array:methods.SetStunEndpoint.params.required
1	NetworkManager.json	/^                    "port",$/;"	s	array:methods.GetStunEndpoint.result.required
1	NetworkManager.json	/^                    "prevStatus",$/;"	s	array:events.onInternetStatusChange.params.required
1	NetworkManager.json	/^                    "results",$/;"	s	array:methods.Trace.result.required
1	NetworkManager.json	/^                    "state",$/;"	s	array:events.onInterfaceStateChange.params.required
1	NetworkManager.json	/^                    "status"$/;"	s	array:events.onWiFiStateChange.params.required
1	NetworkManager.json	/^                    "status",$/;"	s	array:methods.GetWifiState.result.required
1	NetworkManager.json	/^                    "strength",$/;"	s	array:events.onWiFiSignalStrengthChange.params.required
1	NetworkManager.json	/^                    "strength",$/;"	s	array:methods.GetWiFiSignalStrength.result.required
1	NetworkManager.json	/^                    "success"$/;"	s	array:methods.GetAvailableInterfaces.result.required
1	NetworkManager.json	/^                    "success"$/;"	s	array:methods.GetCaptivePortalURI.result.required
1	NetworkManager.json	/^                    "success"$/;"	s	array:methods.GetConnectivityTestEndpoints.result.required
1	NetworkManager.json	/^                    "success"$/;"	s	array:methods.GetInterfaceState.result.required
1	NetworkManager.json	/^                    "success"$/;"	s	array:methods.GetKnownSSIDs.result.required
1	NetworkManager.json	/^                    "success"$/;"	s	array:methods.GetLogLevel.result.required
1	NetworkManager.json	/^                    "success"$/;"	s	array:methods.GetSupportedsecurityModes.result.required
1	NetworkManager.json	/^                    "success"$/;"	s	array:methods.StartWPS.result.required
10	NetworkManager.json	/^                    "success"$/;"	s	array:methods.Ping.result.required
2	NetworkManager.json	/^                                "mac",$/;"	s	array:methods.GetAvailableInterfaces.result.properties.interfaces.items.required
2	NetworkManager.json	/^                                "strength",$/;"	s	array:events.onAvailableSSIDs.params.properties.ssids.items.required
2	NetworkManager.json	/^                            "SAE",$/;"	s	array:methods.GetSupportedsecurityModes.result.properties.security_modes.required
2	NetworkManager.json	/^                    "autoconfig",$/;"	s	array:methods.GetIPSettings.result.required
2	NetworkManager.json	/^                    "autoconfig",$/;"	s	array:methods.SetIPSettings.params.required
2	NetworkManager.json	/^                    "guid",$/;"	s	array:methods.Trace.result.required
2	NetworkManager.json	/^                    "ipaddress",$/;"	s	array:methods.GetPublicIP.result.required
2	NetworkManager.json	/^                    "ipversion",$/;"	s	array:events.onAddressChange.params.required
2	NetworkManager.json	/^                    "packetsReceived",$/;"	s	array:methods.Ping.result.required
2	NetworkManager.json	/^                    "quality"$/;"	s	array:events.onWiFiSignalStrengthChange.params.required
2	NetworkManager.json	/^                    "quality",$/;"	s	array:methods.GetWiFiSignalStrength.result.required
2	NetworkManager.json	/^                    "rate",$/;"	s	array:methods.GetConnectedSSID.result.required
2	NetworkManager.json	/^                    "security"$/;"	s	array:methods.AddToKnownSSIDs.params.required
2	NetworkManager.json	/^                    "security"$/;"	s	array:methods.WiFiConnect.params.required
2	NetworkManager.json	/^                    "state",$/;"	s	array:events.onInternetStatusChange.params.required
2	NetworkManager.json	/^                    "state",$/;"	s	array:methods.IsConnectedToInternet.result.required
2	NetworkManager.json	/^                    "status"$/;"	s	array:events.onInterfaceStateChange.params.required
2	NetworkManager.json	/^                    "success"$/;"	s	array:methods.GetWifiState.result.required
2	NetworkManager.json	/^                    "timeout",$/;"	s	array:methods.GetStunEndpoint.result.required
3	NetworkManager.json	/^                                "enabled",$/;"	s	array:methods.GetAvailableInterfaces.result.properties.interfaces.items.required
3	NetworkManager.json	/^                                "frequency"$/;"	s	array:events.onAvailableSSIDs.params.properties.ssids.items.required
3	NetworkManager.json	/^                            "EAP"$/;"	s	array:methods.GetSupportedsecurityModes.result.properties.security_modes.required
3	NetworkManager.json	/^                    "cacheLifetime",$/;"	s	array:methods.GetStunEndpoint.result.required
3	NetworkManager.json	/^                    "ipaddress",$/;"	s	array:methods.GetIPSettings.result.required
3	NetworkManager.json	/^                    "ipaddress",$/;"	s	array:methods.SetIPSettings.params.required
3	NetworkManager.json	/^                    "noise",$/;"	s	array:methods.GetConnectedSSID.result.required
3	NetworkManager.json	/^                    "packetLoss",$/;"	s	array:methods.Ping.result.required
3	NetworkManager.json	/^                    "status"$/;"	s	array:events.onAddressChange.params.required
3	NetworkManager.json	/^                    "status"$/;"	s	array:events.onInternetStatusChange.params.required
3	NetworkManager.json	/^                    "status",$/;"	s	array:methods.IsConnectedToInternet.result.required
3	NetworkManager.json	/^                    "success"$/;"	s	array:methods.GetPublicIP.result.required
3	NetworkManager.json	/^                    "success"$/;"	s	array:methods.GetWiFiSignalStrength.result.required
3	NetworkManager.json	/^                    "success"$/;"	s	array:methods.Trace.result.required
4	NetworkManager.json	/^                                "connected"$/;"	s	array:methods.GetAvailableInterfaces.result.properties.interfaces.items.required
4	NetworkManager.json	/^                    "prefix",$/;"	s	array:methods.GetIPSettings.result.required
4	NetworkManager.json	/^                    "prefix",$/;"	s	array:methods.SetIPSettings.params.required
4	NetworkManager.json	/^                    "security",$/;"	s	array:methods.GetConnectedSSID.result.required
4	NetworkManager.json	/^                    "success"$/;"	s	array:methods.GetStunEndpoint.result.required
4	NetworkManager.json	/^                    "success"$/;"	s	array:methods.IsConnectedToInternet.result.required
4	NetworkManager.json	/^                    "tripMin",$/;"	s	array:methods.Ping.result.required
5	NetworkManager.json	/^                    "gateway",$/;"	s	array:methods.SetIPSettings.params.required
5	NetworkManager.json	/^                    "strength",$/;"	s	array:methods.GetConnectedSSID.result.required
5	NetworkManager.json	/^                    "tripAvg",$/;"	s	array:methods.Ping.result.required
5	NetworkManager.json	/^                    "ula",$/;"	s	array:methods.GetIPSettings.result.required
6	NetworkManager.json	/^                    "frequency",$/;"	s	array:methods.GetConnectedSSID.result.required
6	NetworkManager.json	/^                    "gateway",$/;"	s	array:methods.GetIPSettings.result.required
6	NetworkManager.json	/^                    "primarydns",$/;"	s	array:methods.SetIPSettings.params.required
6	NetworkManager.json	/^                    "tripMax",$/;"	s	array:methods.Ping.result.required
7	NetworkManager.json	/^                    "primarydns",$/;"	s	array:methods.GetIPSettings.result.required
7	NetworkManager.json	/^                    "secondarydns"$/;"	s	array:methods.SetIPSettings.params.required
7	NetworkManager.json	/^                    "success"$/;"	s	array:methods.GetConnectedSSID.result.required
7	NetworkManager.json	/^                    "tripStdDev",$/;"	s	array:methods.Ping.result.required
8	NetworkManager.json	/^                    "error",$/;"	s	array:methods.Ping.result.required
8	NetworkManager.json	/^                    "secondarydns",$/;"	s	array:methods.GetIPSettings.result.required
9	NetworkManager.json	/^                    "guid",$/;"	s	array:methods.Ping.result.required
9	NetworkManager.json	/^                    "success"$/;"	s	array:methods.GetIPSettings.result.required
API Documentation	README.md	/^# API Documentation$/;"	c
API_VERSION_NUMBER_MAJOR	LegacyPlugin_NetworkAPIs.cpp	/^#define API_VERSION_NUMBER_MAJOR /;"	d	file:
API_VERSION_NUMBER_MAJOR	LegacyPlugin_WiFiManagerAPIs.cpp	/^#define API_VERSION_NUMBER_MAJOR /;"	d	file:
API_VERSION_NUMBER_MINOR	LegacyPlugin_NetworkAPIs.cpp	/^#define API_VERSION_NUMBER_MINOR /;"	d	file:
API_VERSION_NUMBER_MINOR	LegacyPlugin_WiFiManagerAPIs.cpp	/^#define API_VERSION_NUMBER_MINOR /;"	d	file:
API_VERSION_NUMBER_PATCH	LegacyPlugin_NetworkAPIs.cpp	/^#define API_VERSION_NUMBER_PATCH /;"	d	file:
API_VERSION_NUMBER_PATCH	LegacyPlugin_WiFiManagerAPIs.cpp	/^#define API_VERSION_NUMBER_PATCH /;"	d	file:
Acronyms, Abbreviations and Terms	docs/NetworkManagerPlugin.md	/^## Acronyms, Abbreviations and Terms$/;"	s	chapter:Introduction
Activated	NetworkManager.h	/^                void Activated(RPC::IRemoteConnection * \/* connection *\/) override$/;"	f	class:WPEFramework::Plugin::NetworkManager::Notification	typeref:typename:void
AddToKnownSSIDs	NetworkManager.json	/^        "AddToKnownSSIDs":{$/;"	o	object:methods
AddToKnownSSIDs	NetworkManagerGnomeProxy.cpp	/^        uint32_t NetworkManagerImplementation::AddToKnownSSIDs(const WiFiConnectTo& ssid \/* @in/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
AddToKnownSSIDs	NetworkManagerJsonRpc.cpp	/^        uint32_t NetworkManager::AddToKnownSSIDs(const JsonObject& parameters, JsonObject& respo/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
AddToKnownSSIDs	NetworkManagerRDKProxy.cpp	/^        uint32_t NetworkManagerImplementation::AddToKnownSSIDs(const WiFiConnectTo& ssid \/* @in/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
AddToKnownSSIDs	gdbus/NetworkManagerGdbusProxy.cpp	/^        uint32_t NetworkManagerImplementation::AddToKnownSSIDs(const WiFiConnectTo& ssid \/* @in/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
Added	CHANGELOG.md	/^### Added$/;"	S	section:Changelog""[0.1.0] - 2024-03-28
Added	CHANGELOG.md	/^### Added$/;"	S	section:Changelog""[0.2.0] - 2024-05-27
Added	CHANGELOG.md	/^### Added$/;"	S	section:Changelog""[0.3.0] - 2024-09-16
Added	CHANGELOG.md	/^### Added$/;"	S	section:Changelog""[0.4.0] - 2024-10-04
Added	CHANGELOG.md	/^### Added$/;"	S	section:Changelog""[0.5.0] - 2024-11-05
Added	CHANGELOG.md	/^### Added$/;"	S	section:Changelog""[0.5.1] - 2024-11-15
Added	CHANGELOG.md	/^### Added$/;"	S	section:Changelog""[0.6.0] - 2024-12-10
Added	CHANGELOG.md	/^### Added$/;"	S	section:Changelog""[0.7.0] - 2024-12-30
Added	CHANGELOG.md	/^### Added$/;"	S	section:Changelog""[0.9.0] - 2025-01-30
AddressTest	Tests/unit_test/test_NetworkManagerStunClient.cpp	/^class AddressTest : public ::testing::Test {$/;"	c	file:
BSSID_BUFF	NetworkManagerRDKProxy.cpp	/^#define BSSID_BUFF /;"	d	file:
BUFFER_SIZE	WiFiSignalStrengthMonitor.cpp	/^#define BUFFER_SIZE /;"	d	file:
BUFF_LENGTH_24	NetworkManagerRDKProxy.cpp	/^#define BUFF_LENGTH_24 /;"	d	file:
BUFF_LENGTH_256	NetworkManagerRDKProxy.cpp	/^#define BUFF_LENGTH_256 /;"	d	file:
BUFF_LENGTH_4	NetworkManagerRDKProxy.cpp	/^#define BUFF_LENGTH_4 /;"	d	file:
BUFF_LENGTH_64	NetworkManagerRDKProxy.cpp	/^#define BUFF_LENGTH_64 /;"	d	file:
BUFF_MAC	NetworkManagerRDKProxy.cpp	/^#define BUFF_MAC /;"	d	file:
BUFF_MAX	NetworkManagerRDKProxy.cpp	/^#define BUFF_MAX /;"	d	file:
BUFF_MIN	NetworkManagerRDKProxy.cpp	/^#define BUFF_MIN /;"	d	file:
CIDR_NETMASK_IP_LEN	LegacyPlugin_NetworkAPIs.cpp	/^#define CIDR_NETMASK_IP_LEN /;"	d	file:
CIDR_NETMASK_IP_LEN	NetworkManagerImplementation.cpp	/^#define CIDR_NETMASK_IP_LEN /;"	d	file:
CIDR_NETMASK_IP_LEN	NetworkManagerRDKProxy.cpp	/^#define CIDR_NETMASK_IP_LEN /;"	d	file:
CIDR_PREFIXES	LegacyPlugin_NetworkAPIs.cpp	/^const string CIDR_PREFIXES[CIDR_NETMASK_IP_LEN+1] = {$/;"	v	namespace:WPEFramework::Plugin	typeref:typename:const string[]
CIDR_PREFIXES	NetworkManagerRDKProxy.cpp	/^const string CIDR_PREFIXES[CIDR_NETMASK_IP_LEN+1] = {$/;"	v	namespace:WPEFramework::Plugin	typeref:typename:const string[]
CMAKE_CXX_FLAGS	Tests/unit_test/unit_tests.cmake	/^set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --coverage")$/;"	v
CONNECTED_LNF	NetworkManagerRDKProxy.cpp	/^    CONNECTED_LNF,                         \/**< Connected to the LNF network *\/$/;"	e	enum:_WiFiLNFStatusCode_t	file:
CONNECTED_PRIVATE	NetworkManagerRDKProxy.cpp	/^    CONNECTED_PRIVATE,                     \/** Connected to a network that is not LNF *\/$/;"	e	enum:_WiFiLNFStatusCode_t	file:
Cache	NetworkManager.h	/^                Cache() : is_set(false) {}$/;"	f	class:WPEFramework::Plugin::NetworkManager::Cache
Cache	NetworkManager.h	/^            class Cache {$/;"	c	class:WPEFramework::Plugin::NetworkManager
Case Sensitivity	docs/NetworkManagerPlugin.md	/^## Case Sensitivity$/;"	s	chapter:Introduction
Changed	CHANGELOG.md	/^### Changed$/;"	S	section:Changelog""[0.8.0] - 2025-01-03
Changelog	CHANGELOG.md	/^# Changelog$/;"	c
ClientTest	Tests/unit_test/test_NetworkManagerStunClient.cpp	/^class ClientTest : public ::testing::Test {$/;"	c	file:
Configuration	NetworkManagerImplementation.h	/^                Configuration()$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation::Configuration
Configuration	NetworkManagerImplementation.h	/^            class Configuration : public Core::JSON::Container {$/;"	c	class:WPEFramework::Plugin::NetworkManagerImplementation
Configure	NetworkManagerImplementation.cpp	/^        uint32_t NetworkManagerImplementation::Configure(PluginHost::IShell* service)$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
ConnectivityCheckInterval	NetworkManagerImplementation.h	/^                    Core::JSON::DecUInt32 ConnectivityCheckInterval;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation::ConnectivityConf	typeref:typename:Core::JSON::DecUInt32
ConnectivityConf	NetworkManagerImplementation.h	/^                    ConnectivityConf()$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation::ConnectivityConf
ConnectivityConf	NetworkManagerImplementation.h	/^            class ConnectivityConf : public Core::JSON::Container {$/;"	c	class:WPEFramework::Plugin::NetworkManagerImplementation
ConnectivityMonitor	NetworkManagerConnectivity.cpp	/^    ConnectivityMonitor::ConnectivityMonitor()$/;"	f	class:WPEFramework::Plugin::ConnectivityMonitor
ConnectivityMonitor	NetworkManagerConnectivity.h	/^        class ConnectivityMonitor$/;"	c	namespace:WPEFramework::Plugin
ConnectivityMonitorTest	Tests/unit_test/test_NetworkManagerConnectivity.cpp	/^class ConnectivityMonitorTest : public ::testing::Test {$/;"	c	file:
Contributing	CONTRIBUTING.md	/^Contributing$/;"	c
DEBUG_LEVEL	NetworkManagerLogger.h	/^enum LogLevel {FATAL_LEVEL = 0, ERROR_LEVEL, WARNING_LEVEL, INFO_LEVEL, DEBUG_LEVEL};$/;"	e	enum:NetworkManagerLogger::LogLevel
DEFAULT_PING_PACKETS	LegacyPlugin_NetworkAPIs.cpp	/^#define DEFAULT_PING_PACKETS /;"	d	file:
DEFAULT_PING_PACKETS	NetworkManagerRDKProxy.cpp	/^#define DEFAULT_PING_PACKETS /;"	d	file:
DEFAULT_WIFI_SIGNAL_TEST_INTERVAL_SEC	WiFiSignalStrengthMonitor.h	/^#define DEFAULT_WIFI_SIGNAL_TEST_INTERVAL_SEC /;"	d
DISCONNECTED_CANT_CONNECT_TO_PRIVATE	NetworkManagerRDKProxy.cpp	/^    DISCONNECTED_CANT_CONNECT_TO_PRIVATE \/\/ client could obtain LFAT, but couldn't connect to /;"	e	enum:_WiFiLNFStatusCode_t	file:
DISCONNECTED_GET_LFAT_FAILED	NetworkManagerRDKProxy.cpp	/^    DISCONNECTED_GET_LFAT_FAILED,          \/**< client wasn't able to acquire an LFAT *\/$/;"	e	enum:_WiFiLNFStatusCode_t	file:
DISCONNECTED_NO_LNF_GATEWAY_DETECTED	NetworkManagerRDKProxy.cpp	/^    DISCONNECTED_NO_LNF_GATEWAY_DETECTED,  \/**< unable to connect to LNF network *\/$/;"	e	enum:_WiFiLNFStatusCode_t	file:
DbusMgr	gdbus/NetworkManagerGdbusMgr.cpp	/^        DbusMgr::DbusMgr() : connection(NULL)$/;"	f	class:WPEFramework::Plugin::DbusMgr
DbusMgr	gdbus/NetworkManagerGdbusMgr.h	/^        class DbusMgr {$/;"	c	namespace:WPEFramework::Plugin
Deactivated	NetworkManager.cpp	/^        void NetworkManager::Deactivated(RPC::IRemoteConnection *connection)$/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:void
Deactivated	NetworkManager.h	/^                void Deactivated(RPC::IRemoteConnection *connection) override$/;"	f	class:WPEFramework::Plugin::NetworkManager::Notification	typeref:typename:void
Deinitialize	LegacyPlugin_NetworkAPIs.cpp	/^        void Network::Deinitialize(PluginHost::IShell* \/* service *\/)$/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:void
Deinitialize	LegacyPlugin_WiFiManagerAPIs.cpp	/^        void WiFiManager::Deinitialize(PluginHost::IShell* \/* service *\/)$/;"	f	class:WPEFramework::Plugin::WiFiManager	typeref:typename:void
Deinitialize	NetworkManager.cpp	/^        void NetworkManager::Deinitialize(PluginHost::IShell *service)$/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:void
Description	docs/NetworkManagerPlugin.md	/^# Description$/;"	c
Design	README.md	/^# Design$/;"	c
Dispatch	LegacyPlugin_NetworkAPIs.cpp	/^        void Dispatch() override$/;"	f	class:WPEFramework::Job	typeref:typename:void	file:
Dispatch	LegacyPlugin_WiFiManagerAPIs.cpp	/^        void Dispatch() override$/;"	f	class:WPEFramework::Job	typeref:typename:void	file:
Dispatch	NetworkManagerGnomeWIFI.cpp	/^        void Dispatch() override$/;"	f	class:WPEFramework::Job	typeref:typename:void	file:
Dispatch	NetworkManagerImplementation.h	/^                void Dispatch() override$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation::Job	typeref:typename:void
DnsResolver	NetworkManagerConnectivity.cpp	/^    DnsResolver::DnsResolver(std::string url, Exchange::INetworkManager::IPVersion ipversion, in/;"	f	class:WPEFramework::Plugin::DnsResolver
DnsResolver	NetworkManagerConnectivity.h	/^        class DnsResolver$/;"	c	namespace:WPEFramework::Plugin
EAP	NetworkManager.json	/^                            "EAP": {$/;"	o	object:methods.GetSupportedsecurityModes.result.properties.security_modes.properties
ENABLE_UNIT_TESTING	CMakeLists.txt	/^option(ENABLE_UNIT_TESTING "Enable unit tests" OFF)$/;"	D
ENUM_CONVERSION_BEGIN	NetworkManagerJsonEnum.h	/^ENUM_CONVERSION_BEGIN(Exchange::INetworkManager::InterfaceType)$/;"	f	namespace:WPEFramework
ERROR_LEVEL	NetworkManagerLogger.h	/^enum LogLevel {FATAL_LEVEL = 0, ERROR_LEVEL, WARNING_LEVEL, INFO_LEVEL, DEBUG_LEVEL};$/;"	e	enum:NetworkManagerLogger::LogLevel
EndpointManager	NetworkManagerConnectivity.cpp	/^    EndpointManager::EndpointManager()$/;"	f	class:WPEFramework::Plugin::EndpointManager
EndpointManager	NetworkManagerConnectivity.h	/^        class EndpointManager {$/;"	c	namespace:WPEFramework::Plugin
ErrorCodeMapping	LegacyPlugin_WiFiManagerAPIs.cpp	/^        bool WiFiManager::ErrorCodeMapping(const uint32_t ipvalue, uint32_t &opvalue)$/;"	f	class:WPEFramework::Plugin::WiFiManager	typeref:typename:bool
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Methods""*AddToKnownSSIDs [<sup>method</sup>](#head.Methods)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Methods""*GetAvailableInterfaces [<sup>method</sup>](#head.Methods)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Methods""*GetCaptivePortalURI [<sup>method</sup>](#head.Methods)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Methods""*GetConnectedSSID [<sup>method</sup>](#head.Methods)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Methods""*GetConnectivityTestEndpoints [<sup>method</sup>](#head.Methods)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Methods""*GetIPSettings [<sup>method</sup>](#head.Methods)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Methods""*GetInterfaceState [<sup>method</sup>](#head.Methods)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Methods""*GetKnownSSIDs [<sup>method</sup>](#head.Methods)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Methods""*GetLogLevel [<sup>method</sup>](#head.Methods)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Methods""*GetPrimaryInterface [<sup>method</sup>](#head.Methods)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Methods""*GetPublicIP [<sup>method</sup>](#head.Methods)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Methods""*GetStunEndpoint [<sup>method</sup>](#head.Methods)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Methods""*GetSupportedsecurityModes [<sup>method</sup>](#head.Methods)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Methods""*GetWiFiSignalStrength [<sup>method</sup>](#head.Methods)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Methods""*GetWifiState [<sup>method</sup>](#head.Methods)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Methods""*IsConnectedToInternet [<sup>method</sup>](#head.Methods)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Methods""*Ping [<sup>method</sup>](#head.Methods)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Methods""*RemoveKnownSSID [<sup>method</sup>](#head.Methods)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Methods""*SetConnectivityTestEndpoints [<sup>method</sup>](#head.Methods)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Methods""*SetIPSettings [<sup>method</sup>](#head.Methods)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Methods""*SetInterfaceState [<sup>method</sup>](#head.Methods)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Methods""*SetLogLevel [<sup>method</sup>](#head.Methods)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Methods""*SetPrimaryInterface [<sup>method</sup>](#head.Methods)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Methods""*SetStunEndpoint [<sup>method</sup>](#head.Methods)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Methods""*StartWPS [<sup>method</sup>](#head.Methods)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Methods""*StartWiFiScan [<sup>method</sup>](#head.Methods)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Methods""*StopWPS [<sup>method</sup>](#head.Methods)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Methods""*StopWiFiScan [<sup>method</sup>](#head.Methods)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Methods""*Trace [<sup>method</sup>](#head.Methods)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Methods""*WiFiConnect [<sup>method</sup>](#head.Methods)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Methods""*WiFiDisconnect [<sup>method</sup>](#head.Methods)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Notifications""*onActiveInterfaceChange [<sup>event</sup>](#head.Notifications)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Notifications""*onAddressChange [<sup>event</sup>](#head.Notifications)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Notifications""*onAvailableSSIDs [<sup>event</sup>](#head.Notifications)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Notifications""*onInterfaceStateChange [<sup>event</sup>](#head.Notifications)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Notifications""*onInternetStatusChange [<sup>event</sup>](#head.Notifications)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Notifications""*onWiFiSignalStrengthChange [<sup>event</sup>](#head.Notifications)*
Example	docs/NetworkManagerPlugin.md	/^### Example$/;"	S	section:Notifications""*onWiFiStateChange [<sup>event</sup>](#head.Notifications)*
Exchange	INetworkManager.h	/^    namespace Exchange$/;"	n	namespace:WPEFramework
FATAL_LEVEL	NetworkManagerLogger.h	/^enum LogLevel {FATAL_LEVEL = 0, ERROR_LEVEL, WARNING_LEVEL, INFO_LEVEL, DEBUG_LEVEL};$/;"	e	enum:NetworkManagerLogger::LogLevel
Fixed	CHANGELOG.md	/^### Fixed$/;"	S	section:Changelog""[0.5.1] - 2024-11-15
Fixed	CHANGELOG.md	/^### Fixed$/;"	S	section:Changelog""[0.5.2] - 2024-11-19
Fixed	CHANGELOG.md	/^### Fixed$/;"	S	section:Changelog""[0.5.3] - 2024-11-21
Fixed	CHANGELOG.md	/^### Fixed$/;"	S	section:Changelog""[0.5.4] - 2024-11-29
GENERATOR_SEARCH_PATH	CMakeLists.txt	/^    set(GENERATOR_SEARCH_PATH ${CMAKE_SYSROOT}${CMAKE_INSTALL_PREFIX}\/include\/${NAMESPACE})$/;"	v
G_VARIANT_LOOKUP	gdbus/NetworkManagerGdbusUtils.h	/^#define G_VARIANT_LOOKUP(/;"	d
GetAvailableInterfaces	NetworkManager.json	/^        "GetAvailableInterfaces":{$/;"	o	object:methods
GetAvailableInterfaces	NetworkManagerGnomeProxy.cpp	/^        uint32_t NetworkManagerImplementation::GetAvailableInterfaces (Exchange::INetworkManager/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
GetAvailableInterfaces	NetworkManagerJsonRpc.cpp	/^        uint32_t NetworkManager::GetAvailableInterfaces (const JsonObject& parameters, JsonObjec/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
GetAvailableInterfaces	NetworkManagerRDKProxy.cpp	/^        uint32_t NetworkManagerImplementation::GetAvailableInterfaces (Exchange::INetworkManager/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
GetAvailableInterfaces	gdbus/NetworkManagerGdbusProxy.cpp	/^        uint32_t NetworkManagerImplementation::GetAvailableInterfaces (Exchange::INetworkManager/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
GetCaptivePortalURI	NetworkManager.json	/^        "GetCaptivePortalURI":{$/;"	o	object:methods
GetCaptivePortalURI	NetworkManagerImplementation.cpp	/^        uint32_t NetworkManagerImplementation::GetCaptivePortalURI(string &uri \/* @out *\/) con/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
GetCaptivePortalURI	NetworkManagerJsonRpc.cpp	/^        uint32_t NetworkManager::GetCaptivePortalURI(const JsonObject& parameters, JsonObject& r/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
GetConnectedSSID	NetworkManager.json	/^        "GetConnectedSSID":{$/;"	o	object:methods
GetConnectedSSID	NetworkManagerGnomeProxy.cpp	/^        uint32_t NetworkManagerImplementation::GetConnectedSSID(WiFiSSIDInfo&  ssidInfo \/* @out/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
GetConnectedSSID	NetworkManagerJsonRpc.cpp	/^        uint32_t NetworkManager::GetConnectedSSID(const JsonObject& parameters, JsonObject& resp/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
GetConnectedSSID	NetworkManagerRDKProxy.cpp	/^        uint32_t NetworkManagerImplementation::GetConnectedSSID(WiFiSSIDInfo&  ssidInfo \/* @out/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
GetConnectedSSID	gdbus/NetworkManagerGdbusProxy.cpp	/^        uint32_t NetworkManagerImplementation::GetConnectedSSID(WiFiSSIDInfo&  ssidInfo \/* @out/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
GetConnectivityTestEndpoints	NetworkManager.json	/^        "GetConnectivityTestEndpoints":{$/;"	o	object:methods
GetConnectivityTestEndpoints	NetworkManagerImplementation.cpp	/^        uint32_t NetworkManagerImplementation::GetConnectivityTestEndpoints(IStringIterator*& en/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
GetConnectivityTestEndpoints	NetworkManagerJsonRpc.cpp	/^        uint32_t NetworkManager::GetConnectivityTestEndpoints(const JsonObject& parameters, Json/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
GetIPSettings	NetworkManager.json	/^        "GetIPSettings":{$/;"	o	object:methods
GetIPSettings	NetworkManagerGnomeProxy.cpp	/^        uint32_t NetworkManagerImplementation::GetIPSettings(string& interface \/* @inout *\/, c/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
GetIPSettings	NetworkManagerJsonRpc.cpp	/^        uint32_t NetworkManager::GetIPSettings (const JsonObject& parameters, JsonObject& respon/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
GetIPSettings	NetworkManagerRDKProxy.cpp	/^        uint32_t NetworkManagerImplementation::GetIPSettings(string& interface \/* @inout *\/, c/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
GetIPSettings	gdbus/NetworkManagerGdbusProxy.cpp	/^        uint32_t NetworkManagerImplementation::GetIPSettings(string& interface \/* @inout *\/, c/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
GetInitialConnectionState	NetworkManagerRDKProxy.cpp	/^        void NetworkManagerImplementation::GetInitialConnectionState()$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:void
GetInterfaceState	NetworkManager.json	/^        "GetInterfaceState":{$/;"	o	object:methods
GetInterfaceState	NetworkManagerGnomeProxy.cpp	/^        uint32_t NetworkManagerImplementation::GetInterfaceState(const string& interface\/* @in /;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
GetInterfaceState	NetworkManagerJsonRpc.cpp	/^        uint32_t NetworkManager::GetInterfaceState(const JsonObject& parameters, JsonObject& res/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
GetInterfaceState	NetworkManagerRDKProxy.cpp	/^        uint32_t NetworkManagerImplementation::GetInterfaceState(const string& interface\/* @in /;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
GetInterfaceState	gdbus/NetworkManagerGdbusProxy.cpp	/^        uint32_t NetworkManagerImplementation::GetInterfaceState(const string& interface\/* @in /;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
GetKnownSSIDs	NetworkManager.json	/^        "GetKnownSSIDs":{$/;"	o	object:methods
GetKnownSSIDs	NetworkManagerGnomeProxy.cpp	/^        uint32_t NetworkManagerImplementation::GetKnownSSIDs(IStringIterator*& ssids \/* @out *\//;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
GetKnownSSIDs	NetworkManagerJsonRpc.cpp	/^        uint32_t NetworkManager::GetKnownSSIDs(const JsonObject& parameters, JsonObject& respons/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
GetKnownSSIDs	NetworkManagerRDKProxy.cpp	/^        uint32_t NetworkManagerImplementation::GetKnownSSIDs(IStringIterator*& ssids \/* @out *\//;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
GetKnownSSIDs	gdbus/NetworkManagerGdbusProxy.cpp	/^        uint32_t NetworkManagerImplementation::GetKnownSSIDs(IStringIterator*& ssids \/* @out *\//;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
GetLevel	NetworkManagerLogger.cpp	/^    void GetLevel(LogLevel& level)$/;"	f	namespace:NetworkManagerLogger	typeref:typename:void
GetLogLevel	NetworkManager.json	/^        "GetLogLevel":{$/;"	o	object:methods
GetLogLevel	NetworkManagerImplementation.cpp	/^        uint32_t NetworkManagerImplementation::GetLogLevel(Logging& level \/* @out *\/)$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
GetLogLevel	NetworkManagerJsonRpc.cpp	/^        uint32_t NetworkManager::GetLogLevel (const JsonObject& parameters, JsonObject& response/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
GetPrimaryInterface	NetworkManager.json	/^        "GetPrimaryInterface": {$/;"	o	object:methods
GetPrimaryInterface	NetworkManagerGnomeProxy.cpp	/^        uint32_t NetworkManagerImplementation::GetPrimaryInterface (string& interface \/* @out */;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
GetPrimaryInterface	NetworkManagerJsonRpc.cpp	/^        uint32_t NetworkManager::GetPrimaryInterface (const JsonObject& parameters, JsonObject& /;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
GetPrimaryInterface	NetworkManagerRDKProxy.cpp	/^        uint32_t NetworkManagerImplementation::GetPrimaryInterface (string& interface \/* @out */;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
GetPrimaryInterface	gdbus/NetworkManagerGdbusProxy.cpp	/^        uint32_t NetworkManagerImplementation::GetPrimaryInterface (string& interface \/* @out */;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
GetPublicIP	NetworkManager.json	/^        "GetPublicIP":{$/;"	o	object:methods
GetPublicIP	NetworkManagerImplementation.cpp	/^        uint32_t NetworkManagerImplementation::GetPublicIP (string& interface \/* @inout *\/, st/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
GetPublicIP	NetworkManagerJsonRpc.cpp	/^        uint32_t NetworkManager::GetPublicIP(const JsonObject& parameters, JsonObject& response)$/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
GetStunEndpoint	NetworkManager.json	/^        "GetStunEndpoint": {$/;"	o	object:methods
GetStunEndpoint	NetworkManagerImplementation.cpp	/^        uint32_t NetworkManagerImplementation::GetStunEndpoint (string &endpoint \/* @out *\/, u/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
GetStunEndpoint	NetworkManagerJsonRpc.cpp	/^        uint32_t NetworkManager::GetStunEndpoint(const JsonObject& parameters, JsonObject& respo/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
GetSupportedSecurityModes	NetworkManagerImplementation.cpp	/^        uint32_t NetworkManagerImplementation::GetSupportedSecurityModes(ISecurityModeIterator*&/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
GetSupportedSecurityModes	NetworkManagerJsonRpc.cpp	/^        uint32_t NetworkManager::GetSupportedSecurityModes(const JsonObject& parameters, JsonObj/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
GetSupportedsecurityModes	NetworkManager.json	/^        "GetSupportedsecurityModes":{$/;"	o	object:methods
GetWiFiSignalStrength	NetworkManager.json	/^        "GetWiFiSignalStrength":{$/;"	o	object:methods
GetWiFiSignalStrength	NetworkManagerGnomeProxy.cpp	/^        uint32_t NetworkManagerImplementation::GetWiFiSignalStrength(string& ssid \/* @out *\/, /;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
GetWiFiSignalStrength	NetworkManagerJsonRpc.cpp	/^        uint32_t NetworkManager::GetWiFiSignalStrength(const JsonObject& parameters, JsonObject&/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
GetWiFiSignalStrength	NetworkManagerRDKProxy.cpp	/^        uint32_t NetworkManagerImplementation::GetWiFiSignalStrength(string& ssid \/* @out *\/, /;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
GetWiFiSignalStrength	gdbus/NetworkManagerGdbusProxy.cpp	/^        uint32_t NetworkManagerImplementation::GetWiFiSignalStrength(string& ssid \/* @out *\/, /;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
GetWifiState	NetworkManager.json	/^        "GetWifiState": {$/;"	o	object:methods
GetWifiState	NetworkManagerGnomeProxy.cpp	/^        uint32_t NetworkManagerImplementation::GetWifiState(WiFiState &state)$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
GetWifiState	NetworkManagerJsonRpc.cpp	/^        uint32_t NetworkManager::GetWifiState(const JsonObject& parameters, JsonObject& response/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
GetWifiState	NetworkManagerRDKProxy.cpp	/^        uint32_t NetworkManagerImplementation::GetWifiState(WiFiState &state)$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
GetWifiState	gdbus/NetworkManagerGdbusProxy.cpp	/^        uint32_t NetworkManagerImplementation::GetWifiState(WiFiState &state)$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
GnomeNetworkManagerEvents	NetworkManagerGnomeEvents.cpp	/^    GnomeNetworkManagerEvents::GnomeNetworkManagerEvents()$/;"	f	class:WPEFramework::Plugin::GnomeNetworkManagerEvents
GnomeNetworkManagerEvents	NetworkManagerGnomeEvents.h	/^    class GnomeNetworkManagerEvents$/;"	c	namespace:WPEFramework::Plugin
GnomeUtils	gdbus/NetworkManagerGdbusUtils.h	/^        class GnomeUtils {$/;"	c	namespace:WPEFramework::Plugin
HttpStatus_200_OK	NetworkManagerConnectivity.h	/^    HttpStatus_200_OK                      = 200,$/;"	e	enum:nsm_connectivity_httpcode
HttpStatus_204_No_Content	NetworkManagerConnectivity.h	/^    HttpStatus_204_No_Content              = 204,$/;"	e	enum:nsm_connectivity_httpcode
HttpStatus_301_Moved_Permanentl	NetworkManagerConnectivity.h	/^    HttpStatus_301_Moved_Permanentl        = 301,$/;"	e	enum:nsm_connectivity_httpcode
HttpStatus_302_Found	NetworkManagerConnectivity.h	/^    HttpStatus_302_Found                   = 302,     \/\/ captive portal$/;"	e	enum:nsm_connectivity_httpcode
HttpStatus_307_Temporary_Redirect	NetworkManagerConnectivity.h	/^    HttpStatus_307_Temporary_Redirect      = 307,$/;"	e	enum:nsm_connectivity_httpcode
HttpStatus_308_Permanent_Redirect	NetworkManagerConnectivity.h	/^    HttpStatus_308_Permanent_Redirect      = 308,$/;"	e	enum:nsm_connectivity_httpcode
HttpStatus_403_Forbidden	NetworkManagerConnectivity.h	/^    HttpStatus_403_Forbidden               = 403,$/;"	e	enum:nsm_connectivity_httpcode
HttpStatus_404_Not_Found	NetworkManagerConnectivity.h	/^    HttpStatus_404_Not_Found               = 404,$/;"	e	enum:nsm_connectivity_httpcode
HttpStatus_511_Authentication_Required	NetworkManagerConnectivity.h	/^    HttpStatus_511_Authentication_Required = 511      \/\/ captive portal RFC 6585$/;"	e	enum:nsm_connectivity_httpcode
HttpStatus_response_error	NetworkManagerConnectivity.h	/^    HttpStatus_response_error               = 99,$/;"	e	enum:nsm_connectivity_httpcode
IARMBUS_INCLUDE_DIRS	cmake/FindIARMBus.cmake	/^set(IARMBUS_INCLUDE_DIRS ${IARMBUS_INCLUDE_DIRS} CACHE PATH "Path to IARMBus include")$/;"	v
IARMBUS_INCLUDE_DIRS	cmake/FindIARMBus.cmake	/^set(IARMBUS_INCLUDE_DIRS ${IARMBUS_INCLUDE_DIRS})$/;"	v
IARMBUS_LIBRARIES	cmake/FindIARMBus.cmake	/^set(IARMBUS_LIBRARIES ${IARMBUS_LIBRARIES} CACHE PATH "Path to IARMBus library")$/;"	v
IARM_BUS_DAEMON_NAME	Tests/mocks/Iarm.h	/^#define IARM_BUS_DAEMON_NAME /;"	d
IARM_BUS_NETSRVMGR_API_getDefaultInterface	NetworkManagerRDKProxy.cpp	/^#define IARM_BUS_NETSRVMGR_API_getDefaultInterface /;"	d	file:
IARM_BUS_NETSRVMGR_API_getIPSettings	NetworkManagerRDKProxy.cpp	/^#define IARM_BUS_NETSRVMGR_API_getIPSettings /;"	d	file:
IARM_BUS_NETSRVMGR_API_getInterfaceList	NetworkManagerRDKProxy.cpp	/^#define IARM_BUS_NETSRVMGR_API_getInterfaceList /;"	d	file:
IARM_BUS_NETSRVMGR_API_isAvailable	NetworkManagerRDKProxy.cpp	/^#define IARM_BUS_NETSRVMGR_API_isAvailable /;"	d	file:
IARM_BUS_NETSRVMGR_API_isInterfaceEnabled	NetworkManagerRDKProxy.cpp	/^#define IARM_BUS_NETSRVMGR_API_isInterfaceEnabled /;"	d	file:
IARM_BUS_NETSRVMGR_API_setDefaultInterface	NetworkManagerRDKProxy.cpp	/^#define IARM_BUS_NETSRVMGR_API_setDefaultInterface /;"	d	file:
IARM_BUS_NETSRVMGR_API_setIPSettings	NetworkManagerRDKProxy.cpp	/^#define IARM_BUS_NETSRVMGR_API_setIPSettings /;"	d	file:
IARM_BUS_NETSRVMGR_API_setInterfaceEnabled	NetworkManagerRDKProxy.cpp	/^#define IARM_BUS_NETSRVMGR_API_setInterfaceEnabled /;"	d	file:
IARM_BUS_NETWORK_MANAGER_EVENT_DEFAULT_INTERFACE	NetworkManagerRDKProxy.cpp	/^    IARM_BUS_NETWORK_MANAGER_EVENT_DEFAULT_INTERFACE,$/;"	e	enum:_NetworkManager_EventId_t	file:
IARM_BUS_NETWORK_MANAGER_EVENT_INTERFACE_CONNECTION_STATUS	NetworkManagerRDKProxy.cpp	/^    IARM_BUS_NETWORK_MANAGER_EVENT_INTERFACE_CONNECTION_STATUS,$/;"	e	enum:_NetworkManager_EventId_t	file:
IARM_BUS_NETWORK_MANAGER_EVENT_INTERFACE_ENABLED_STATUS	NetworkManagerRDKProxy.cpp	/^    IARM_BUS_NETWORK_MANAGER_EVENT_INTERFACE_ENABLED_STATUS,$/;"	e	enum:_NetworkManager_EventId_t	file:
IARM_BUS_NETWORK_MANAGER_EVENT_INTERFACE_IPADDRESS	NetworkManagerRDKProxy.cpp	/^    IARM_BUS_NETWORK_MANAGER_EVENT_INTERFACE_IPADDRESS,$/;"	e	enum:_NetworkManager_EventId_t	file:
IARM_BUS_NETWORK_MANAGER_EVENT_INTERNET_CONNECTION_CHANGED	NetworkManagerRDKProxy.cpp	/^    IARM_BUS_NETWORK_MANAGER_EVENT_INTERNET_CONNECTION_CHANGED,$/;"	e	enum:_NetworkManager_EventId_t	file:
IARM_BUS_NETWORK_MANAGER_EVENT_SET_INTERFACE_CONTROL_PERSISTENCE	NetworkManagerRDKProxy.cpp	/^    IARM_BUS_NETWORK_MANAGER_EVENT_SET_INTERFACE_CONTROL_PERSISTENCE,$/;"	e	enum:_NetworkManager_EventId_t	file:
IARM_BUS_NETWORK_MANAGER_EVENT_SET_INTERFACE_ENABLED	NetworkManagerRDKProxy.cpp	/^    IARM_BUS_NETWORK_MANAGER_EVENT_SET_INTERFACE_ENABLED=50,$/;"	e	enum:_NetworkManager_EventId_t	file:
IARM_BUS_NETWORK_MANAGER_EVENT_WIFI_INTERFACE_STATE	NetworkManagerRDKProxy.cpp	/^    IARM_BUS_NETWORK_MANAGER_EVENT_WIFI_INTERFACE_STATE,$/;"	e	enum:_NetworkManager_EventId_t	file:
IARM_BUS_NETWORK_MANAGER_MAX	NetworkManagerRDKProxy.cpp	/^    IARM_BUS_NETWORK_MANAGER_MAX,$/;"	e	enum:_NetworkManager_EventId_t	file:
IARM_BUS_NM_SRV_MGR_NAME	NetworkManagerRDKProxy.cpp	/^#define IARM_BUS_NM_SRV_MGR_NAME /;"	d	file:
IARM_BUS_NetSrvMgr_DefaultRoute_t	NetworkManagerRDKProxy.cpp	/^} IARM_BUS_NetSrvMgr_DefaultRoute_t;$/;"	t	typeref:struct:__anon7d34ee9e0408	file:
IARM_BUS_NetSrvMgr_Iface_EventData_t	NetworkManagerRDKProxy.cpp	/^} IARM_BUS_NetSrvMgr_Iface_EventData_t;$/;"	t	typeref:struct:_IARM_BUS_NetSrvMgr_Iface_EventData_t	file:
IARM_BUS_NetSrvMgr_Iface_EventDefaultInterface_t	NetworkManagerRDKProxy.cpp	/^} IARM_BUS_NetSrvMgr_Iface_EventDefaultInterface_t;$/;"	t	typeref:struct:__anon7d34ee9e0708	file:
IARM_BUS_NetSrvMgr_Iface_EventInterfaceConnectionStatus_t	NetworkManagerRDKProxy.cpp	/^typedef IARM_BUS_NetSrvMgr_Iface_EventInterfaceStatus_t IARM_BUS_NetSrvMgr_Iface_EventInterfaceC/;"	t	typeref:typename:IARM_BUS_NetSrvMgr_Iface_EventInterfaceStatus_t	file:
IARM_BUS_NetSrvMgr_Iface_EventInterfaceEnabledStatus_t	NetworkManagerRDKProxy.cpp	/^typedef IARM_BUS_NetSrvMgr_Iface_EventInterfaceStatus_t IARM_BUS_NetSrvMgr_Iface_EventInterfaceE/;"	t	typeref:typename:IARM_BUS_NetSrvMgr_Iface_EventInterfaceStatus_t	file:
IARM_BUS_NetSrvMgr_Iface_EventInterfaceIPAddress_t	NetworkManagerRDKProxy.cpp	/^} IARM_BUS_NetSrvMgr_Iface_EventInterfaceIPAddress_t;$/;"	t	typeref:struct:__anon7d34ee9e0608	file:
IARM_BUS_NetSrvMgr_Iface_EventInterfaceStatus_t	NetworkManagerRDKProxy.cpp	/^} IARM_BUS_NetSrvMgr_Iface_EventInterfaceStatus_t;$/;"	t	typeref:struct:__anon7d34ee9e0508	file:
IARM_BUS_NetSrvMgr_Iface_Settings_t	NetworkManagerRDKProxy.cpp	/^} IARM_BUS_NetSrvMgr_Iface_Settings_t;$/;"	t	typeref:struct:__anon7d34ee9e0308	file:
IARM_BUS_NetSrvMgr_Iface_StunRequest_t	NetworkManagerRDKProxy.cpp	/^} IARM_BUS_NetSrvMgr_Iface_StunRequest_t;$/;"	t	typeref:struct:__anon7d34ee9e0808	file:
IARM_BUS_NetSrvMgr_InterfaceList_t	NetworkManagerRDKProxy.cpp	/^} IARM_BUS_NetSrvMgr_InterfaceList_t;$/;"	t	typeref:struct:__anon7d34ee9e0208	file:
IARM_BUS_NetSrvMgr_configurePNI_t	NetworkManagerRDKProxy.cpp	/^} IARM_BUS_NetSrvMgr_configurePNI_t;$/;"	t	typeref:struct:__anon7d34ee9e0908	file:
IARM_BUS_WIFI_MGR_API_cancelWPSPairing	NetworkManagerRDKProxy.cpp	/^#define IARM_BUS_WIFI_MGR_API_cancelWPSPairing /;"	d	file:
IARM_BUS_WIFI_MGR_API_clearSSID	NetworkManagerRDKProxy.cpp	/^#define IARM_BUS_WIFI_MGR_API_clearSSID /;"	d	file:
IARM_BUS_WIFI_MGR_API_connect	NetworkManagerRDKProxy.cpp	/^#define IARM_BUS_WIFI_MGR_API_connect /;"	d	file:
IARM_BUS_WIFI_MGR_API_disconnectSSID	NetworkManagerRDKProxy.cpp	/^#define IARM_BUS_WIFI_MGR_API_disconnectSSID /;"	d	file:
IARM_BUS_WIFI_MGR_API_getAvailableSSIDsAsync	NetworkManagerRDKProxy.cpp	/^#define IARM_BUS_WIFI_MGR_API_getAvailableSSIDsAsync /;"	d	file:
IARM_BUS_WIFI_MGR_API_getAvailableSSIDsAsyncIncr	NetworkManagerRDKProxy.cpp	/^#define IARM_BUS_WIFI_MGR_API_getAvailableSSIDsAsyncIncr /;"	d	file:
IARM_BUS_WIFI_MGR_API_getConnectedSSID	NetworkManagerRDKProxy.cpp	/^#define IARM_BUS_WIFI_MGR_API_getConnectedSSID /;"	d	file:
IARM_BUS_WIFI_MGR_API_getCurrentState	NetworkManagerRDKProxy.cpp	/^#define IARM_BUS_WIFI_MGR_API_getCurrentState /;"	d	file:
IARM_BUS_WIFI_MGR_API_initiateWPSPairing2	NetworkManagerRDKProxy.cpp	/^#define IARM_BUS_WIFI_MGR_API_initiateWPSPairing2 /;"	d	file:
IARM_BUS_WIFI_MGR_API_saveSSID	NetworkManagerRDKProxy.cpp	/^#define IARM_BUS_WIFI_MGR_API_saveSSID /;"	d	file:
IARM_BUS_WIFI_MGR_API_stopProgressiveWifiScanning	NetworkManagerRDKProxy.cpp	/^#define IARM_BUS_WIFI_MGR_API_stopProgressiveWifiScanning /;"	d	file:
IARM_BUS_WIFI_MGR_EVENT_MAX	NetworkManagerRDKProxy.cpp	/^    IARM_BUS_WIFI_MGR_EVENT_MAX,                \/*!< Maximum event id*\/$/;"	e	enum:_IARM_Bus_NMgr_WiFi_EventId_t	file:
IARM_BUS_WIFI_MGR_EVENT_onAvailableSSIDs	NetworkManagerRDKProxy.cpp	/^    IARM_BUS_WIFI_MGR_EVENT_onAvailableSSIDs,$/;"	e	enum:_IARM_Bus_NMgr_WiFi_EventId_t	file:
IARM_BUS_WIFI_MGR_EVENT_onAvailableSSIDsIncr	NetworkManagerRDKProxy.cpp	/^    IARM_BUS_WIFI_MGR_EVENT_onAvailableSSIDsIncr,$/;"	e	enum:_IARM_Bus_NMgr_WiFi_EventId_t	file:
IARM_BUS_WIFI_MGR_EVENT_onError	NetworkManagerRDKProxy.cpp	/^    IARM_BUS_WIFI_MGR_EVENT_onError,$/;"	e	enum:_IARM_Bus_NMgr_WiFi_EventId_t	file:
IARM_BUS_WIFI_MGR_EVENT_onSSIDsChanged	NetworkManagerRDKProxy.cpp	/^    IARM_BUS_WIFI_MGR_EVENT_onSSIDsChanged,$/;"	e	enum:_IARM_Bus_NMgr_WiFi_EventId_t	file:
IARM_BUS_WIFI_MGR_EVENT_onWIFILNFStateChanged	NetworkManagerRDKProxy.cpp	/^    IARM_BUS_WIFI_MGR_EVENT_onWIFILNFStateChanged,$/;"	e	enum:_IARM_Bus_NMgr_WiFi_EventId_t	file:
IARM_BUS_WIFI_MGR_EVENT_onWIFIStateChanged	NetworkManagerRDKProxy.cpp	/^    IARM_BUS_WIFI_MGR_EVENT_onWIFIStateChanged = 1,$/;"	e	enum:_IARM_Bus_NMgr_WiFi_EventId_t	file:
IARM_BUS_WiFiSrvMgr_EventData_t	NetworkManagerRDKProxy.cpp	/^} IARM_BUS_WiFiSrvMgr_EventData_t;$/;"	t	typeref:struct:_IARM_BUS_WiFiSrvMgr_EventData_t	file:
IARM_BusCall_t	Tests/mocks/Iarm.h	/^typedef IARM_Result_t (*IARM_BusCall_t)(void* arg);$/;"	t	typeref:typename:IARM_Result_t (*)(void * arg)
IARM_Bus_NMgr_WiFi_EventId_t	NetworkManagerRDKProxy.cpp	/^} IARM_Bus_NMgr_WiFi_EventId_t;$/;"	t	typeref:enum:_IARM_Bus_NMgr_WiFi_EventId_t	file:
IARM_Bus_NetworkManager_EventId_t	NetworkManagerRDKProxy.cpp	/^} IARM_Bus_NetworkManager_EventId_t;$/;"	t	typeref:enum:_NetworkManager_EventId_t	file:
IARM_Bus_WiFiSrvMgr_Param_t	NetworkManagerRDKProxy.cpp	/^} IARM_Bus_WiFiSrvMgr_Param_t;$/;"	t	typeref:struct:_IARM_Bus_WiFiSrvMgr_Param_t	file:
IARM_Bus_WiFiSrvMgr_SsidList_Param_t	NetworkManagerRDKProxy.cpp	/^} IARM_Bus_WiFiSrvMgr_SsidList_Param_t;$/;"	t	typeref:struct:_IARM_Bus_WiFiSrvMgr_SsidList_Param_t	file:
IARM_Bus_WiFiSrvMgr_WPS_Parameters_t	NetworkManagerRDKProxy.cpp	/^} IARM_Bus_WiFiSrvMgr_WPS_Parameters_t;$/;"	t	typeref:struct:_IARM_Bus_WiFiSrvMgr_WPS_Parameters_t	file:
IARM_EventHandler_t	Tests/mocks/Iarm.h	/^typedef void (*IARM_EventHandler_t)(const char* owner, IARM_EventId_t eventId, void* data, size_/;"	t	typeref:typename:void (*)(const char * owner,IARM_EventId_t eventId,void * data,size_t len)
IARM_EventId_t	Tests/mocks/Iarm.h	/^typedef int IARM_EventId_t;$/;"	t	typeref:typename:int
IARM_RESULT_INVALID_PARAM	Tests/mocks/Iarm.h	/^    IARM_RESULT_INVALID_PARAM,$/;"	e	enum:_IARM_Result_t
IARM_RESULT_INVALID_STATE	Tests/mocks/Iarm.h	/^    IARM_RESULT_INVALID_STATE,$/;"	e	enum:_IARM_Result_t
IARM_RESULT_IPCCORE_FAIL	Tests/mocks/Iarm.h	/^    IARM_RESULT_IPCCORE_FAIL,$/;"	e	enum:_IARM_Result_t
IARM_RESULT_OOM	Tests/mocks/Iarm.h	/^    IARM_RESULT_OOM,$/;"	e	enum:_IARM_Result_t
IARM_RESULT_SUCCESS	Tests/mocks/Iarm.h	/^    IARM_RESULT_SUCCESS,$/;"	e	enum:_IARM_Result_t
IARM_Result_t	Tests/mocks/Iarm.h	/^} IARM_Result_t;$/;"	t	typeref:enum:_IARM_Result_t
ID	INetworkManager.h	/^                enum { ID = ID_NETWORKMANAGER_NOTIFICATION };$/;"	e	enum:WPEFramework::Exchange::INetworkManager::INotification::__anon11e85e490203
ID	INetworkManager.h	/^            enum { ID = ID_NETWORKMANAGER };$/;"	e	enum:WPEFramework::Exchange::INetworkManager::__anon11e85e490103
ID_NETWORKMANAGER	INetworkManager.h	/^            ID_NETWORKMANAGER                               = 0x800004E0,$/;"	e	enum:WPEFramework::Exchange::myIDs
ID_NETWORKMANAGER_INTERFACE_DETAILS_ITERATOR	INetworkManager.h	/^            ID_NETWORKMANAGER_INTERFACE_DETAILS_ITERATOR    = ID_NETWORKMANAGER + 2,$/;"	e	enum:WPEFramework::Exchange::myIDs
ID_NETWORKMANAGER_NOTIFICATION	INetworkManager.h	/^            ID_NETWORKMANAGER_NOTIFICATION                  = ID_NETWORKMANAGER + 1,$/;"	e	enum:WPEFramework::Exchange::myIDs
ID_NETWORKMANAGER_WIFI_SECURITY_MODE_ITERATOR	INetworkManager.h	/^            ID_NETWORKMANAGER_WIFI_SECURITY_MODE_ITERATOR   = ID_NETWORKMANAGER + 3$/;"	e	enum:WPEFramework::Exchange::myIDs
IInterfaceDetailsIterator	INetworkManager.h	/^            using IInterfaceDetailsIterator = RPC::IIteratorType<InterfaceDetails,     ID_NETWOR/;"	t	struct:WPEFramework::Exchange::INetworkManager	typeref:typename:RPC::IIteratorType<InterfaceDetails,ID_NETWORKMANAGER_INTERFACE_DETAILS_ITERATOR>
INFO_LEVEL	NetworkManagerLogger.h	/^enum LogLevel {FATAL_LEVEL = 0, ERROR_LEVEL, WARNING_LEVEL, INFO_LEVEL, DEBUG_LEVEL};$/;"	e	enum:NetworkManagerLogger::LogLevel
INTERFACE_ACQUIRING_IP	INetworkManager.h	/^                INTERFACE_ACQUIRING_IP,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::InterfaceState
INTERFACE_ADDED	INetworkManager.h	/^                INTERFACE_ADDED,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::InterfaceState
INTERFACE_DISABLED	INetworkManager.h	/^                INTERFACE_DISABLED$/;"	e	enum:WPEFramework::Exchange::INetworkManager::InterfaceState
INTERFACE_ENTRY	NetworkManager.h	/^            INTERFACE_ENTRY(PluginHost::IPlugin)$/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:NetworkManager
INTERFACE_LINK_DOWN	INetworkManager.h	/^                INTERFACE_LINK_DOWN,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::InterfaceState
INTERFACE_LINK_UP	INetworkManager.h	/^                INTERFACE_LINK_UP,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::InterfaceState
INTERFACE_LIST	NetworkManagerRDKProxy.cpp	/^#define INTERFACE_LIST /;"	d	file:
INTERFACE_REMOVED	INetworkManager.h	/^                INTERFACE_REMOVED,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::InterfaceState
INTERFACE_SIZE	NetworkManagerRDKProxy.cpp	/^#define INTERFACE_SIZE /;"	d	file:
INTERFACE_TYPE_ETHERNET	INetworkManager.h	/^                INTERFACE_TYPE_ETHERNET \/* @text: ETHERNET *\/,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::InterfaceType
INTERFACE_TYPE_P2P	INetworkManager.h	/^                INTERFACE_TYPE_P2P      \/* @text: P2P *\/,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::InterfaceType
INTERFACE_TYPE_WIFI	INetworkManager.h	/^                INTERFACE_TYPE_WIFI     \/* @text: WIFI *\/,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::InterfaceType
INTERNET_CAPTIVE_PORTAL	INetworkManager.h	/^                INTERNET_CAPTIVE_PORTAL     \/* @text: CAPTIVE_PORTAL *\/,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::InternetStatus
INTERNET_CAPTIVE_PORTAL	NetworkManagerConnectivity.cpp	/^    constexpr auto INTERNET_CAPTIVE_PORTAL = Exchange::INetworkManager::InternetStatus::INTERNET/;"	v	namespace:WPEFramework::Plugin	typeref:typename:auto
INTERNET_FULLY_CONNECTED	INetworkManager.h	/^                INTERNET_FULLY_CONNECTED    \/* @text: FULLY_CONNECTED *\/,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::InternetStatus
INTERNET_FULLY_CONNECTED	NetworkManagerConnectivity.cpp	/^    constexpr auto INTERNET_FULLY_CONNECTED = Exchange::INetworkManager::InternetStatus::INTERNE/;"	v	namespace:WPEFramework::Plugin	typeref:typename:auto
INTERNET_LIMITED	INetworkManager.h	/^                INTERNET_LIMITED            \/* @text: LIMITED_INTERNET *\/,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::InternetStatus
INTERNET_LIMITED	NetworkManagerConnectivity.cpp	/^    constexpr auto INTERNET_LIMITED = Exchange::INetworkManager::InternetStatus::INTERNET_LIMITE/;"	v	namespace:WPEFramework::Plugin	typeref:typename:auto
INTERNET_NOT_AVAILABLE	INetworkManager.h	/^                INTERNET_NOT_AVAILABLE      \/* @text: NO_INTERNET *\/,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::InternetStatus
INTERNET_NOT_AVAILABLE	NetworkManagerConnectivity.cpp	/^    constexpr auto INTERNET_NOT_AVAILABLE = Exchange::INetworkManager::InternetStatus::INTERNET_/;"	v	namespace:WPEFramework::Plugin	typeref:typename:auto
INTERNET_UNKNOWN	INetworkManager.h	/^                INTERNET_UNKNOWN            \/* @text: UNKNOWN *\/,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::InternetStatus
INTERNET_UNKNOWN	NetworkManagerConnectivity.cpp	/^    constexpr auto INTERNET_UNKNOWN = Exchange::INetworkManager::InternetStatus::INTERNET_UNKNOW/;"	v	namespace:WPEFramework::Plugin	typeref:typename:auto
INetworkManager	INetworkManager.h	/^        struct EXTERNAL INetworkManager: virtual public Core::IUnknown$/;"	s	namespace:WPEFramework::Exchange
INotification	INetworkManager.h	/^            struct EXTERNAL INotification : virtual public Core::IUnknown$/;"	s	struct:WPEFramework::Exchange::INetworkManager
IPAddress	INetworkManager.h	/^            struct EXTERNAL IPAddress {$/;"	s	struct:WPEFramework::Exchange::INetworkManager
IPStatus	INetworkManager.h	/^            enum IPStatus : uint8_t$/;"	g	struct:WPEFramework::Exchange::INetworkManager	typeref:typename:uint8_t
IPVersion	INetworkManager.h	/^            enum IPVersion : uint8_t$/;"	g	struct:WPEFramework::Exchange::INetworkManager	typeref:typename:uint8_t
IP_ACQUIRED	INetworkManager.h	/^                IP_ACQUIRED \/* @text: ACQUIRED *\/,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::IPStatus
IP_ADDRESS_V4	INetworkManager.h	/^                IP_ADDRESS_V4       \/* @text: IPv4 *\/,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::IPVersion
IP_ADDRESS_V4	NetworkManagerConnectivity.cpp	/^    constexpr auto IP_ADDRESS_V4 = Exchange::INetworkManager::IPVersion::IP_ADDRESS_V4;$/;"	v	namespace:WPEFramework::Plugin	typeref:typename:auto
IP_ADDRESS_V6	INetworkManager.h	/^                IP_ADDRESS_V6       \/* @text: IPv6 *\/,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::IPVersion
IP_ADDRESS_V6	NetworkManagerConnectivity.cpp	/^    constexpr auto IP_ADDRESS_V6 = Exchange::INetworkManager::IPVersion::IP_ADDRESS_V6;$/;"	v	namespace:WPEFramework::Plugin	typeref:typename:auto
IP_LOST	INetworkManager.h	/^                IP_LOST     \/* @text: LOST *\/,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::IPStatus
ISecurityModeIterator	INetworkManager.h	/^            using ISecurityModeIterator     = RPC::IIteratorType<WIFISecurityModeInfo, ID_NETWOR/;"	t	struct:WPEFramework::Exchange::INetworkManager	typeref:typename:RPC::IIteratorType<WIFISecurityModeInfo,ID_NETWORKMANAGER_WIFI_SECURITY_MODE_ITERATOR>
IStringIterator	INetworkManager.h	/^            using IStringIterator           = RPC::IIteratorType<string,               RPC::ID_S/;"	t	struct:WPEFramework::Exchange::INetworkManager	typeref:typename:RPC::IIteratorType<string,RPC::ID_STRINGITERATOR>
Implementation	NetworkManagerGnomeProxy.cpp	/^            using Implementation = RPC::IteratorType<Exchange::INetworkManager::IInterfaceDetail/;"	t	function:WPEFramework::Plugin::NetworkManagerImplementation::GetAvailableInterfaces	typeref:typename:RPC::IteratorType<Exchange::INetworkManager::IInterfaceDetailsIterator>	file:
Implementation	NetworkManagerImplementation.cpp	/^            using Implementation = RPC::IteratorType<Exchange::INetworkManager::ISecurityModeIte/;"	t	function:WPEFramework::Plugin::NetworkManagerImplementation::GetSupportedSecurityModes	typeref:typename:RPC::IteratorType<Exchange::INetworkManager::ISecurityModeIterator>	file:
Implementation	NetworkManagerRDKProxy.cpp	/^                using Implementation = RPC::IteratorType<Exchange::INetworkManager::IInterfaceDe/;"	t	function:WPEFramework::Plugin::NetworkManagerImplementation::GetAvailableInterfaces	typeref:typename:RPC::IteratorType<Exchange::INetworkManager::IInterfaceDetailsIterator>	file:
Implementation	gdbus/NetworkManagerGdbusProxy.cpp	/^            using Implementation = RPC::IteratorType<Exchange::INetworkManager::IInterfaceDetail/;"	t	function:WPEFramework::Plugin::NetworkManagerImplementation::GetAvailableInterfaces	typeref:typename:RPC::IteratorType<Exchange::INetworkManager::IInterfaceDetailsIterator>	file:
Information	LegacyPlugin_NetworkAPIs.cpp	/^        string Network::Information() const$/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:string
Information	LegacyPlugin_WiFiManagerAPIs.cpp	/^        string WiFiManager::Information() const$/;"	f	class:WPEFramework::Plugin::WiFiManager	typeref:typename:string
Information	NetworkManager.cpp	/^        string NetworkManager::Information() const$/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:string
Init	NetworkManagerLogger.cpp	/^    void Init()$/;"	f	namespace:NetworkManagerLogger	typeref:typename:void
Initialize	LegacyPlugin_NetworkAPIs.cpp	/^        const string Network::Initialize(PluginHost::IShell*  service )$/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:const string
Initialize	LegacyPlugin_WiFiManagerAPIs.cpp	/^        const string WiFiManager::Initialize(PluginHost::IShell*  service )$/;"	f	class:WPEFramework::Plugin::WiFiManager	typeref:typename:const string
Initialize	NetworkManager.cpp	/^        const string NetworkManager::Initialize(PluginHost::IShell *service)$/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:const string
InterfaceDetails	INetworkManager.h	/^            struct EXTERNAL InterfaceDetails {$/;"	s	struct:WPEFramework::Exchange::INetworkManager
InterfaceState	INetworkManager.h	/^            enum InterfaceState : uint8_t$/;"	g	struct:WPEFramework::Exchange::INetworkManager	typeref:typename:uint8_t
InterfaceType	INetworkManager.h	/^            enum InterfaceType : uint8_t {$/;"	g	struct:WPEFramework::Exchange::INetworkManager	typeref:typename:uint8_t
InternetStatus	INetworkManager.h	/^            enum InternetStatus : uint8_t$/;"	g	struct:WPEFramework::Exchange::INetworkManager	typeref:typename:uint8_t
Introduction	docs/NetworkManagerPlugin.md	/^# Introduction$/;"	c
IsConnectedToInternet	NetworkManager.json	/^        "IsConnectedToInternet":{$/;"	o	object:methods
IsConnectedToInternet	NetworkManagerImplementation.cpp	/^         uint32_t NetworkManagerImplementation::IsConnectedToInternet(string &ipversion \/* @ino/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
IsConnectedToInternet	NetworkManagerJsonRpc.cpp	/^        uint32_t NetworkManager::IsConnectedToInternet(const JsonObject& parameters, JsonObject&/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
JSON_FILE	CMakeLists.txt	/^set(JSON_FILE "${CMAKE_CURRENT_SOURCE_DIR}\/NetworkManager.json")$/;"	v
Job	LegacyPlugin_NetworkAPIs.cpp	/^        Job(function<void()> work)$/;"	f	class:WPEFramework::Job	file:
Job	LegacyPlugin_NetworkAPIs.cpp	/^    class Job : public Core::IDispatch {$/;"	c	namespace:WPEFramework	file:
Job	LegacyPlugin_WiFiManagerAPIs.cpp	/^        Job(function<void()> work)$/;"	f	class:WPEFramework::Job	file:
Job	LegacyPlugin_WiFiManagerAPIs.cpp	/^    class Job : public Core::IDispatch {$/;"	c	namespace:WPEFramework	file:
Job	NetworkManagerGnomeWIFI.cpp	/^        Job(function<void()> work)$/;"	f	class:WPEFramework::Job	file:
Job	NetworkManagerGnomeWIFI.cpp	/^    class Job : public Core::IDispatch {$/;"	c	namespace:WPEFramework	file:
Job	NetworkManagerImplementation.h	/^                Job(function<void()> work)$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation::Job
Job	NetworkManagerImplementation.h	/^            class Job : public Core::IDispatch {$/;"	c	class:WPEFramework::Plugin::NetworkManagerImplementation
LNF_ENDPOINT_BACKOFF_TIME	NetworkManagerRDKProxy.cpp	/^    LNF_ENDPOINT_BACKOFF_TIME,             \/**< lnf in last requested backoff time *\/$/;"	e	enum:_WiFiLNFState_t	file:
LNF_ENDPOINT_CONNECTED	NetworkManagerRDKProxy.cpp	/^    LNF_ENDPOINT_CONNECTED,                \/**< lnf connected to end point and get the LFAT *\/$/;"	e	enum:_WiFiLNFState_t	file:
LNF_ERROR	NetworkManagerRDKProxy.cpp	/^    LNF_ERROR                              \/**< common lnf error replay from lnf library *\/$/;"	e	enum:_WiFiLNFState_t	file:
LNF_IN_PROGRESS	NetworkManagerRDKProxy.cpp	/^    LNF_IN_PROGRESS,                       \/**< Network manager has started LNF, and waiting fo/;"	e	enum:_WiFiLNFStatusCode_t	file:
LNF_RECEIVED_PRIVATE_SSID_INFO	NetworkManagerRDKProxy.cpp	/^    LNF_RECEIVED_PRIVATE_SSID_INFO,        \/**< lnf process Got private cridential*\/$/;"	e	enum:_WiFiLNFState_t	file:
LNF_SSID_CONNECTED	NetworkManagerRDKProxy.cpp	/^    LNF_SSID_CONNECTED,                    \/**< Connected to the LNF network *\/$/;"	e	enum:_WiFiLNFState_t	file:
LNF_SSID_CONNECT_FAILED	NetworkManagerRDKProxy.cpp	/^    LNF_SSID_CONNECT_FAILED,               \/**< failed connect to the LNF network *\/$/;"	e	enum:_WiFiLNFState_t	file:
LNF_SSID_DISCONNECTED	NetworkManagerRDKProxy.cpp	/^    LNF_SSID_DISCONNECTED,                 \/**< disconnected form lnf ssid *\/$/;"	e	enum:_WiFiLNFState_t	file:
LNF_SWITCHING_TO_PRIVATE	NetworkManagerRDKProxy.cpp	/^    LNF_SWITCHING_TO_PRIVATE,              \/**< lnf connected to private*\/$/;"	e	enum:_WiFiLNFState_t	file:
LNF_UNITIALIZED	NetworkManagerRDKProxy.cpp	/^    LNF_UNITIALIZED,                       \/**< Network manager hasn't started the LNF process /;"	e	enum:_WiFiLNFStatusCode_t	file:
LOG_ENTRY_FUNCTION	NetworkManagerLogger.h	/^#define LOG_ENTRY_FUNCTION(/;"	d
LOG_INPARAM	LegacyPlugin_NetworkAPIs.cpp	/^#define LOG_INPARAM(/;"	d	file:
LOG_INPARAM	LegacyPlugin_WiFiManagerAPIs.cpp	/^#define LOG_INPARAM(/;"	d	file:
LOG_INPARAM	NetworkManagerJsonRpc.cpp	/^#define LOG_INPARAM(/;"	d	file:
LOG_LEVEL_DEBUG	INetworkManager.h	/^                LOG_LEVEL_DEBUG$/;"	e	enum:WPEFramework::Exchange::INetworkManager::Logging
LOG_LEVEL_ERROR	INetworkManager.h	/^                LOG_LEVEL_ERROR,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::Logging
LOG_LEVEL_FATAL	INetworkManager.h	/^                LOG_LEVEL_FATAL,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::Logging
LOG_LEVEL_INFO	INetworkManager.h	/^                LOG_LEVEL_INFO,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::Logging
LOG_LEVEL_WARNING	INetworkManager.h	/^                LOG_LEVEL_WARNING,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::Logging
LOG_OUTPARAM	LegacyPlugin_NetworkAPIs.cpp	/^#define LOG_OUTPARAM(/;"	d	file:
LOG_OUTPARAM	LegacyPlugin_WiFiManagerAPIs.cpp	/^#define LOG_OUTPARAM(/;"	d	file:
LOG_OUTPARAM	NetworkManagerJsonRpc.cpp	/^#define LOG_OUTPARAM(/;"	d	file:
LogLevel	NetworkManagerLogger.h	/^enum LogLevel {FATAL_LEVEL = 0, ERROR_LEVEL, WARNING_LEVEL, INFO_LEVEL, DEBUG_LEVEL};$/;"	g	namespace:NetworkManagerLogger
Logging	INetworkManager.h	/^            enum Logging : uint8_t$/;"	g	struct:WPEFramework::Exchange::INetworkManager	typeref:typename:uint8_t
MAC	gdbus/NetworkManagerGdbusUtils.h	/^    std::string MAC;$/;"	m	struct:deviceInfo	typeref:typename:std::string
MAX_ENDPOINTS	NetworkManagerRDKProxy.cpp	/^#define MAX_ENDPOINTS /;"	d	file:
MAX_ENDPOINT_SIZE	NetworkManagerRDKProxy.cpp	/^#define MAX_ENDPOINT_SIZE /;"	d	file:
MAX_FILE_PATH_LEN	NetworkManagerRDKProxy.cpp	/^#define MAX_FILE_PATH_LEN /;"	d	file:
MAX_HOST_NAME_LEN	NetworkManagerRDKProxy.cpp	/^#define MAX_HOST_NAME_LEN /;"	d	file:
MAX_IP_ADDRESS_LEN	NetworkManagerRDKProxy.cpp	/^#define MAX_IP_ADDRESS_LEN /;"	d	file:
MAX_IP_FAMILY_SIZE	NetworkManagerRDKProxy.cpp	/^#define MAX_IP_FAMILY_SIZE /;"	d	file:
MAX_SSIDLIST_BUF	NetworkManagerRDKProxy.cpp	/^#define MAX_SSIDLIST_BUF /;"	d	file:
MAX_URI_LEN	NetworkManagerRDKProxy.cpp	/^#define MAX_URI_LEN /;"	d	file:
MAX_WPS_AP_COUNT	NetworkManagerGnomeWIFI.h	/^#define MAX_WPS_AP_COUNT /;"	d
MAX_WPS_WAIT_DURATION	NetworkManagerGnomeWIFI.h	/^#define MAX_WPS_WAIT_DURATION /;"	d
MODULE_NAME	CMakeLists.txt	/^set(MODULE_NAME ${NAMESPACE}${PLUGIN_NAME})$/;"	v
MODULE_NAME	Module.h	/^#define MODULE_NAME /;"	d
Methods	docs/NetworkManagerPlugin.md	/^# Methods$/;"	c
NETMGR_PING	NetworkManagerImplementation.h	/^                NETMGR_PING,$/;"	e	enum:WPEFramework::Plugin::NetworkManagerImplementation::NetworkEvents
NETMGR_TRACE	NetworkManagerImplementation.h	/^                NETMGR_TRACE,$/;"	e	enum:WPEFramework::Plugin::NetworkManagerImplementation::NetworkEvents
NETSRVMGR_INTERFACES_MAX	NetworkManagerRDKProxy.cpp	/^#define NETSRVMGR_INTERFACES_MAX /;"	d	file:
NETWORK_DNS_NOT_CONFIGURED	NetworkManagerRDKProxy.cpp	/^  NETWORK_DNS_NOT_CONFIGURED,$/;"	e	enum:_NetworkManager_GetIPSettings_ErrorCode_t	file:
NETWORK_INVALID_IPADDRESS	NetworkManagerRDKProxy.cpp	/^  NETWORK_INVALID_IPADDRESS,$/;"	e	enum:_NetworkManager_GetIPSettings_ErrorCode_t	file:
NETWORK_IPADDRESS_ACQUIRED	NetworkManagerRDKProxy.cpp	/^  NETWORK_IPADDRESS_ACQUIRED,$/;"	e	enum:_NetworkManager_GetIPSettings_ErrorCode_t	file:
NETWORK_IPADDRESS_NOTFOUND	NetworkManagerRDKProxy.cpp	/^  NETWORK_IPADDRESS_NOTFOUND,$/;"	e	enum:_NetworkManager_GetIPSettings_ErrorCode_t	file:
NETWORK_MANAGER_CALLSIGN	LegacyPlugin_NetworkAPIs.cpp	/^#define NETWORK_MANAGER_CALLSIGN /;"	d	file:
NETWORK_MANAGER_CALLSIGN	LegacyPlugin_WiFiManagerAPIs.cpp	/^#define NETWORK_MANAGER_CALLSIGN /;"	d	file:
NETWORK_NO_DEFAULT_ROUTE	NetworkManagerRDKProxy.cpp	/^  NETWORK_NO_DEFAULT_ROUTE,$/;"	e	enum:_NetworkManager_GetIPSettings_ErrorCode_t	file:
NETWORK_NO_ROUTE_INTERFACE	NetworkManagerRDKProxy.cpp	/^  NETWORK_NO_ROUTE_INTERFACE,$/;"	e	enum:_NetworkManager_GetIPSettings_ErrorCode_t	file:
NET_WIFI_SECURITY_NONE	LegacyPlugin_WiFiManagerAPIs.cpp	/^    NET_WIFI_SECURITY_NONE = 0,$/;"	e	enum:_SsidSecurity	file:
NET_WIFI_SECURITY_NONE	NetworkManagerRDKProxy.cpp	/^    NET_WIFI_SECURITY_NONE = 0,$/;"	e	enum:_SsidSecurity	file:
NET_WIFI_SECURITY_NOT_SUPPORTED	LegacyPlugin_WiFiManagerAPIs.cpp	/^    NET_WIFI_SECURITY_NOT_SUPPORTED = 99,$/;"	e	enum:_SsidSecurity	file:
NET_WIFI_SECURITY_NOT_SUPPORTED	NetworkManagerRDKProxy.cpp	/^    NET_WIFI_SECURITY_NOT_SUPPORTED = 99,$/;"	e	enum:_SsidSecurity	file:
NET_WIFI_SECURITY_WEP_128	LegacyPlugin_WiFiManagerAPIs.cpp	/^    NET_WIFI_SECURITY_WEP_128,$/;"	e	enum:_SsidSecurity	file:
NET_WIFI_SECURITY_WEP_128	NetworkManagerRDKProxy.cpp	/^    NET_WIFI_SECURITY_WEP_128,$/;"	e	enum:_SsidSecurity	file:
NET_WIFI_SECURITY_WEP_64	LegacyPlugin_WiFiManagerAPIs.cpp	/^    NET_WIFI_SECURITY_WEP_64,$/;"	e	enum:_SsidSecurity	file:
NET_WIFI_SECURITY_WEP_64	NetworkManagerRDKProxy.cpp	/^    NET_WIFI_SECURITY_WEP_64,$/;"	e	enum:_SsidSecurity	file:
NET_WIFI_SECURITY_WPA2_ENTERPRISE_AES	LegacyPlugin_WiFiManagerAPIs.cpp	/^    NET_WIFI_SECURITY_WPA2_ENTERPRISE_AES,$/;"	e	enum:_SsidSecurity	file:
NET_WIFI_SECURITY_WPA2_ENTERPRISE_AES	NetworkManagerRDKProxy.cpp	/^    NET_WIFI_SECURITY_WPA2_ENTERPRISE_AES,$/;"	e	enum:_SsidSecurity	file:
NET_WIFI_SECURITY_WPA2_ENTERPRISE_TKIP	LegacyPlugin_WiFiManagerAPIs.cpp	/^    NET_WIFI_SECURITY_WPA2_ENTERPRISE_TKIP,$/;"	e	enum:_SsidSecurity	file:
NET_WIFI_SECURITY_WPA2_ENTERPRISE_TKIP	NetworkManagerRDKProxy.cpp	/^    NET_WIFI_SECURITY_WPA2_ENTERPRISE_TKIP,$/;"	e	enum:_SsidSecurity	file:
NET_WIFI_SECURITY_WPA2_PSK_AES	LegacyPlugin_WiFiManagerAPIs.cpp	/^    NET_WIFI_SECURITY_WPA2_PSK_AES,$/;"	e	enum:_SsidSecurity	file:
NET_WIFI_SECURITY_WPA2_PSK_AES	NetworkManagerRDKProxy.cpp	/^    NET_WIFI_SECURITY_WPA2_PSK_AES,$/;"	e	enum:_SsidSecurity	file:
NET_WIFI_SECURITY_WPA2_PSK_TKIP	LegacyPlugin_WiFiManagerAPIs.cpp	/^    NET_WIFI_SECURITY_WPA2_PSK_TKIP,$/;"	e	enum:_SsidSecurity	file:
NET_WIFI_SECURITY_WPA2_PSK_TKIP	NetworkManagerRDKProxy.cpp	/^    NET_WIFI_SECURITY_WPA2_PSK_TKIP,$/;"	e	enum:_SsidSecurity	file:
NET_WIFI_SECURITY_WPA3_PSK_AES	LegacyPlugin_WiFiManagerAPIs.cpp	/^    NET_WIFI_SECURITY_WPA3_PSK_AES,$/;"	e	enum:_SsidSecurity	file:
NET_WIFI_SECURITY_WPA3_PSK_AES	NetworkManagerRDKProxy.cpp	/^    NET_WIFI_SECURITY_WPA3_PSK_AES,$/;"	e	enum:_SsidSecurity	file:
NET_WIFI_SECURITY_WPA3_SAE	LegacyPlugin_WiFiManagerAPIs.cpp	/^    NET_WIFI_SECURITY_WPA3_SAE,$/;"	e	enum:_SsidSecurity	file:
NET_WIFI_SECURITY_WPA3_SAE	NetworkManagerRDKProxy.cpp	/^    NET_WIFI_SECURITY_WPA3_SAE,$/;"	e	enum:_SsidSecurity	file:
NET_WIFI_SECURITY_WPA_ENTERPRISE_AES	LegacyPlugin_WiFiManagerAPIs.cpp	/^    NET_WIFI_SECURITY_WPA_ENTERPRISE_AES,$/;"	e	enum:_SsidSecurity	file:
NET_WIFI_SECURITY_WPA_ENTERPRISE_AES	NetworkManagerRDKProxy.cpp	/^    NET_WIFI_SECURITY_WPA_ENTERPRISE_AES,$/;"	e	enum:_SsidSecurity	file:
NET_WIFI_SECURITY_WPA_ENTERPRISE_TKIP	LegacyPlugin_WiFiManagerAPIs.cpp	/^    NET_WIFI_SECURITY_WPA_ENTERPRISE_TKIP,$/;"	e	enum:_SsidSecurity	file:
NET_WIFI_SECURITY_WPA_ENTERPRISE_TKIP	NetworkManagerRDKProxy.cpp	/^    NET_WIFI_SECURITY_WPA_ENTERPRISE_TKIP,$/;"	e	enum:_SsidSecurity	file:
NET_WIFI_SECURITY_WPA_PSK_AES	LegacyPlugin_WiFiManagerAPIs.cpp	/^    NET_WIFI_SECURITY_WPA_PSK_AES,$/;"	e	enum:_SsidSecurity	file:
NET_WIFI_SECURITY_WPA_PSK_AES	NetworkManagerRDKProxy.cpp	/^    NET_WIFI_SECURITY_WPA_PSK_AES,$/;"	e	enum:_SsidSecurity	file:
NET_WIFI_SECURITY_WPA_PSK_TKIP	LegacyPlugin_WiFiManagerAPIs.cpp	/^    NET_WIFI_SECURITY_WPA_PSK_TKIP,$/;"	e	enum:_SsidSecurity	file:
NET_WIFI_SECURITY_WPA_PSK_TKIP	NetworkManagerRDKProxy.cpp	/^    NET_WIFI_SECURITY_WPA_PSK_TKIP,$/;"	e	enum:_SsidSecurity	file:
NET_WIFI_SECURITY_WPA_WPA2_ENTERPRISE	LegacyPlugin_WiFiManagerAPIs.cpp	/^    NET_WIFI_SECURITY_WPA_WPA2_ENTERPRISE,$/;"	e	enum:_SsidSecurity	file:
NET_WIFI_SECURITY_WPA_WPA2_ENTERPRISE	NetworkManagerRDKProxy.cpp	/^    NET_WIFI_SECURITY_WPA_WPA2_ENTERPRISE,$/;"	e	enum:_SsidSecurity	file:
NET_WIFI_SECURITY_WPA_WPA2_PSK	LegacyPlugin_WiFiManagerAPIs.cpp	/^    NET_WIFI_SECURITY_WPA_WPA2_PSK,$/;"	e	enum:_SsidSecurity	file:
NET_WIFI_SECURITY_WPA_WPA2_PSK	NetworkManagerRDKProxy.cpp	/^    NET_WIFI_SECURITY_WPA_WPA2_PSK,$/;"	e	enum:_SsidSecurity	file:
NMCONNECTIVITY_CURL_GET_REQUEST	NetworkManagerConnectivity.h	/^#define NMCONNECTIVITY_CURL_GET_REQUEST /;"	d
NMCONNECTIVITY_CURL_HEAD_REQUEST	NetworkManagerConnectivity.h	/^#define NMCONNECTIVITY_CURL_HEAD_REQUEST /;"	d
NMCONNECTIVITY_CURL_REQUEST_TIMEOUT_MS	NetworkManagerConnectivity.h	/^#define NMCONNECTIVITY_CURL_REQUEST_TIMEOUT_MS /;"	d
NMCONNECTIVITY_MONITOR_CACHE_FILE	NetworkManagerConnectivity.h	/^#define NMCONNECTIVITY_MONITOR_CACHE_FILE /;"	d
NMCONNECTIVITY_MONITOR_MIN_INTERVAL	NetworkManagerConnectivity.h	/^#define NMCONNECTIVITY_MONITOR_MIN_INTERVAL /;"	d
NMCONNECTIVITY_MONITOR_RETRY_INTERVAL	NetworkManagerConnectivity.h	/^#define NMCONNECTIVITY_MONITOR_RETRY_INTERVAL /;"	d
NMEvents	NetworkManagerGnomeEvents.h	/^    } NMEvents;$/;"	t	namespace:WPEFramework::Plugin	typeref:struct:WPEFramework::Plugin::__anon87bbc0eb0108
NMEvents	gdbus/NetworkManagerGdbusEvent.h	/^    } NMEvents;$/;"	t	namespace:WPEFramework::Plugin	typeref:struct:WPEFramework::Plugin::__anoncc38525b0108
NMLOG_DEBUG	NetworkManagerLogger.h	/^#define NMLOG_DEBUG(/;"	d
NMLOG_ERROR	NetworkManagerLogger.h	/^#define NMLOG_ERROR(/;"	d
NMLOG_FATAL	NetworkManagerLogger.h	/^#define NMLOG_FATAL(/;"	d
NMLOG_INFO	NetworkManagerLogger.h	/^#define NMLOG_INFO(/;"	d
NMLOG_WARNING	NetworkManagerLogger.h	/^#define NMLOG_WARNING(/;"	d
NM_CONNECTIVITY_MONITOR_RETRY_COUNT	NetworkManagerConnectivity.h	/^#define NM_CONNECTIVITY_MONITOR_RETRY_COUNT /;"	d
NM_LOGGER_H	NetworkManagerLogger.h	/^#define NM_LOGGER_H$/;"	d
NONE	NetworkManager.json	/^                            "NONE": {$/;"	o	object:methods.GetSupportedsecurityModes.result.properties.security_modes.properties
NetSrvMgr_Interface_t	NetworkManagerRDKProxy.cpp	/^} NetSrvMgr_Interface_t;$/;"	t	typeref:struct:__anon7d34ee9e0108	file:
NetmaskToPrefix	NetworkManagerRDKProxy.cpp	/^        uint32_t NetmaskToPrefix (const char* netmask_str)$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:uint32_t
Network	LegacyPlugin_NetworkAPIs.cpp	/^        Network::Network()$/;"	f	class:WPEFramework::Plugin::Network
Network	LegacyPlugin_NetworkAPIs.h	/^        class Network : public PluginHost::IPlugin, public PluginHost::JSONRPC$/;"	c	namespace:WPEFramework::Plugin
NetworkEvents	NetworkManagerImplementation.h	/^            enum NetworkEvents$/;"	g	class:WPEFramework::Plugin::NetworkManagerImplementation
NetworkManager	CMakeLists.txt	/^project(NetworkManager)$/;"	p
NetworkManager	NetworkManager.cpp	/^        NetworkManager::NetworkManager()$/;"	f	class:WPEFramework::Plugin::NetworkManager
NetworkManager	NetworkManager.h	/^        class NetworkManager : public PluginHost::IPlugin, public PluginHost::JSONRPC, public Pl/;"	c	namespace:WPEFramework::Plugin
NetworkManager Plugin	README.md	/^# NetworkManager Plugin$/;"	c
NetworkManager Plugin	docs/NetworkManagerPlugin.md	/^# NetworkManager Plugin$/;"	c
NetworkManagerClient	gdbus/NetworkManagerGdbusClient.cpp	/^        NetworkManagerClient::NetworkManagerClient() {$/;"	f	class:WPEFramework::Plugin::NetworkManagerClient
NetworkManagerClient	gdbus/NetworkManagerGdbusClient.h	/^        class NetworkManagerClient$/;"	c	namespace:WPEFramework::Plugin
NetworkManagerEvents	gdbus/NetworkManagerGdbusEvent.cpp	/^    NetworkManagerEvents::NetworkManagerEvents()$/;"	f	class:WPEFramework::Plugin::NetworkManagerEvents
NetworkManagerEvents	gdbus/NetworkManagerGdbusEvent.h	/^    class NetworkManagerEvents$/;"	c	namespace:WPEFramework::Plugin
NetworkManagerImplementation	NetworkManagerImplementation.cpp	/^        NetworkManagerImplementation::NetworkManagerImplementation()$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation
NetworkManagerImplementation	NetworkManagerImplementation.h	/^        class NetworkManagerImplementation : public Exchange::INetworkManager$/;"	c	namespace:WPEFramework::Plugin
NetworkManagerInternalEventHandler	NetworkManagerGnomeProxy.cpp	/^        void NetworkManagerInternalEventHandler(const char *owner, int eventId, void *data, size/;"	f	namespace:WPEFramework::Plugin	typeref:typename:void
NetworkManagerInternalEventHandler	NetworkManagerRDKProxy.cpp	/^        void NetworkManagerInternalEventHandler(const char *owner, IARM_EventId_t eventId, void /;"	f	namespace:WPEFramework::Plugin	typeref:typename:void
NetworkManagerInternalEventHandler	gdbus/NetworkManagerGdbusProxy.cpp	/^        void NetworkManagerInternalEventHandler(const char *owner, int eventId, void *data, size/;"	f	namespace:WPEFramework::Plugin	typeref:typename:void
NetworkManagerLogger	NetworkManagerLogger.cpp	/^namespace NetworkManagerLogger {$/;"	n	file:
NetworkManagerLogger	NetworkManagerLogger.h	/^namespace NetworkManagerLogger {$/;"	n
NetworkManagerTimer	NetworkManagerTimer.h	/^                NetworkManagerTimer()$/;"	f	class:WPEFramework::Plugin::NetworkManagerTimer
NetworkManagerTimer	NetworkManagerTimer.h	/^        class NetworkManagerTimer {$/;"	c	namespace:WPEFramework::Plugin
NetworkManagerTimerJob	NetworkManagerTimer.h	/^                        NetworkManagerTimerJob(NetworkManagerTimer* tpt)$/;"	f	class:WPEFramework::Plugin::NetworkManagerTimer::NetworkManagerTimerJob
NetworkManagerTimerJob	NetworkManagerTimer.h	/^                        NetworkManagerTimerJob(const NetworkManagerTimerJob& copy)$/;"	f	class:WPEFramework::Plugin::NetworkManagerTimer::NetworkManagerTimerJob
NetworkManagerTimerJob	NetworkManagerTimer.h	/^                class NetworkManagerTimerJob {$/;"	c	class:WPEFramework::Plugin::NetworkManagerTimer
NetworkManager_GetIPSettings_ErrorCode_t	NetworkManagerRDKProxy.cpp	/^} NetworkManager_GetIPSettings_ErrorCode_t;$/;"	t	typeref:enum:_NetworkManager_GetIPSettings_ErrorCode_t	file:
NetworkType	NetworkManager.h	/^            network_type NetworkType() const override$/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:network_type
Notification	NetworkManager.h	/^                explicit Notification(NetworkManager *parent)$/;"	f	class:WPEFramework::Plugin::NetworkManager::Notification
Notification	NetworkManager.h	/^            class Notification : public RPC::IRemoteConnection::INotification,$/;"	c	class:WPEFramework::Plugin::NetworkManager
Notifications	docs/NetworkManagerPlugin.md	/^# Notifications$/;"	c
PASSPHRASE_BUFF	NetworkManagerRDKProxy.cpp	/^#define PASSPHRASE_BUFF /;"	d	file:
PLUGIN_BUILD_REFERENCE	CMakeLists.txt	/^set(PLUGIN_BUILD_REFERENCE ${PROJECT_VERSION} CACHE STRING "To Set the Hash for the plugin")$/;"	v
PLUGIN_LEGACY_DEPRECATED_NETWORK	CMakeLists.txt	/^set(PLUGIN_LEGACY_DEPRECATED_NETWORK ${NAMESPACE}Network)$/;"	v
PLUGIN_LEGACY_DEPRECATED_WIFI	CMakeLists.txt	/^set(PLUGIN_LEGACY_DEPRECATED_WIFI    ${NAMESPACE}WiFiManager)$/;"	v
PLUGIN_LEGACY_NW_STARTUPORDER	CMakeLists.txt	/^set(PLUGIN_LEGACY_NW_STARTUPORDER "35" CACHE STRING "To configure startup order of Legacy Networ/;"	v
PLUGIN_LEGACY_WIFI_STARTUPORDER	CMakeLists.txt	/^set(PLUGIN_LEGACY_WIFI_STARTUPORDER "35" CACHE STRING "To configure startup order of Legacy WiFi/;"	v
PLUGIN_NAME	CMakeLists.txt	/^set(PLUGIN_NAME NetworkManager)$/;"	v
PLUGIN_NETWORKMANAGER_LOGLEVEL	CMakeLists.txt	/^set(PLUGIN_NETWORKMANAGER_LOGLEVEL "5" CACHE STRING "To configure default loglevel NetworkManage/;"	v
PLUGIN_NETWORKMANAGER_STARTUPORDER	CMakeLists.txt	/^set(PLUGIN_NETWORKMANAGER_STARTUPORDER "25" CACHE STRING "To configure startup order of Unified /;"	v
PROJECT_VERSION	CMakeLists.txt	/^set(PROJECT_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})$/;"	v
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Methods""*AddToKnownSSIDs [<sup>method</sup>](#head.Methods)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Methods""*GetAvailableInterfaces [<sup>method</sup>](#head.Methods)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Methods""*GetCaptivePortalURI [<sup>method</sup>](#head.Methods)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Methods""*GetConnectedSSID [<sup>method</sup>](#head.Methods)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Methods""*GetConnectivityTestEndpoints [<sup>method</sup>](#head.Methods)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Methods""*GetIPSettings [<sup>method</sup>](#head.Methods)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Methods""*GetInterfaceState [<sup>method</sup>](#head.Methods)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Methods""*GetKnownSSIDs [<sup>method</sup>](#head.Methods)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Methods""*GetLogLevel [<sup>method</sup>](#head.Methods)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Methods""*GetPrimaryInterface [<sup>method</sup>](#head.Methods)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Methods""*GetPublicIP [<sup>method</sup>](#head.Methods)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Methods""*GetStunEndpoint [<sup>method</sup>](#head.Methods)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Methods""*GetSupportedsecurityModes [<sup>method</sup>](#head.Methods)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Methods""*GetWiFiSignalStrength [<sup>method</sup>](#head.Methods)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Methods""*GetWifiState [<sup>method</sup>](#head.Methods)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Methods""*IsConnectedToInternet [<sup>method</sup>](#head.Methods)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Methods""*Ping [<sup>method</sup>](#head.Methods)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Methods""*RemoveKnownSSID [<sup>method</sup>](#head.Methods)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Methods""*SetConnectivityTestEndpoints [<sup>method</sup>](#head.Methods)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Methods""*SetIPSettings [<sup>method</sup>](#head.Methods)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Methods""*SetInterfaceState [<sup>method</sup>](#head.Methods)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Methods""*SetLogLevel [<sup>method</sup>](#head.Methods)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Methods""*SetPrimaryInterface [<sup>method</sup>](#head.Methods)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Methods""*SetStunEndpoint [<sup>method</sup>](#head.Methods)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Methods""*StartWPS [<sup>method</sup>](#head.Methods)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Methods""*StartWiFiScan [<sup>method</sup>](#head.Methods)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Methods""*StopWPS [<sup>method</sup>](#head.Methods)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Methods""*StopWiFiScan [<sup>method</sup>](#head.Methods)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Methods""*Trace [<sup>method</sup>](#head.Methods)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Methods""*WiFiConnect [<sup>method</sup>](#head.Methods)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Methods""*WiFiDisconnect [<sup>method</sup>](#head.Methods)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Notifications""*onActiveInterfaceChange [<sup>event</sup>](#head.Notifications)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Notifications""*onAddressChange [<sup>event</sup>](#head.Notifications)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Notifications""*onAvailableSSIDs [<sup>event</sup>](#head.Notifications)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Notifications""*onInterfaceStateChange [<sup>event</sup>](#head.Notifications)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Notifications""*onInternetStatusChange [<sup>event</sup>](#head.Notifications)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Notifications""*onWiFiSignalStrengthChange [<sup>event</sup>](#head.Notifications)*
Parameters	docs/NetworkManagerPlugin.md	/^### Parameters$/;"	S	section:Notifications""*onWiFiStateChange [<sup>event</sup>](#head.Notifications)*
Ping	NetworkManager.json	/^        "Ping":{$/;"	o	object:methods
Ping	NetworkManagerImplementation.cpp	/^        uint32_t NetworkManagerImplementation::Ping (const string ipversion \/* @in *\/,  const /;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
Ping	NetworkManagerJsonRpc.cpp	/^        uint32_t NetworkManager::Ping(const JsonObject& parameters, JsonObject& response)$/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
Plugin	LegacyPlugin_NetworkAPIs.cpp	/^    namespace Plugin$/;"	n	namespace:WPEFramework	file:
Plugin	LegacyPlugin_NetworkAPIs.h	/^    namespace Plugin {$/;"	n	namespace:WPEFramework
Plugin	LegacyPlugin_WiFiManagerAPIs.cpp	/^    namespace Plugin$/;"	n	namespace:WPEFramework	file:
Plugin	LegacyPlugin_WiFiManagerAPIs.h	/^    namespace Plugin {$/;"	n	namespace:WPEFramework
Plugin	NetworkManager.cpp	/^    namespace Plugin$/;"	n	namespace:WPEFramework	file:
Plugin	NetworkManager.h	/^    namespace Plugin$/;"	n	namespace:WPEFramework
Plugin	NetworkManagerConnectivity.cpp	/^    namespace Plugin$/;"	n	namespace:WPEFramework	file:
Plugin	NetworkManagerConnectivity.h	/^    namespace Plugin$/;"	n	namespace:WPEFramework
Plugin	NetworkManagerGnomeEvents.cpp	/^    namespace Plugin$/;"	n	namespace:WPEFramework	file:
Plugin	NetworkManagerGnomeEvents.h	/^    namespace Plugin$/;"	n	namespace:WPEFramework
Plugin	NetworkManagerGnomeProxy.cpp	/^    namespace Plugin$/;"	n	namespace:WPEFramework	file:
Plugin	NetworkManagerGnomeUtils.cpp	/^    namespace Plugin$/;"	n	namespace:WPEFramework	file:
Plugin	NetworkManagerGnomeUtils.h	/^    namespace Plugin$/;"	n	namespace:WPEFramework
Plugin	NetworkManagerGnomeWIFI.cpp	/^    namespace Plugin$/;"	n	namespace:WPEFramework	file:
Plugin	NetworkManagerGnomeWIFI.h	/^    namespace Plugin$/;"	n	namespace:WPEFramework
Plugin	NetworkManagerImplementation.cpp	/^    namespace Plugin$/;"	n	namespace:WPEFramework	file:
Plugin	NetworkManagerImplementation.h	/^    namespace Plugin$/;"	n	namespace:WPEFramework
Plugin	NetworkManagerJsonRpc.cpp	/^    namespace Plugin$/;"	n	namespace:WPEFramework	file:
Plugin	NetworkManagerRDKProxy.cpp	/^    namespace Plugin$/;"	n	namespace:WPEFramework	file:
Plugin	NetworkManagerTimer.h	/^    namespace Plugin {$/;"	n	namespace:WPEFramework
Plugin	Tests/raspberrypi/NetworkManagerGdbusTest.cpp	/^   namespace Plugin$/;"	n	namespace:WPEFramework	file:
Plugin	Tests/unit_test/test_WiFiSignalStrengthMonitor.cpp	/^   namespace Plugin$/;"	n	namespace:WPEFramework	file:
Plugin	WiFiSignalStrengthMonitor.cpp	/^    namespace Plugin$/;"	n	namespace:WPEFramework	file:
Plugin	WiFiSignalStrengthMonitor.h	/^    namespace Plugin$/;"	n	namespace:WPEFramework
Plugin	gdbus/NetworkManagerGdbusClient.cpp	/^    namespace Plugin$/;"	n	namespace:WPEFramework	file:
Plugin	gdbus/NetworkManagerGdbusClient.h	/^    namespace Plugin$/;"	n	namespace:WPEFramework
Plugin	gdbus/NetworkManagerGdbusEvent.cpp	/^    namespace Plugin$/;"	n	namespace:WPEFramework	file:
Plugin	gdbus/NetworkManagerGdbusEvent.h	/^    namespace Plugin$/;"	n	namespace:WPEFramework
Plugin	gdbus/NetworkManagerGdbusMgr.cpp	/^    namespace Plugin$/;"	n	namespace:WPEFramework	file:
Plugin	gdbus/NetworkManagerGdbusMgr.h	/^    namespace Plugin$/;"	n	namespace:WPEFramework
Plugin	gdbus/NetworkManagerGdbusProxy.cpp	/^    namespace Plugin$/;"	n	namespace:WPEFramework	file:
Plugin	gdbus/NetworkManagerGdbusUtils.cpp	/^    namespace Plugin$/;"	n	namespace:WPEFramework	file:
Plugin	gdbus/NetworkManagerGdbusUtils.h	/^    namespace Plugin$/;"	n	namespace:WPEFramework
ProxyStubGenerator_DIR	CMakeLists.txt	/^set(ProxyStubGenerator_DIR ${CMAKE_SYSROOT}${CMAKE_INSTALL_PREFIX}\/tools\/cmake ${ProxyStubGene/;"	v
PublishToThunderAboutInternet	NetworkManagerJsonRpc.cpp	/^        void NetworkManager::PublishToThunderAboutInternet()$/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:void
Questions?	README.md	/^## Questions? ##$/;"	s	chapter:API Documentation
RDKLOGGER_INCLUDE_DIRS	cmake/Findrdklogger.cmake	/^set(RDKLOGGER_INCLUDE_DIRS ${RDKLOGGER_INCLUDE_DIRS} )$/;"	v
RDKLOGGER_INCLUDE_DIRS	cmake/Findrdklogger.cmake	/^set(RDKLOGGER_INCLUDE_DIRS ${RDKLOGGER_INCLUDE_DIRS} CACHE PATH "Path to rdkLogger include")$/;"	v
RDKLOGGER_LIBRARIES	cmake/Findrdklogger.cmake	/^set(RDKLOGGER_LIBRARIES ${RDKLOGGER_LIBRARIES} CACHE PATH "Path to rdkLogger library")$/;"	v
ROUTE_METRIC_PRIORITY_HIGH	gdbus/NetworkManagerGdbusClient.h	/^#define ROUTE_METRIC_PRIORITY_HIGH /;"	d
ROUTE_METRIC_PRIORITY_LOW	gdbus/NetworkManagerGdbusClient.h	/^#define ROUTE_METRIC_PRIORITY_LOW /;"	d
RPI_TEST	Tests/raspberrypi/NetworkManagerGdbusTest.cmake	/^set(RPI_TEST "NetworkManagerGdbusTest")$/;"	v
References	docs/NetworkManagerPlugin.md	/^## References$/;"	s	chapter:Introduction
Register	NetworkManagerImplementation.cpp	/^        uint32_t NetworkManagerImplementation::Register(INetworkManager::INotification *notifica/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
RegisterAllMethods	NetworkManagerJsonRpc.cpp	/^        void NetworkManager::RegisterAllMethods()$/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:void
Release	README.md	/^## Release ##$/;"	s	chapter:API Documentation
RemoveKnownSSID	NetworkManager.json	/^        "RemoveKnownSSID":{$/;"	o	object:methods
RemoveKnownSSID	NetworkManagerGnomeProxy.cpp	/^        uint32_t NetworkManagerImplementation::RemoveKnownSSID(const string& ssid \/* @in *\/)$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
RemoveKnownSSID	NetworkManagerJsonRpc.cpp	/^        uint32_t NetworkManager::RemoveKnownSSID(const JsonObject& parameters, JsonObject& respo/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
RemoveKnownSSID	NetworkManagerRDKProxy.cpp	/^        uint32_t NetworkManagerImplementation::RemoveKnownSSID(const string& ssid \/* @in *\/)$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
RemoveKnownSSID	gdbus/NetworkManagerGdbusProxy.cpp	/^        uint32_t NetworkManagerImplementation::RemoveKnownSSID(const string& ssid \/* @in *\/)$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
ReportActiveInterfaceChange	NetworkManagerImplementation.cpp	/^        void NetworkManagerImplementation::ReportActiveInterfaceChange(const string prevActiveIn/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:void
ReportActiveInterfaceChange	Tests/raspberrypi/NetworkManagerGdbusTest.cpp	/^        void NetworkManagerImplementation::ReportActiveInterfaceChange(const string prevActiveIn/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:void
ReportAvailableSSIDs	NetworkManagerImplementation.cpp	/^        void NetworkManagerImplementation::ReportAvailableSSIDs(const JsonArray &arrayofWiFiScan/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:void
ReportAvailableSSIDs	Tests/raspberrypi/NetworkManagerGdbusTest.cpp	/^        void NetworkManagerImplementation::ReportAvailableSSIDs(const JsonArray &arrayofWiFiScan/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:void
ReportIPAddressChange	NetworkManagerImplementation.cpp	/^        void NetworkManagerImplementation::ReportIPAddressChange(const string interface, const s/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:void
ReportIPAddressChange	Tests/raspberrypi/NetworkManagerGdbusTest.cpp	/^        void NetworkManagerImplementation::ReportIPAddressChange(const string interface, const s/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:void
ReportInterfaceStateChange	NetworkManagerImplementation.cpp	/^        void NetworkManagerImplementation::ReportInterfaceStateChange(const Exchange::INetworkMa/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:void
ReportInterfaceStateChange	Tests/raspberrypi/NetworkManagerGdbusTest.cpp	/^        void NetworkManagerImplementation::ReportInterfaceStateChange(const Exchange::INetworkMa/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:void
ReportInternetStatusChange	NetworkManagerImplementation.cpp	/^        void NetworkManagerImplementation::ReportInternetStatusChange(const Exchange::INetworkMa/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:void
ReportInternetStatusChange	Tests/raspberrypi/NetworkManagerGdbusTest.cpp	/^        void NetworkManagerImplementation::ReportInternetStatusChange(const Exchange::INetworkMa/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:void
ReportInternetStatusChange	Tests/unit_test/test_WiFiSignalStrengthMonitor.cpp	/^        void NetworkManagerImplementation::ReportInternetStatusChange(const InternetStatus prevS/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:void
ReportWiFiSignalStrengthChange	NetworkManagerImplementation.cpp	/^        void NetworkManagerImplementation::ReportWiFiSignalStrengthChange(const string ssid, con/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:void
ReportWiFiSignalStrengthChange	Tests/raspberrypi/NetworkManagerGdbusTest.cpp	/^        void NetworkManagerImplementation::ReportWiFiSignalStrengthChange(const string ssid, con/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:void
ReportWiFiSignalStrengthChange	Tests/unit_test/test_WiFiSignalStrengthMonitor.cpp	/^        void NetworkManagerImplementation::ReportWiFiSignalStrengthChange(const string ssid, con/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:void
ReportWiFiStateChange	NetworkManagerImplementation.cpp	/^        void NetworkManagerImplementation::ReportWiFiStateChange(const Exchange::INetworkManager/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:void
ReportWiFiStateChange	Tests/raspberrypi/NetworkManagerGdbusTest.cpp	/^        void NetworkManagerImplementation::ReportWiFiStateChange(const Exchange::INetworkManager/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:void
ReportonActiveInterfaceChange	LegacyPlugin_NetworkAPIs.cpp	/^        void Network::ReportonActiveInterfaceChange(const JsonObject& parameters)$/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:void
ReportonIPAddressChange	LegacyPlugin_NetworkAPIs.cpp	/^        void Network::ReportonIPAddressChange(const JsonObject& parameters)$/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:void
ReportonInterfaceStateChange	LegacyPlugin_NetworkAPIs.cpp	/^        void Network::ReportonInterfaceStateChange(const JsonObject& parameters)$/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:void
ReportonInternetStatusChange	LegacyPlugin_NetworkAPIs.cpp	/^        void Network::ReportonInternetStatusChange(const JsonObject& parameters)$/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:void
Request	docs/NetworkManagerPlugin.md	/^#### Request$/;"	t	subsection:Methods""*AddToKnownSSIDs [<sup>method</sup>](#head.Methods)*""Example
Request	docs/NetworkManagerPlugin.md	/^#### Request$/;"	t	subsection:Methods""*GetAvailableInterfaces [<sup>method</sup>](#head.Methods)*""Example
Request	docs/NetworkManagerPlugin.md	/^#### Request$/;"	t	subsection:Methods""*GetCaptivePortalURI [<sup>method</sup>](#head.Methods)*""Example
Request	docs/NetworkManagerPlugin.md	/^#### Request$/;"	t	subsection:Methods""*GetConnectedSSID [<sup>method</sup>](#head.Methods)*""Example
Request	docs/NetworkManagerPlugin.md	/^#### Request$/;"	t	subsection:Methods""*GetConnectivityTestEndpoints [<sup>method</sup>](#head.Methods)*""Example
Request	docs/NetworkManagerPlugin.md	/^#### Request$/;"	t	subsection:Methods""*GetIPSettings [<sup>method</sup>](#head.Methods)*""Example
Request	docs/NetworkManagerPlugin.md	/^#### Request$/;"	t	subsection:Methods""*GetInterfaceState [<sup>method</sup>](#head.Methods)*""Example
Request	docs/NetworkManagerPlugin.md	/^#### Request$/;"	t	subsection:Methods""*GetKnownSSIDs [<sup>method</sup>](#head.Methods)*""Example
Request	docs/NetworkManagerPlugin.md	/^#### Request$/;"	t	subsection:Methods""*GetLogLevel [<sup>method</sup>](#head.Methods)*""Example
Request	docs/NetworkManagerPlugin.md	/^#### Request$/;"	t	subsection:Methods""*GetPrimaryInterface [<sup>method</sup>](#head.Methods)*""Example
Request	docs/NetworkManagerPlugin.md	/^#### Request$/;"	t	subsection:Methods""*GetPublicIP [<sup>method</sup>](#head.Methods)*""Example
Request	docs/NetworkManagerPlugin.md	/^#### Request$/;"	t	subsection:Methods""*GetStunEndpoint [<sup>method</sup>](#head.Methods)*""Example
Request	docs/NetworkManagerPlugin.md	/^#### Request$/;"	t	subsection:Methods""*GetSupportedsecurityModes [<sup>method</sup>](#head.Methods)*""Example
Request	docs/NetworkManagerPlugin.md	/^#### Request$/;"	t	subsection:Methods""*GetWiFiSignalStrength [<sup>method</sup>](#head.Methods)*""Example
Request	docs/NetworkManagerPlugin.md	/^#### Request$/;"	t	subsection:Methods""*GetWifiState [<sup>method</sup>](#head.Methods)*""Example
Request	docs/NetworkManagerPlugin.md	/^#### Request$/;"	t	subsection:Methods""*IsConnectedToInternet [<sup>method</sup>](#head.Methods)*""Example
Request	docs/NetworkManagerPlugin.md	/^#### Request$/;"	t	subsection:Methods""*Ping [<sup>method</sup>](#head.Methods)*""Example
Request	docs/NetworkManagerPlugin.md	/^#### Request$/;"	t	subsection:Methods""*RemoveKnownSSID [<sup>method</sup>](#head.Methods)*""Example
Request	docs/NetworkManagerPlugin.md	/^#### Request$/;"	t	subsection:Methods""*SetConnectivityTestEndpoints [<sup>method</sup>](#head.Methods)*""Example
Request	docs/NetworkManagerPlugin.md	/^#### Request$/;"	t	subsection:Methods""*SetIPSettings [<sup>method</sup>](#head.Methods)*""Example
Request	docs/NetworkManagerPlugin.md	/^#### Request$/;"	t	subsection:Methods""*SetInterfaceState [<sup>method</sup>](#head.Methods)*""Example
Request	docs/NetworkManagerPlugin.md	/^#### Request$/;"	t	subsection:Methods""*SetLogLevel [<sup>method</sup>](#head.Methods)*""Example
Request	docs/NetworkManagerPlugin.md	/^#### Request$/;"	t	subsection:Methods""*SetPrimaryInterface [<sup>method</sup>](#head.Methods)*""Example
Request	docs/NetworkManagerPlugin.md	/^#### Request$/;"	t	subsection:Methods""*SetStunEndpoint [<sup>method</sup>](#head.Methods)*""Example
Request	docs/NetworkManagerPlugin.md	/^#### Request$/;"	t	subsection:Methods""*StartWPS [<sup>method</sup>](#head.Methods)*""Example
Request	docs/NetworkManagerPlugin.md	/^#### Request$/;"	t	subsection:Methods""*StartWiFiScan [<sup>method</sup>](#head.Methods)*""Example
Request	docs/NetworkManagerPlugin.md	/^#### Request$/;"	t	subsection:Methods""*StopWPS [<sup>method</sup>](#head.Methods)*""Example
Request	docs/NetworkManagerPlugin.md	/^#### Request$/;"	t	subsection:Methods""*StopWiFiScan [<sup>method</sup>](#head.Methods)*""Example
Request	docs/NetworkManagerPlugin.md	/^#### Request$/;"	t	subsection:Methods""*Trace [<sup>method</sup>](#head.Methods)*""Example
Request	docs/NetworkManagerPlugin.md	/^#### Request$/;"	t	subsection:Methods""*WiFiConnect [<sup>method</sup>](#head.Methods)*""Example
Request	docs/NetworkManagerPlugin.md	/^#### Request$/;"	t	subsection:Methods""*WiFiDisconnect [<sup>method</sup>](#head.Methods)*""Example
Response	docs/NetworkManagerPlugin.md	/^#### Response$/;"	t	subsection:Methods""*AddToKnownSSIDs [<sup>method</sup>](#head.Methods)*""Example
Response	docs/NetworkManagerPlugin.md	/^#### Response$/;"	t	subsection:Methods""*GetAvailableInterfaces [<sup>method</sup>](#head.Methods)*""Example
Response	docs/NetworkManagerPlugin.md	/^#### Response$/;"	t	subsection:Methods""*GetCaptivePortalURI [<sup>method</sup>](#head.Methods)*""Example
Response	docs/NetworkManagerPlugin.md	/^#### Response$/;"	t	subsection:Methods""*GetConnectedSSID [<sup>method</sup>](#head.Methods)*""Example
Response	docs/NetworkManagerPlugin.md	/^#### Response$/;"	t	subsection:Methods""*GetConnectivityTestEndpoints [<sup>method</sup>](#head.Methods)*""Example
Response	docs/NetworkManagerPlugin.md	/^#### Response$/;"	t	subsection:Methods""*GetIPSettings [<sup>method</sup>](#head.Methods)*""Example
Response	docs/NetworkManagerPlugin.md	/^#### Response$/;"	t	subsection:Methods""*GetInterfaceState [<sup>method</sup>](#head.Methods)*""Example
Response	docs/NetworkManagerPlugin.md	/^#### Response$/;"	t	subsection:Methods""*GetKnownSSIDs [<sup>method</sup>](#head.Methods)*""Example
Response	docs/NetworkManagerPlugin.md	/^#### Response$/;"	t	subsection:Methods""*GetLogLevel [<sup>method</sup>](#head.Methods)*""Example
Response	docs/NetworkManagerPlugin.md	/^#### Response$/;"	t	subsection:Methods""*GetPrimaryInterface [<sup>method</sup>](#head.Methods)*""Example
Response	docs/NetworkManagerPlugin.md	/^#### Response$/;"	t	subsection:Methods""*GetPublicIP [<sup>method</sup>](#head.Methods)*""Example
Response	docs/NetworkManagerPlugin.md	/^#### Response$/;"	t	subsection:Methods""*GetStunEndpoint [<sup>method</sup>](#head.Methods)*""Example
Response	docs/NetworkManagerPlugin.md	/^#### Response$/;"	t	subsection:Methods""*GetSupportedsecurityModes [<sup>method</sup>](#head.Methods)*""Example
Response	docs/NetworkManagerPlugin.md	/^#### Response$/;"	t	subsection:Methods""*GetWiFiSignalStrength [<sup>method</sup>](#head.Methods)*""Example
Response	docs/NetworkManagerPlugin.md	/^#### Response$/;"	t	subsection:Methods""*GetWifiState [<sup>method</sup>](#head.Methods)*""Example
Response	docs/NetworkManagerPlugin.md	/^#### Response$/;"	t	subsection:Methods""*IsConnectedToInternet [<sup>method</sup>](#head.Methods)*""Example
Response	docs/NetworkManagerPlugin.md	/^#### Response$/;"	t	subsection:Methods""*Ping [<sup>method</sup>](#head.Methods)*""Example
Response	docs/NetworkManagerPlugin.md	/^#### Response$/;"	t	subsection:Methods""*RemoveKnownSSID [<sup>method</sup>](#head.Methods)*""Example
Response	docs/NetworkManagerPlugin.md	/^#### Response$/;"	t	subsection:Methods""*SetConnectivityTestEndpoints [<sup>method</sup>](#head.Methods)*""Example
Response	docs/NetworkManagerPlugin.md	/^#### Response$/;"	t	subsection:Methods""*SetIPSettings [<sup>method</sup>](#head.Methods)*""Example
Response	docs/NetworkManagerPlugin.md	/^#### Response$/;"	t	subsection:Methods""*SetInterfaceState [<sup>method</sup>](#head.Methods)*""Example
Response	docs/NetworkManagerPlugin.md	/^#### Response$/;"	t	subsection:Methods""*SetLogLevel [<sup>method</sup>](#head.Methods)*""Example
Response	docs/NetworkManagerPlugin.md	/^#### Response$/;"	t	subsection:Methods""*SetPrimaryInterface [<sup>method</sup>](#head.Methods)*""Example
Response	docs/NetworkManagerPlugin.md	/^#### Response$/;"	t	subsection:Methods""*SetStunEndpoint [<sup>method</sup>](#head.Methods)*""Example
Response	docs/NetworkManagerPlugin.md	/^#### Response$/;"	t	subsection:Methods""*StartWPS [<sup>method</sup>](#head.Methods)*""Example
Response	docs/NetworkManagerPlugin.md	/^#### Response$/;"	t	subsection:Methods""*StartWiFiScan [<sup>method</sup>](#head.Methods)*""Example
Response	docs/NetworkManagerPlugin.md	/^#### Response$/;"	t	subsection:Methods""*StopWPS [<sup>method</sup>](#head.Methods)*""Example
Response	docs/NetworkManagerPlugin.md	/^#### Response$/;"	t	subsection:Methods""*StopWiFiScan [<sup>method</sup>](#head.Methods)*""Example
Response	docs/NetworkManagerPlugin.md	/^#### Response$/;"	t	subsection:Methods""*Trace [<sup>method</sup>](#head.Methods)*""Example
Response	docs/NetworkManagerPlugin.md	/^#### Response$/;"	t	subsection:Methods""*WiFiConnect [<sup>method</sup>](#head.Methods)*""Example
Response	docs/NetworkManagerPlugin.md	/^#### Response$/;"	t	subsection:Methods""*WiFiDisconnect [<sup>method</sup>](#head.Methods)*""Example
Result	docs/NetworkManagerPlugin.md	/^### Result$/;"	S	section:Methods""*AddToKnownSSIDs [<sup>method</sup>](#head.Methods)*
Result	docs/NetworkManagerPlugin.md	/^### Result$/;"	S	section:Methods""*GetAvailableInterfaces [<sup>method</sup>](#head.Methods)*
Result	docs/NetworkManagerPlugin.md	/^### Result$/;"	S	section:Methods""*GetCaptivePortalURI [<sup>method</sup>](#head.Methods)*
Result	docs/NetworkManagerPlugin.md	/^### Result$/;"	S	section:Methods""*GetConnectedSSID [<sup>method</sup>](#head.Methods)*
Result	docs/NetworkManagerPlugin.md	/^### Result$/;"	S	section:Methods""*GetConnectivityTestEndpoints [<sup>method</sup>](#head.Methods)*
Result	docs/NetworkManagerPlugin.md	/^### Result$/;"	S	section:Methods""*GetIPSettings [<sup>method</sup>](#head.Methods)*
Result	docs/NetworkManagerPlugin.md	/^### Result$/;"	S	section:Methods""*GetInterfaceState [<sup>method</sup>](#head.Methods)*
Result	docs/NetworkManagerPlugin.md	/^### Result$/;"	S	section:Methods""*GetKnownSSIDs [<sup>method</sup>](#head.Methods)*
Result	docs/NetworkManagerPlugin.md	/^### Result$/;"	S	section:Methods""*GetLogLevel [<sup>method</sup>](#head.Methods)*
Result	docs/NetworkManagerPlugin.md	/^### Result$/;"	S	section:Methods""*GetPrimaryInterface [<sup>method</sup>](#head.Methods)*
Result	docs/NetworkManagerPlugin.md	/^### Result$/;"	S	section:Methods""*GetPublicIP [<sup>method</sup>](#head.Methods)*
Result	docs/NetworkManagerPlugin.md	/^### Result$/;"	S	section:Methods""*GetStunEndpoint [<sup>method</sup>](#head.Methods)*
Result	docs/NetworkManagerPlugin.md	/^### Result$/;"	S	section:Methods""*GetSupportedsecurityModes [<sup>method</sup>](#head.Methods)*
Result	docs/NetworkManagerPlugin.md	/^### Result$/;"	S	section:Methods""*GetWiFiSignalStrength [<sup>method</sup>](#head.Methods)*
Result	docs/NetworkManagerPlugin.md	/^### Result$/;"	S	section:Methods""*GetWifiState [<sup>method</sup>](#head.Methods)*
Result	docs/NetworkManagerPlugin.md	/^### Result$/;"	S	section:Methods""*IsConnectedToInternet [<sup>method</sup>](#head.Methods)*
Result	docs/NetworkManagerPlugin.md	/^### Result$/;"	S	section:Methods""*Ping [<sup>method</sup>](#head.Methods)*
Result	docs/NetworkManagerPlugin.md	/^### Result$/;"	S	section:Methods""*RemoveKnownSSID [<sup>method</sup>](#head.Methods)*
Result	docs/NetworkManagerPlugin.md	/^### Result$/;"	S	section:Methods""*SetConnectivityTestEndpoints [<sup>method</sup>](#head.Methods)*
Result	docs/NetworkManagerPlugin.md	/^### Result$/;"	S	section:Methods""*SetIPSettings [<sup>method</sup>](#head.Methods)*
Result	docs/NetworkManagerPlugin.md	/^### Result$/;"	S	section:Methods""*SetInterfaceState [<sup>method</sup>](#head.Methods)*
Result	docs/NetworkManagerPlugin.md	/^### Result$/;"	S	section:Methods""*SetLogLevel [<sup>method</sup>](#head.Methods)*
Result	docs/NetworkManagerPlugin.md	/^### Result$/;"	S	section:Methods""*SetPrimaryInterface [<sup>method</sup>](#head.Methods)*
Result	docs/NetworkManagerPlugin.md	/^### Result$/;"	S	section:Methods""*SetStunEndpoint [<sup>method</sup>](#head.Methods)*
Result	docs/NetworkManagerPlugin.md	/^### Result$/;"	S	section:Methods""*StartWPS [<sup>method</sup>](#head.Methods)*
Result	docs/NetworkManagerPlugin.md	/^### Result$/;"	S	section:Methods""*StartWiFiScan [<sup>method</sup>](#head.Methods)*
Result	docs/NetworkManagerPlugin.md	/^### Result$/;"	S	section:Methods""*StopWPS [<sup>method</sup>](#head.Methods)*
Result	docs/NetworkManagerPlugin.md	/^### Result$/;"	S	section:Methods""*StopWiFiScan [<sup>method</sup>](#head.Methods)*
Result	docs/NetworkManagerPlugin.md	/^### Result$/;"	S	section:Methods""*Trace [<sup>method</sup>](#head.Methods)*
Result	docs/NetworkManagerPlugin.md	/^### Result$/;"	S	section:Methods""*WiFiConnect [<sup>method</sup>](#head.Methods)*
Result	docs/NetworkManagerPlugin.md	/^### Result$/;"	S	section:Methods""*WiFiDisconnect [<sup>method</sup>](#head.Methods)*
SAE	NetworkManager.json	/^                            "SAE": {$/;"	o	object:methods.GetSupportedsecurityModes.result.properties.security_modes.properties
SSID_SIZE	NetworkManagerRDKProxy.cpp	/^#define SSID_SIZE /;"	d	file:
STUN_CLIENT_H	NetworkManagerStunClient.h	/^#define STUN_CLIENT_H$/;"	d
STUN_DEFAULT_MAX_ATTEMPTS	NetworkManagerStunClient.cpp	/^#define STUN_DEFAULT_MAX_ATTEMPTS /;"	d	file:
STUN_DEFAULT_WAIT_INTERVAL	NetworkManagerStunClient.cpp	/^#define STUN_DEFAULT_WAIT_INTERVAL /;"	d	file:
SUBSCRIPTION_TIMEOUT_IN_MILLISECONDS	LegacyPlugin_NetworkAPIs.cpp	/^#define SUBSCRIPTION_TIMEOUT_IN_MILLISECONDS /;"	d	file:
SUBSCRIPTION_TIMEOUT_IN_MILLISECONDS	LegacyPlugin_WiFiManagerAPIs.cpp	/^#define SUBSCRIPTION_TIMEOUT_IN_MILLISECONDS /;"	d	file:
Scope	docs/NetworkManagerPlugin.md	/^## Scope$/;"	s	chapter:Introduction
SetConnectivityTestEndpoints	NetworkManager.json	/^        "SetConnectivityTestEndpoints":{$/;"	o	object:methods
SetConnectivityTestEndpoints	NetworkManagerImplementation.cpp	/^        uint32_t NetworkManagerImplementation::SetConnectivityTestEndpoints(IStringIterator* con/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
SetConnectivityTestEndpoints	NetworkManagerJsonRpc.cpp	/^        uint32_t NetworkManager::SetConnectivityTestEndpoints(const JsonObject& parameters, Json/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
SetIPSettings	NetworkManager.json	/^        "SetIPSettings":{$/;"	o	object:methods
SetIPSettings	NetworkManagerGnomeProxy.cpp	/^        uint32_t NetworkManagerImplementation::SetIPSettings(const string& interface \/* @in *\//;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
SetIPSettings	NetworkManagerJsonRpc.cpp	/^        uint32_t NetworkManager::SetIPSettings(const JsonObject& parameters, JsonObject& respons/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
SetIPSettings	NetworkManagerRDKProxy.cpp	/^        uint32_t NetworkManagerImplementation::SetIPSettings(const string& interface \/* @in *\//;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
SetIPSettings	gdbus/NetworkManagerGdbusProxy.cpp	/^        uint32_t NetworkManagerImplementation::SetIPSettings(const string& interface \/* @in *\//;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
SetInterfaceState	NetworkManager.json	/^        "SetInterfaceState":{$/;"	o	object:methods
SetInterfaceState	NetworkManagerGnomeProxy.cpp	/^        uint32_t NetworkManagerImplementation::SetInterfaceState(const string& interface\/* @in /;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
SetInterfaceState	NetworkManagerJsonRpc.cpp	/^        uint32_t NetworkManager::SetInterfaceState(const JsonObject& parameters, JsonObject& res/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
SetInterfaceState	NetworkManagerRDKProxy.cpp	/^        uint32_t NetworkManagerImplementation::SetInterfaceState(const string& interface\/* @in /;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
SetInterfaceState	gdbus/NetworkManagerGdbusProxy.cpp	/^        uint32_t NetworkManagerImplementation::SetInterfaceState(const string& interface\/* @in /;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
SetLevel	NetworkManagerLogger.cpp	/^    void SetLevel(LogLevel level)$/;"	f	namespace:NetworkManagerLogger	typeref:typename:void
SetLogLevel	NetworkManager.json	/^        "SetLogLevel":{$/;"	o	object:methods
SetLogLevel	NetworkManagerImplementation.cpp	/^        uint32_t NetworkManagerImplementation::SetLogLevel(const Logging& level \/* @in *\/)$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
SetLogLevel	NetworkManagerJsonRpc.cpp	/^        uint32_t NetworkManager::SetLogLevel (const JsonObject& parameters, JsonObject& response/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
SetPrimaryInterface	NetworkManager.json	/^        "SetPrimaryInterface":{$/;"	o	object:methods
SetPrimaryInterface	NetworkManagerGnomeProxy.cpp	/^        uint32_t NetworkManagerImplementation::SetPrimaryInterface (const string& interface\/* @/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
SetPrimaryInterface	NetworkManagerJsonRpc.cpp	/^        uint32_t NetworkManager::SetPrimaryInterface (const JsonObject& parameters, JsonObject& /;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
SetPrimaryInterface	NetworkManagerRDKProxy.cpp	/^        uint32_t NetworkManagerImplementation::SetPrimaryInterface (const string& interface\/* @/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
SetPrimaryInterface	gdbus/NetworkManagerGdbusProxy.cpp	/^        uint32_t NetworkManagerImplementation::SetPrimaryInterface (const string& interface\/* @/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
SetStunEndpoint	NetworkManager.json	/^        "SetStunEndpoint":{$/;"	o	object:methods
SetStunEndpoint	NetworkManagerImplementation.cpp	/^        uint32_t NetworkManagerImplementation::SetStunEndpoint (string const endpoint \/* @in *\//;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
SetStunEndpoint	NetworkManagerJsonRpc.cpp	/^        uint32_t NetworkManager::SetStunEndpoint(const JsonObject& parameters, JsonObject& respo/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
SsidSecurity	LegacyPlugin_WiFiManagerAPIs.cpp	/^} SsidSecurity;$/;"	t	typeref:enum:_SsidSecurity	file:
SsidSecurity	NetworkManagerRDKProxy.cpp	/^} SsidSecurity;$/;"	t	typeref:enum:_SsidSecurity	file:
StartWPS	NetworkManager.json	/^        "StartWPS":{$/;"	o	object:methods
StartWPS	NetworkManagerGnomeProxy.cpp	/^        uint32_t NetworkManagerImplementation::StartWPS(const WiFiWPS& method \/* @in *\/, const/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
StartWPS	NetworkManagerJsonRpc.cpp	/^        uint32_t NetworkManager::StartWPS(const JsonObject& parameters, JsonObject& response)$/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
StartWPS	NetworkManagerRDKProxy.cpp	/^        uint32_t NetworkManagerImplementation::StartWPS(const WiFiWPS& method \/* @in *\/, const/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
StartWPS	gdbus/NetworkManagerGdbusProxy.cpp	/^        uint32_t NetworkManagerImplementation::StartWPS(const WiFiWPS& method \/* @in *\/, const/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
StartWiFiScan	NetworkManager.json	/^        "StartWiFiScan":{$/;"	o	object:methods
StartWiFiScan	NetworkManagerGnomeProxy.cpp	/^        uint32_t NetworkManagerImplementation::StartWiFiScan(const string& frequency \/* @in *\//;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
StartWiFiScan	NetworkManagerJsonRpc.cpp	/^        uint32_t NetworkManager::StartWiFiScan(const JsonObject& parameters, JsonObject& respons/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
StartWiFiScan	NetworkManagerRDKProxy.cpp	/^        uint32_t NetworkManagerImplementation::StartWiFiScan(const string& frequency \/* @in *\//;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
StartWiFiScan	gdbus/NetworkManagerGdbusProxy.cpp	/^        uint32_t NetworkManagerImplementation::StartWiFiScan(const string& frequency \/* @in *\//;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
StopWPS	NetworkManager.json	/^        "StopWPS":{$/;"	o	object:methods
StopWPS	NetworkManagerGnomeProxy.cpp	/^        uint32_t NetworkManagerImplementation::StopWPS(void)$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
StopWPS	NetworkManagerJsonRpc.cpp	/^        uint32_t NetworkManager::StopWPS(const JsonObject& parameters, JsonObject& response)$/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
StopWPS	NetworkManagerRDKProxy.cpp	/^        uint32_t NetworkManagerImplementation::StopWPS(void)$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
StopWPS	gdbus/NetworkManagerGdbusProxy.cpp	/^        uint32_t NetworkManagerImplementation::StopWPS(void)$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
StopWiFiScan	NetworkManager.json	/^        "StopWiFiScan":{$/;"	o	object:methods
StopWiFiScan	NetworkManagerGnomeProxy.cpp	/^        uint32_t NetworkManagerImplementation::StopWiFiScan(void)$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
StopWiFiScan	NetworkManagerJsonRpc.cpp	/^        uint32_t NetworkManager::StopWiFiScan(const JsonObject& parameters, JsonObject& response/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
StopWiFiScan	NetworkManagerRDKProxy.cpp	/^        uint32_t NetworkManagerImplementation::StopWiFiScan(void)$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
StopWiFiScan	gdbus/NetworkManagerGdbusProxy.cpp	/^        uint32_t NetworkManagerImplementation::StopWiFiScan(void)$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
Stun	NetworkManagerImplementation.h	/^                        Stun()$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation::Stun
Stun	NetworkManagerImplementation.h	/^            class Stun : public Core::JSON::Container {$/;"	c	class:WPEFramework::Plugin::NetworkManagerImplementation
Subscribe	NetworkManager.h	/^            uint32_t Subscribe(const uint32_t channel, const string& event, const string& design/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
TEST_F	Tests/unit_test/test_NetworkManagerConnectivity.cpp	/^TEST_F(ConnectivityMonitorTest, SetEndpoints_DuplicateEndpoints) {$/;"	f
TEST_F	Tests/unit_test/test_NetworkManagerConnectivity.cpp	/^TEST_F(ConnectivityMonitorTest, SetEndpoints_InvalidShortEndpoints) {$/;"	f
TEST_F	Tests/unit_test/test_NetworkManagerConnectivity.cpp	/^TEST_F(ConnectivityMonitorTest, SetEndpoints_Valid) {$/;"	f
TEST_F	Tests/unit_test/test_NetworkManagerConnectivity.cpp	/^TEST_F(ConnectivityMonitorTest, StartConnectivityMonitor_Success) {$/;"	f
TEST_F	Tests/unit_test/test_NetworkManagerStunClient.cpp	/^TEST_F(ClientTest, BindFailure) {$/;"	f
TEST_F	Tests/unit_test/test_NetworkManagerStunClient.cpp	/^TEST_F(ClientTest, BindSuccess) {$/;"	f
TEST_F	Tests/unit_test/test_NetworkManagerStunClient.cpp	/^TEST_F(ClientTest, BindWithInvalidInterface) {$/;"	f
TEST_F	Tests/unit_test/test_WiFiSignalStrengthMonitor.cpp	/^TEST_F(WiFiSignalStrengthMonitorTest, GetSignalData_Connected) {$/;"	f
TEST_F	Tests/unit_test/test_WiFiSignalStrengthMonitor.cpp	/^TEST_F(WiFiSignalStrengthMonitorTest, StartWiFiSignalStrengthMonitor) {$/;"	f
Table of Contents	docs/NetworkManagerPlugin.md	/^### Table of Contents$/;"	S	chapter:NetworkManager Plugin
TestConnectivity	NetworkManagerConnectivity.cpp	/^    TestConnectivity::TestConnectivity(const std::vector<std::string>& endpoints, long timeout_m/;"	f	class:WPEFramework::Plugin::TestConnectivity
TestConnectivity	NetworkManagerConnectivity.h	/^        class TestConnectivity$/;"	c	namespace:WPEFramework::Plugin
Timed	NetworkManagerTimer.h	/^                        uint64_t Timed(const uint64_t scheduledTime)$/;"	f	class:WPEFramework::Plugin::NetworkManagerTimer::NetworkManagerTimerJob	typeref:typename:uint64_t
Timed	NetworkManagerTimer.h	/^                void Timed()$/;"	f	class:WPEFramework::Plugin::NetworkManagerTimer	typeref:typename:void
Trace	NetworkManager.json	/^        "Trace":{$/;"	o	object:methods
Trace	NetworkManagerImplementation.cpp	/^        uint32_t NetworkManagerImplementation::Trace (const string ipversion \/* @in *\/,  const/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
Trace	NetworkManagerJsonRpc.cpp	/^        uint32_t NetworkManager::Trace(const JsonObject& parameters, JsonObject& response)$/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
UNIT_TEST	Tests/unit_test/unit_tests.cmake	/^set(UNIT_TEST "unit_tests")$/;"	v
USE_RDK_LOGGER	CMakeLists.txt	/^option(USE_RDK_LOGGER "Enable RDK Logger for logging" OFF )$/;"	D
Unregister	NetworkManagerImplementation.cpp	/^        uint32_t NetworkManagerImplementation::Unregister(INetworkManager::INotification *notifi/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
UnregisterAllMethods	NetworkManagerJsonRpc.cpp	/^        void NetworkManager::UnregisterAllMethods()$/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:void
VERSION_MAJOR	CMakeLists.txt	/^set(VERSION_MAJOR 0)$/;"	v
VERSION_MINOR	CMakeLists.txt	/^set(VERSION_MINOR 9)$/;"	v
VERSION_PATCH	CMakeLists.txt	/^set(VERSION_PATCH 0)$/;"	v
WARNING_LEVEL	NetworkManagerLogger.h	/^enum LogLevel {FATAL_LEVEL = 0, ERROR_LEVEL, WARNING_LEVEL, INFO_LEVEL, DEBUG_LEVEL};$/;"	e	enum:NetworkManagerLogger::LogLevel
WIFISecurityMode	INetworkManager.h	/^            enum WIFISecurityMode : uint8_t$/;"	g	struct:WPEFramework::Exchange::INetworkManager	typeref:typename:uint8_t
WIFISecurityModeInfo	INetworkManager.h	/^            struct EXTERNAL WIFISecurityModeInfo {$/;"	s	struct:WPEFramework::Exchange::INetworkManager
WIFI_AUTH_FAILED	LegacyPlugin_WiFiManagerAPIs.cpp	/^    WIFI_AUTH_FAILED                \/**< The connection failed due to auth failure *\/$/;"	e	enum:_WiFiErrorCode_t	file:
WIFI_AUTH_FAILED	NetworkManagerRDKProxy.cpp	/^    WIFI_AUTH_FAILED                \/**< The connection failed due to auth failure *\/$/;"	e	enum:_WiFiErrorCode_t	file:
WIFI_CONNECTED	NetworkManagerRDKProxy.cpp	/^    WIFI_CONNECTED,          \/**< The device is successfully connected to a network *\/$/;"	e	enum:_WiFiStatusCode_t	file:
WIFI_CONNECTING	NetworkManagerRDKProxy.cpp	/^    WIFI_CONNECTING,         \/**< The device is attempting to connect to a network *\/$/;"	e	enum:_WiFiStatusCode_t	file:
WIFI_CONNECTION_FAILED	LegacyPlugin_WiFiManagerAPIs.cpp	/^    WIFI_CONNECTION_FAILED,         \/**< The connection failed for an unknown reason *\/$/;"	e	enum:_WiFiErrorCode_t	file:
WIFI_CONNECTION_FAILED	NetworkManagerRDKProxy.cpp	/^    WIFI_CONNECTION_FAILED,         \/**< The connection failed for an unknown reason *\/$/;"	e	enum:_WiFiErrorCode_t	file:
WIFI_CONNECTION_INTERRUPTED	LegacyPlugin_WiFiManagerAPIs.cpp	/^    WIFI_CONNECTION_INTERRUPTED,    \/**< The connection was interrupted *\/$/;"	e	enum:_WiFiErrorCode_t	file:
WIFI_CONNECTION_INTERRUPTED	NetworkManagerRDKProxy.cpp	/^    WIFI_CONNECTION_INTERRUPTED,    \/**< The connection was interrupted *\/$/;"	e	enum:_WiFiErrorCode_t	file:
WIFI_CONNECTION_LOST	LegacyPlugin_WiFiManagerAPIs.cpp	/^    WIFI_CONNECTION_LOST,           \/**< The connection to the network was lost *\/$/;"	e	enum:_WiFiErrorCode_t	file:
WIFI_CONNECTION_LOST	NetworkManagerRDKProxy.cpp	/^    WIFI_CONNECTION_LOST,           \/**< The connection to the network was lost *\/$/;"	e	enum:_WiFiErrorCode_t	file:
WIFI_CON_LNF	NetworkManagerRDKProxy.cpp	/^    WIFI_CON_LNF,$/;"	e	enum:_WiFiConnectionTypeCode_t	file:
WIFI_CON_MANUAL	NetworkManagerRDKProxy.cpp	/^    WIFI_CON_MANUAL,$/;"	e	enum:_WiFiConnectionTypeCode_t	file:
WIFI_CON_MAX	NetworkManagerRDKProxy.cpp	/^    WIFI_CON_MAX,$/;"	e	enum:_WiFiConnectionTypeCode_t	file:
WIFI_CON_PRIVATE	NetworkManagerRDKProxy.cpp	/^    WIFI_CON_PRIVATE,$/;"	e	enum:_WiFiConnectionTypeCode_t	file:
WIFI_CON_UNKNOWN	NetworkManagerRDKProxy.cpp	/^    WIFI_CON_UNKNOWN,$/;"	e	enum:_WiFiConnectionTypeCode_t	file:
WIFI_CON_WPS	NetworkManagerRDKProxy.cpp	/^    WIFI_CON_WPS,$/;"	e	enum:_WiFiConnectionTypeCode_t	file:
WIFI_DISABLED	NetworkManagerRDKProxy.cpp	/^    WIFI_DISABLED,           \/**< The device is installed (or was just installed) and has not y/;"	e	enum:_WiFiStatusCode_t	file:
WIFI_DISCONNECTED	NetworkManagerRDKProxy.cpp	/^    WIFI_DISCONNECTED,       \/**< The device is not connected to a network *\/$/;"	e	enum:_WiFiStatusCode_t	file:
WIFI_FAILED	NetworkManagerRDKProxy.cpp	/^    WIFI_FAILED              \/**< The device has encountered an unrecoverable error with the wi/;"	e	enum:_WiFiStatusCode_t	file:
WIFI_INVALID_CREDENTIALS	LegacyPlugin_WiFiManagerAPIs.cpp	/^    WIFI_INVALID_CREDENTIALS,       \/**< The connection failed due to invalid credentials *\/$/;"	e	enum:_WiFiErrorCode_t	file:
WIFI_INVALID_CREDENTIALS	NetworkManagerRDKProxy.cpp	/^    WIFI_INVALID_CREDENTIALS,       \/**< The connection failed due to invalid credentials *\/$/;"	e	enum:_WiFiErrorCode_t	file:
WIFI_NO_SSID	LegacyPlugin_WiFiManagerAPIs.cpp	/^    WIFI_NO_SSID,                   \/**< The SSID does not exist *\/$/;"	e	enum:_WiFiErrorCode_t	file:
WIFI_NO_SSID	NetworkManagerRDKProxy.cpp	/^    WIFI_NO_SSID,                   \/**< The SSID does not exist *\/$/;"	e	enum:_WiFiErrorCode_t	file:
WIFI_PAIRING	NetworkManagerRDKProxy.cpp	/^    WIFI_PAIRING,            \/**< The device is not connected to a network, but not yet connect/;"	e	enum:_WiFiStatusCode_t	file:
WIFI_SECURITY_EAP	INetworkManager.h	/^                WIFI_SECURITY_EAP           \/* @text: EAP *\/,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::WIFISecurityMode
WIFI_SECURITY_NONE	INetworkManager.h	/^                WIFI_SECURITY_NONE          \/* @text: NONE *\/,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::WIFISecurityMode
WIFI_SECURITY_SAE	INetworkManager.h	/^                WIFI_SECURITY_SAE           \/* @text: SAE *\/,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::WIFISecurityMode
WIFI_SECURITY_WPA_PSK	INetworkManager.h	/^                WIFI_SECURITY_WPA_PSK       \/* @text: WPA-PSK *\/,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::WIFISecurityMode
WIFI_SIGNAL_DISCONNECTED	INetworkManager.h	/^                WIFI_SIGNAL_DISCONNECTED    \/* @text: Disconnected *\/,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::WiFiSignalQuality
WIFI_SIGNAL_EXCELLENT	INetworkManager.h	/^                WIFI_SIGNAL_EXCELLENT       \/* @text: Excellent *\/$/;"	e	enum:WPEFramework::Exchange::INetworkManager::WiFiSignalQuality
WIFI_SIGNAL_FAIR	INetworkManager.h	/^                WIFI_SIGNAL_FAIR            \/* @text: Fair *\/,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::WiFiSignalQuality
WIFI_SIGNAL_GOOD	INetworkManager.h	/^                WIFI_SIGNAL_GOOD            \/* @text: Good *\/,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::WiFiSignalQuality
WIFI_SIGNAL_WEAK	INetworkManager.h	/^                WIFI_SIGNAL_WEAK            \/* @text: Weak *\/,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::WiFiSignalQuality
WIFI_SSID_CHANGED	LegacyPlugin_WiFiManagerAPIs.cpp	/^    WIFI_SSID_CHANGED,              \/**< The SSID of the network changed *\/$/;"	e	enum:_WiFiErrorCode_t	file:
WIFI_SSID_CHANGED	NetworkManagerRDKProxy.cpp	/^    WIFI_SSID_CHANGED,              \/**< The SSID of the network changed *\/$/;"	e	enum:_WiFiErrorCode_t	file:
WIFI_STATE_AUTHENTICATION_FAILED	INetworkManager.h	/^                WIFI_STATE_AUTHENTICATION_FAILED,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::WiFiState
WIFI_STATE_CONNECTED	INetworkManager.h	/^                WIFI_STATE_CONNECTED,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::WiFiState
WIFI_STATE_CONNECTING	INetworkManager.h	/^                WIFI_STATE_CONNECTING,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::WiFiState
WIFI_STATE_CONNECTION_FAILED	INetworkManager.h	/^                WIFI_STATE_CONNECTION_FAILED,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::WiFiState
WIFI_STATE_CONNECTION_INTERRUPTED	INetworkManager.h	/^                WIFI_STATE_CONNECTION_INTERRUPTED,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::WiFiState
WIFI_STATE_CONNECTION_LOST	INetworkManager.h	/^                WIFI_STATE_CONNECTION_LOST,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::WiFiState
WIFI_STATE_DISABLED	INetworkManager.h	/^                WIFI_STATE_DISABLED,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::WiFiState
WIFI_STATE_DISCONNECTED	INetworkManager.h	/^                WIFI_STATE_DISCONNECTED,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::WiFiState
WIFI_STATE_ERROR	INetworkManager.h	/^                WIFI_STATE_ERROR,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::WiFiState
WIFI_STATE_INVALID	INetworkManager.h	/^                WIFI_STATE_INVALID$/;"	e	enum:WPEFramework::Exchange::INetworkManager::WiFiState
WIFI_STATE_INVALID_CREDENTIALS	INetworkManager.h	/^                WIFI_STATE_INVALID_CREDENTIALS,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::WiFiState
WIFI_STATE_PAIRING	INetworkManager.h	/^                WIFI_STATE_PAIRING,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::WiFiState
WIFI_STATE_SSID_CHANGED	INetworkManager.h	/^                WIFI_STATE_SSID_CHANGED,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::WiFiState
WIFI_STATE_SSID_NOT_FOUND	INetworkManager.h	/^                WIFI_STATE_SSID_NOT_FOUND,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::WiFiState
WIFI_STATE_UNINSTALLED	INetworkManager.h	/^                WIFI_STATE_UNINSTALLED,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::WiFiState
WIFI_UNINSTALLED	NetworkManagerRDKProxy.cpp	/^    WIFI_UNINSTALLED,        \/**< The device was in an installed state, and was uninstalled *\/$/;"	e	enum:_WiFiStatusCode_t	file:
WIFI_UNKNOWN	LegacyPlugin_WiFiManagerAPIs.cpp	/^    WIFI_UNKNOWN,                   \/**< Any other error *\/$/;"	e	enum:_WiFiErrorCode_t	file:
WIFI_UNKNOWN	NetworkManagerRDKProxy.cpp	/^    WIFI_UNKNOWN,                   \/**< Any other error *\/$/;"	e	enum:_WiFiErrorCode_t	file:
WIFI_WPS_PBC	INetworkManager.h	/^                WIFI_WPS_PBC                \/* @text: PBC *\/,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::WiFiWPS
WIFI_WPS_PIN	INetworkManager.h	/^                WIFI_WPS_PIN                \/* @text: PIN *\/,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::WiFiWPS
WIFI_WPS_SERIALIZED_PIN	INetworkManager.h	/^                WIFI_WPS_SERIALIZED_PIN     \/* @text: SERIALIZED_PIN *\/,$/;"	e	enum:WPEFramework::Exchange::INetworkManager::WiFiWPS
WPA_CLI_STATUS	NetworkManagerGnomeWIFI.h	/^#define WPA_CLI_STATUS /;"	d
WPA_PSK	NetworkManager.json	/^                            "WPA_PSK": {$/;"	o	object:methods.GetSupportedsecurityModes.result.properties.security_modes.properties
WPA_SUPPLICANT_CONF	LegacyPlugin_WiFiManagerAPIs.cpp	/^#define WPA_SUPPLICANT_CONF /;"	d	file:
WPA_SUPPLICANT_CONF	NetworkManagerGnomeWIFI.h	/^#define WPA_SUPPLICANT_CONF /;"	d
WPEFramework	INetworkManager.h	/^namespace WPEFramework$/;"	n
WPEFramework	LegacyPlugin_NetworkAPIs.cpp	/^namespace WPEFramework$/;"	n	file:
WPEFramework	LegacyPlugin_NetworkAPIs.h	/^namespace WPEFramework {$/;"	n
WPEFramework	LegacyPlugin_WiFiManagerAPIs.cpp	/^namespace WPEFramework$/;"	n	file:
WPEFramework	LegacyPlugin_WiFiManagerAPIs.h	/^namespace WPEFramework {$/;"	n
WPEFramework	NetworkManager.cpp	/^namespace WPEFramework$/;"	n	file:
WPEFramework	NetworkManager.h	/^namespace WPEFramework$/;"	n
WPEFramework	NetworkManagerConnectivity.cpp	/^namespace WPEFramework$/;"	n	file:
WPEFramework	NetworkManagerConnectivity.h	/^namespace WPEFramework$/;"	n
WPEFramework	NetworkManagerGnomeEvents.cpp	/^namespace WPEFramework$/;"	n	file:
WPEFramework	NetworkManagerGnomeEvents.h	/^namespace WPEFramework$/;"	n
WPEFramework	NetworkManagerGnomeProxy.cpp	/^namespace WPEFramework$/;"	n	file:
WPEFramework	NetworkManagerGnomeUtils.cpp	/^namespace WPEFramework$/;"	n	file:
WPEFramework	NetworkManagerGnomeUtils.h	/^namespace WPEFramework$/;"	n
WPEFramework	NetworkManagerGnomeWIFI.cpp	/^namespace WPEFramework$/;"	n	file:
WPEFramework	NetworkManagerGnomeWIFI.h	/^namespace WPEFramework$/;"	n
WPEFramework	NetworkManagerImplementation.cpp	/^namespace WPEFramework$/;"	n	file:
WPEFramework	NetworkManagerImplementation.h	/^namespace WPEFramework$/;"	n
WPEFramework	NetworkManagerJsonEnum.h	/^namespace WPEFramework {$/;"	n
WPEFramework	NetworkManagerJsonRpc.cpp	/^namespace WPEFramework$/;"	n	file:
WPEFramework	NetworkManagerRDKProxy.cpp	/^namespace WPEFramework$/;"	n	file:
WPEFramework	NetworkManagerTimer.h	/^namespace WPEFramework {$/;"	n
WPEFramework	Tests/raspberrypi/NetworkManagerGdbusTest.cpp	/^namespace WPEFramework$/;"	n	file:
WPEFramework	Tests/unit_test/test_WiFiSignalStrengthMonitor.cpp	/^namespace WPEFramework$/;"	n	file:
WPEFramework	WiFiSignalStrengthMonitor.cpp	/^namespace WPEFramework$/;"	n	file:
WPEFramework	WiFiSignalStrengthMonitor.h	/^namespace WPEFramework$/;"	n
WPEFramework	gdbus/NetworkManagerGdbusClient.cpp	/^namespace WPEFramework$/;"	n	file:
WPEFramework	gdbus/NetworkManagerGdbusClient.h	/^namespace WPEFramework$/;"	n
WPEFramework	gdbus/NetworkManagerGdbusEvent.cpp	/^namespace WPEFramework$/;"	n	file:
WPEFramework	gdbus/NetworkManagerGdbusEvent.h	/^namespace WPEFramework$/;"	n
WPEFramework	gdbus/NetworkManagerGdbusMgr.cpp	/^namespace WPEFramework$/;"	n	file:
WPEFramework	gdbus/NetworkManagerGdbusMgr.h	/^namespace WPEFramework$/;"	n
WPEFramework	gdbus/NetworkManagerGdbusProxy.cpp	/^namespace WPEFramework$/;"	n	file:
WPEFramework	gdbus/NetworkManagerGdbusUtils.cpp	/^namespace WPEFramework$/;"	n	file:
WPEFramework	gdbus/NetworkManagerGdbusUtils.h	/^namespace WPEFramework$/;"	n
WiFiConfig	NetworkManagerImplementation.h	/^                    WiFiConfig() : Core::JSON::Container()$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation::WiFiConfig
WiFiConfig	NetworkManagerImplementation.h	/^            class WiFiConfig : public Core::JSON::Container$/;"	c	class:WPEFramework::Plugin::NetworkManagerImplementation
WiFiConnect	NetworkManager.json	/^        "WiFiConnect":{$/;"	o	object:methods
WiFiConnect	NetworkManagerGnomeProxy.cpp	/^        uint32_t NetworkManagerImplementation::WiFiConnect(const WiFiConnectTo& ssid \/* @in *\//;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
WiFiConnect	NetworkManagerJsonRpc.cpp	/^        uint32_t NetworkManager::WiFiConnect(const JsonObject& parameters, JsonObject& response)$/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
WiFiConnect	NetworkManagerRDKProxy.cpp	/^        uint32_t NetworkManagerImplementation::WiFiConnect(const WiFiConnectTo& ssid \/* @in *\//;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
WiFiConnect	gdbus/NetworkManagerGdbusProxy.cpp	/^        uint32_t NetworkManagerImplementation::WiFiConnect(const WiFiConnectTo& ssid \/* @in *\//;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
WiFiConnectTo	INetworkManager.h	/^            struct EXTERNAL WiFiConnectTo {$/;"	s	struct:WPEFramework::Exchange::INetworkManager
WiFiConnectedSSIDInfo_t	NetworkManagerRDKProxy.cpp	/^} WiFiConnectedSSIDInfo_t;$/;"	t	typeref:struct:_WiFiConnectedSSIDInfo	file:
WiFiConnection	NetworkManagerRDKProxy.cpp	/^} WiFiConnection;$/;"	t	typeref:struct:_WiFiConnection	file:
WiFiConnectionTypeCode_t	NetworkManagerRDKProxy.cpp	/^} WiFiConnectionTypeCode_t;$/;"	t	typeref:enum:_WiFiConnectionTypeCode_t	file:
WiFiDisconnect	NetworkManager.json	/^        "WiFiDisconnect":{$/;"	o	object:methods
WiFiDisconnect	NetworkManagerGnomeProxy.cpp	/^        uint32_t NetworkManagerImplementation::WiFiDisconnect(void)$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
WiFiDisconnect	NetworkManagerJsonRpc.cpp	/^        uint32_t NetworkManager::WiFiDisconnect(const JsonObject& parameters, JsonObject& respon/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
WiFiDisconnect	NetworkManagerRDKProxy.cpp	/^        uint32_t NetworkManagerImplementation::WiFiDisconnect(void)$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
WiFiDisconnect	gdbus/NetworkManagerGdbusProxy.cpp	/^        uint32_t NetworkManagerImplementation::WiFiDisconnect(void)$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint32_t
WiFiErrorCode_t	LegacyPlugin_WiFiManagerAPIs.cpp	/^} WiFiErrorCode_t;$/;"	t	typeref:enum:_WiFiErrorCode_t	file:
WiFiErrorCode_t	NetworkManagerRDKProxy.cpp	/^} WiFiErrorCode_t;$/;"	t	typeref:enum:_WiFiErrorCode_t	file:
WiFiLNFState_t	NetworkManagerRDKProxy.cpp	/^} WiFiLNFState_t;$/;"	t	typeref:enum:_WiFiLNFState_t	file:
WiFiLNFStatusCode_t	NetworkManagerRDKProxy.cpp	/^} WiFiLNFStatusCode_t;$/;"	t	typeref:enum:_WiFiLNFStatusCode_t	file:
WiFiManager	LegacyPlugin_WiFiManagerAPIs.cpp	/^        WiFiManager::WiFiManager()$/;"	f	class:WPEFramework::Plugin::WiFiManager
WiFiManager	LegacyPlugin_WiFiManagerAPIs.h	/^        class WiFiManager : public PluginHost::IPlugin, public PluginHost::JSONRPC {$/;"	c	namespace:WPEFramework::Plugin
WiFiPairedSSIDInfo_t	NetworkManagerRDKProxy.cpp	/^} WiFiPairedSSIDInfo_t;$/;"	t	typeref:struct:_WiFiPairedSSIDInfo	file:
WiFiSSIDInfo	INetworkManager.h	/^            struct EXTERNAL WiFiSSIDInfo {$/;"	s	struct:WPEFramework::Exchange::INetworkManager
WiFiScanResults	INetworkManager.h	/^            struct EXTERNAL WiFiScanResults {$/;"	s	struct:WPEFramework::Exchange::INetworkManager
WiFiSignalQuality	INetworkManager.h	/^            enum WiFiSignalQuality : uint8_t$/;"	g	struct:WPEFramework::Exchange::INetworkManager	typeref:typename:uint8_t
WiFiSignalStrengthMonitor	WiFiSignalStrengthMonitor.h	/^                WiFiSignalStrengthMonitor():isRunning(false), stopThread(false) {}$/;"	f	class:WPEFramework::Plugin::WiFiSignalStrengthMonitor
WiFiSignalStrengthMonitor	WiFiSignalStrengthMonitor.h	/^        class WiFiSignalStrengthMonitor$/;"	c	namespace:WPEFramework::Plugin
WiFiSignalStrengthMonitorTest	Tests/unit_test/test_WiFiSignalStrengthMonitor.cpp	/^class WiFiSignalStrengthMonitorTest : public ::testing::Test {$/;"	c	file:
WiFiState	INetworkManager.h	/^            enum WiFiState : uint8_t$/;"	g	struct:WPEFramework::Exchange::INetworkManager	typeref:typename:uint8_t
WiFiStatusCode_t	NetworkManagerRDKProxy.cpp	/^} WiFiStatusCode_t;$/;"	t	typeref:enum:_WiFiStatusCode_t	file:
WiFiWPS	INetworkManager.h	/^            enum WiFiWPS : uint8_t$/;"	g	struct:WPEFramework::Exchange::INetworkManager	typeref:typename:uint8_t
[0.1.0] - 2024-03-28	CHANGELOG.md	/^## [0.1.0] - 2024-03-28$/;"	s	chapter:Changelog
[0.2.0] - 2024-05-27	CHANGELOG.md	/^## [0.2.0] - 2024-05-27$/;"	s	chapter:Changelog
[0.3.0] - 2024-09-16	CHANGELOG.md	/^## [0.3.0] - 2024-09-16$/;"	s	chapter:Changelog
[0.4.0] - 2024-10-04	CHANGELOG.md	/^## [0.4.0] - 2024-10-04$/;"	s	chapter:Changelog
[0.5.0] - 2024-11-05	CHANGELOG.md	/^## [0.5.0] - 2024-11-05$/;"	s	chapter:Changelog
[0.5.1] - 2024-11-15	CHANGELOG.md	/^## [0.5.1] - 2024-11-15$/;"	s	chapter:Changelog
[0.5.2] - 2024-11-19	CHANGELOG.md	/^## [0.5.2] - 2024-11-19$/;"	s	chapter:Changelog
[0.5.3] - 2024-11-21	CHANGELOG.md	/^## [0.5.3] - 2024-11-21$/;"	s	chapter:Changelog
[0.5.4] - 2024-11-29	CHANGELOG.md	/^## [0.5.4] - 2024-11-29$/;"	s	chapter:Changelog
[0.6.0] - 2024-12-10	CHANGELOG.md	/^## [0.6.0] - 2024-12-10$/;"	s	chapter:Changelog
[0.7.0] - 2024-12-30	CHANGELOG.md	/^## [0.7.0] - 2024-12-30$/;"	s	chapter:Changelog
[0.8.0] - 2025-01-03	CHANGELOG.md	/^## [0.8.0] - 2025-01-03$/;"	s	chapter:Changelog
[0.9.0] - 2025-01-30	CHANGELOG.md	/^## [0.9.0] - 2025-01-30$/;"	s	chapter:Changelog
_IARM_BUS_NetSrvMgr_Iface_EventData_t	NetworkManagerRDKProxy.cpp	/^typedef struct _IARM_BUS_NetSrvMgr_Iface_EventData_t {$/;"	s	file:
_IARM_BUS_WiFiSrvMgr_EventData_t	NetworkManagerRDKProxy.cpp	/^typedef struct _IARM_BUS_WiFiSrvMgr_EventData_t {$/;"	s	file:
_IARM_Bus_NMgr_WiFi_EventId_t	NetworkManagerRDKProxy.cpp	/^typedef enum _IARM_Bus_NMgr_WiFi_EventId_t {$/;"	g	file:
_IARM_Bus_WiFiSrvMgr_Param_t	NetworkManagerRDKProxy.cpp	/^typedef struct _IARM_Bus_WiFiSrvMgr_Param_t {$/;"	s	file:
_IARM_Bus_WiFiSrvMgr_SsidList_Param_t	NetworkManagerRDKProxy.cpp	/^typedef struct _IARM_Bus_WiFiSrvMgr_SsidList_Param_t {$/;"	s	file:
_IARM_Bus_WiFiSrvMgr_WPS_Parameters_t	NetworkManagerRDKProxy.cpp	/^typedef struct _IARM_Bus_WiFiSrvMgr_WPS_Parameters_t$/;"	s	file:
_IARM_Result_t	Tests/mocks/Iarm.h	/^typedef enum _IARM_Result_t {$/;"	g
_NetworkManagerEvents	gdbus/NetworkManagerGdbusEvent.cpp	/^    static NetworkManagerEvents *_NetworkManagerEvents = nullptr;$/;"	v	namespace:WPEFramework::Plugin	typeref:typename:NetworkManagerEvents *	file:
_NetworkManager_EventId_t	NetworkManagerRDKProxy.cpp	/^typedef enum _NetworkManager_EventId_t {$/;"	g	file:
_NetworkManager_GetIPSettings_ErrorCode_t	NetworkManagerRDKProxy.cpp	/^typedef enum _NetworkManager_GetIPSettings_ErrorCode_t$/;"	g	file:
_SsidSecurity	LegacyPlugin_WiFiManagerAPIs.cpp	/^typedef enum _SsidSecurity$/;"	g	file:
_SsidSecurity	NetworkManagerRDKProxy.cpp	/^typedef enum _SsidSecurity$/;"	g	file:
_WIFI_ERROR	NetworkManagerRDKProxy.cpp	/^        struct _WIFI_ERROR {$/;"	s	union:_IARM_BUS_WiFiSrvMgr_EventData_t::__anon7d34ee9e0c0a	file:
_WIFI_LNF_STATE	NetworkManagerRDKProxy.cpp	/^        struct _WIFI_LNF_STATE {$/;"	s	union:_IARM_BUS_WiFiSrvMgr_EventData_t::__anon7d34ee9e0c0a	file:
_WIFI_SSID_LIST	NetworkManagerRDKProxy.cpp	/^        struct _WIFI_SSID_LIST {$/;"	s	union:_IARM_BUS_WiFiSrvMgr_EventData_t::__anon7d34ee9e0c0a	file:
_WIFI_STATECHANGE_DATA	NetworkManagerRDKProxy.cpp	/^        struct _WIFI_STATECHANGE_DATA {$/;"	s	union:_IARM_BUS_WiFiSrvMgr_EventData_t::__anon7d34ee9e0c0a	file:
_WiFiConnectedSSIDInfo	NetworkManagerRDKProxy.cpp	/^typedef struct _WiFiConnectedSSIDInfo$/;"	s	file:
_WiFiConnection	NetworkManagerRDKProxy.cpp	/^typedef struct _WiFiConnection$/;"	s	file:
_WiFiConnectionTypeCode_t	NetworkManagerRDKProxy.cpp	/^typedef enum _WiFiConnectionTypeCode_t {$/;"	g	file:
_WiFiErrorCode_t	LegacyPlugin_WiFiManagerAPIs.cpp	/^typedef enum _WiFiErrorCode_t {$/;"	g	file:
_WiFiErrorCode_t	NetworkManagerRDKProxy.cpp	/^typedef enum _WiFiErrorCode_t {$/;"	g	file:
_WiFiLNFState_t	NetworkManagerRDKProxy.cpp	/^typedef enum _WiFiLNFState_t {$/;"	g	file:
_WiFiLNFStatusCode_t	NetworkManagerRDKProxy.cpp	/^typedef enum _WiFiLNFStatusCode_t {$/;"	g	file:
_WiFiPairedSSIDInfo	NetworkManagerRDKProxy.cpp	/^typedef struct _WiFiPairedSSIDInfo$/;"	s	file:
_WiFiStatusCode_t	NetworkManagerRDKProxy.cpp	/^typedef enum _WiFiStatusCode_t {$/;"	g	file:
__anon0392de840102	NetworkManagerStunClient.cpp	/^    std::begin(m_attrs), std::end(m_attrs), [attr_type](attribute const & attr) {$/;"	f	function:stun::message::find_attribute	file:
__anon11e85e490103	INetworkManager.h	/^            enum { ID = ID_NETWORKMANAGER };$/;"	g	struct:WPEFramework::Exchange::INetworkManager
__anon11e85e490203	INetworkManager.h	/^                enum { ID = ID_NETWORKMANAGER_NOTIFICATION };$/;"	g	struct:WPEFramework::Exchange::INetworkManager::INotification
__anon27c269ba0102	NetworkManagerConnectivity.cpp	/^                auto curlCheckThrdIpv4 = [&]() {$/;"	f	function:WPEFramework::Plugin::ConnectivityMonitor::connectivityMonitorFunction	file:
__anon27c269ba0202	NetworkManagerConnectivity.cpp	/^                auto curlCheckThrdIpv6 = [&]() {$/;"	f	function:WPEFramework::Plugin::ConnectivityMonitor::connectivityMonitorFunction	file:
__anon6aea1b700102	LegacyPlugin_NetworkAPIs.cpp	/^            Core::IWorkerPool::Instance().Submit(Core::ProxyType<Core::IDispatch>(Core::ProxyTyp/;"	f	function:WPEFramework::Plugin::Network::activatePrimaryPlugin	file:
__anon7d34ee9e0108	NetworkManagerRDKProxy.cpp	/^typedef struct {$/;"	s	file:
__anon7d34ee9e0208	NetworkManagerRDKProxy.cpp	/^typedef struct {$/;"	s	file:
__anon7d34ee9e0308	NetworkManagerRDKProxy.cpp	/^typedef struct {$/;"	s	file:
__anon7d34ee9e0408	NetworkManagerRDKProxy.cpp	/^typedef struct {$/;"	s	file:
__anon7d34ee9e0508	NetworkManagerRDKProxy.cpp	/^typedef struct {$/;"	s	file:
__anon7d34ee9e0608	NetworkManagerRDKProxy.cpp	/^typedef struct {$/;"	s	file:
__anon7d34ee9e0708	NetworkManagerRDKProxy.cpp	/^typedef struct {$/;"	s	file:
__anon7d34ee9e0808	NetworkManagerRDKProxy.cpp	/^{$/;"	s	file:
__anon7d34ee9e0908	NetworkManagerRDKProxy.cpp	/^{$/;"	s	file:
__anon7d34ee9e0a0a	NetworkManagerRDKProxy.cpp	/^    union {$/;"	u	struct:_IARM_Bus_WiFiSrvMgr_Param_t	file:
__anon7d34ee9e0b0a	NetworkManagerRDKProxy.cpp	/^   union {$/;"	u	struct:_IARM_BUS_NetSrvMgr_Iface_EventData_t	file:
__anon7d34ee9e0c0a	NetworkManagerRDKProxy.cpp	/^    union {$/;"	u	struct:_IARM_BUS_WiFiSrvMgr_EventData_t	file:
__anon7fd22f500102	LegacyPlugin_WiFiManagerAPIs.cpp	/^            Core::IWorkerPool::Instance().Submit(Core::ProxyType<Core::IDispatch>(Core::ProxyTyp/;"	f	function:WPEFramework::Plugin::WiFiManager::activatePrimaryPlugin	file:
__anon87bbc0eb0108	NetworkManagerGnomeEvents.h	/^    typedef struct {$/;"	s	namespace:WPEFramework::Plugin
__anoncc38525b0108	gdbus/NetworkManagerGdbusEvent.h	/^    typedef struct {;$/;"	s	namespace:WPEFramework::Plugin
_client	Tests/unit_test/test_NetworkManagerStunClient.cpp	/^   stun::client _client;$/;"	m	class:ClientTest	typeref:typename:stun::client	file:
_connectionId	NetworkManager.h	/^            uint32_t _connectionId;$/;"	m	class:WPEFramework::Plugin::NetworkManager	typeref:typename:uint32_t
_gNWInstance	LegacyPlugin_NetworkAPIs.cpp	/^    Network* _gNWInstance = nullptr;$/;"	v	namespace:WPEFramework	typeref:typename:Network *
_gWiFiInstance	LegacyPlugin_WiFiManagerAPIs.cpp	/^    WiFiManager* _gWiFiInstance = nullptr;$/;"	v	namespace:WPEFramework	typeref:typename:WiFiManager *
_instance	NetworkManagerGnomeProxy.cpp	/^        NetworkManagerImplementation* _instance = nullptr;$/;"	v	namespace:WPEFramework::Plugin	typeref:typename:NetworkManagerImplementation *
_instance	NetworkManagerRDKProxy.cpp	/^        NetworkManagerImplementation* _instance = nullptr;$/;"	v	namespace:WPEFramework::Plugin	typeref:typename:NetworkManagerImplementation *
_instance	Tests/raspberrypi/NetworkManagerGdbusTest.cpp	/^        NetworkManagerImplementation* _instance = nullptr;$/;"	v	namespace:WPEFramework::Plugin	typeref:typename:NetworkManagerImplementation *
_instance	Tests/unit_test/test_WiFiSignalStrengthMonitor.cpp	/^        NetworkManagerImplementation* _instance = nullptr;$/;"	v	namespace:WPEFramework::Plugin	typeref:typename:NetworkManagerImplementation *
_instance	gdbus/NetworkManagerGdbusProxy.cpp	/^        NetworkManagerImplementation* _instance = nullptr;$/;"	v	namespace:WPEFramework::Plugin	typeref:typename:NetworkManagerImplementation *
_networkManager	NetworkManager.h	/^            Exchange::INetworkManager *_networkManager;$/;"	m	class:WPEFramework::Plugin::NetworkManager	typeref:typename:Exchange::INetworkManager *
_networkManagerImpl	NetworkManager.h	/^            PluginHost::IPlugin* _networkManagerImpl;$/;"	m	class:WPEFramework::Plugin::NetworkManager	typeref:typename:PluginHost::IPlugin *
_nmEventInstance	NetworkManagerGnomeEvents.cpp	/^    static GnomeNetworkManagerEvents *_nmEventInstance = nullptr;$/;"	v	namespace:WPEFramework::Plugin	typeref:typename:GnomeNetworkManagerEvents *	file:
_nmGdbusClient	gdbus/NetworkManagerGdbusProxy.cpp	/^        NetworkManagerClient* _nmGdbusClient = nullptr;$/;"	v	namespace:WPEFramework::Plugin	typeref:typename:NetworkManagerClient *
_nmGdbusEvents	gdbus/NetworkManagerGdbusProxy.cpp	/^        NetworkManagerEvents* _nmGdbusEvents = nullptr;$/;"	v	namespace:WPEFramework::Plugin	typeref:typename:NetworkManagerEvents *
_notification	NetworkManager.h	/^            Core::Sink<Notification> _notification;$/;"	m	class:WPEFramework::Plugin::NetworkManager	typeref:typename:Core::Sink<Notification>
_notificationCallbacks	NetworkManagerImplementation.h	/^                std::list<Exchange::INetworkManager::INotification *> _notificationCallbacks;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:std::list<Exchange::INetworkManager::INotification * >
_notificationLock	NetworkManagerImplementation.h	/^                Core::CriticalSection _notificationLock;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:Core::CriticalSection
_parent	NetworkManager.h	/^                NetworkManager &_parent;$/;"	m	class:WPEFramework::Plugin::NetworkManager::Notification	typeref:typename:NetworkManager &
_service	NetworkManager.h	/^            PluginHost::IShell *_service;$/;"	m	class:WPEFramework::Plugin::NetworkManager	typeref:typename:PluginHost::IShell *
_setWiFiAdapter	NetworkManagerRDKProxy.cpp	/^typedef struct _setWiFiAdapter$/;"	s	file:
_wifiSsidData_t	NetworkManagerRDKProxy.cpp	/^typedef struct _wifiSsidData_t {$/;"	s	file:
_wifi_wps_pbc_ap	NetworkManagerGnomeWIFI.h	/^typedef struct _wifi_wps_pbc_ap$/;"	s
_work	LegacyPlugin_NetworkAPIs.cpp	/^        function<void()> _work;$/;"	m	class:WPEFramework::Job	typeref:typename:function<void ()>	file:
_work	LegacyPlugin_WiFiManagerAPIs.cpp	/^        function<void()> _work;$/;"	m	class:WPEFramework::Job	typeref:typename:function<void ()>	file:
_work	NetworkManagerGnomeWIFI.cpp	/^        function<void()> _work;$/;"	m	class:WPEFramework::Job	typeref:typename:function<void ()>	file:
_work	NetworkManagerImplementation.h	/^                function<void()> _work;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation::Job	typeref:typename:function<void ()>
acquired	NetworkManagerRDKProxy.cpp	/^    bool acquired;$/;"	m	struct:__anon7d34ee9e0608	typeref:typename:bool	file:
activateConnection	gdbus/NetworkManagerGdbusUtils.cpp	/^        bool GnomeUtils::activateConnection(DbusMgr& m_dbus, const std::string& connectionProfil/;"	f	class:WPEFramework::Plugin::GnomeUtils	typeref:typename:bool
activatePrimaryPlugin	LegacyPlugin_NetworkAPIs.cpp	/^        void Network::activatePrimaryPlugin()$/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:void
activatePrimaryPlugin	LegacyPlugin_WiFiManagerAPIs.cpp	/^        void WiFiManager::activatePrimaryPlugin()$/;"	f	class:WPEFramework::Plugin::WiFiManager	typeref:typename:void
activeConn	NetworkManagerGnomeEvents.h	/^        NMActiveConnection *activeConn;$/;"	m	struct:WPEFramework::Plugin::__anon87bbc0eb0108	typeref:typename:NMActiveConnection *
activeConnPath	gdbus/NetworkManagerGdbusUtils.h	/^    std::string activeConnPath;$/;"	m	struct:deviceInfo	typeref:typename:std::string
activeIface	NetworkManagerRDKProxy.cpp	/^        char activeIface[INTERFACE_SIZE];$/;"	m	union:_IARM_BUS_NetSrvMgr_Iface_EventData_t::__anon7d34ee9e0b0a	typeref:typename:char[]	file:
activeIfaceIpaddr	NetworkManagerRDKProxy.cpp	/^        char activeIfaceIpaddr[MAX_IP_ADDRESS_LEN];$/;"	m	union:_IARM_BUS_NetSrvMgr_Iface_EventData_t::__anon7d34ee9e0b0a	typeref:typename:char[]	file:
activeInterface	NetworkManager.json	/^                    "activeInterface":{$/;"	o	object:events.onActiveInterfaceChange.params.properties
ad	Tests/unit_test/test_NetworkManagerStunClient.cpp	/^   stun::attributes::address ad;$/;"	m	class:AddressTest	typeref:typename:stun::attributes::address	file:
addGvariantToBuilder	gdbus/NetworkManagerGdbusUtils.cpp	/^        void GnomeUtils::addGvariantToBuilder(GVariant *variant, GVariantBuilder *builder, gbool/;"	f	class:WPEFramework::Plugin::GnomeUtils	typeref:typename:void
addNewConnctionAndactivate	gdbus/NetworkManagerGdbusClient.cpp	/^        bool addNewConnctionAndactivate(DbusMgr& m_dbus, GVariantBuilder connBuilder, const char/;"	f	namespace:WPEFramework::Plugin	typeref:typename:bool
addToKnownSSIDs	NetworkManagerGnomeWIFI.cpp	/^        bool wifiManager::addToKnownSSIDs(const Exchange::INetworkManager::WiFiConnectTo ssidinf/;"	f	class:WPEFramework::Plugin::wifiManager	typeref:typename:bool
addToKnownSSIDs	gdbus/NetworkManagerGdbusClient.cpp	/^        bool NetworkManagerClient::addToKnownSSIDs(const Exchange::INetworkManager::WiFiConnectT/;"	f	class:WPEFramework::Plugin::NetworkManagerClient	typeref:typename:bool
addToKnownSSIDsCb	NetworkManagerGnomeWIFI.cpp	/^        static void addToKnownSSIDsCb(GObject *client, GAsyncResult *result, gpointer user_data)$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:void	file:
addToKnownSSIDsUpdateCb	NetworkManagerGnomeWIFI.cpp	/^         static void addToKnownSSIDsUpdateCb(GObject *rmObject, GAsyncResult *res, gpointer user/;"	f	namespace:WPEFramework::Plugin	typeref:typename:void	file:
addr	NetworkManagerStunClient.h	/^    inline sockaddr_storage addr() const {$/;"	f	class:stun::attributes::address	typeref:typename:sockaddr_storage
address	NetworkManagerStunClient.cpp	/^attributes::address::address(attribute const & attr)$/;"	f	class:stun::attributes::address
address	NetworkManagerStunClient.h	/^  class address {$/;"	c	namespace:stun::attributes
af_inet	NetworkManagerStunClient.h	/^  af_inet,$/;"	e	enum:stun::protocol
af_inet6	NetworkManagerStunClient.h	/^  af_inet6$/;"	e	enum:stun::protocol
allNetworkInterfaces	NetworkManagerRDKProxy.cpp	/^        char allNetworkInterfaces[INTERFACE_LIST];$/;"	m	union:_IARM_BUS_NetSrvMgr_Iface_EventData_t::__anon7d34ee9e0b0a	typeref:typename:char[]	file:
apInfo	gdbus/NetworkManagerGdbusUtils.h	/^struct apInfo {$/;"	s
apToJsonObject	NetworkManagerGnomeUtils.cpp	/^       bool nmUtils::apToJsonObject(NMAccessPoint *ap, JsonObject& ssidObj)$/;"	f	class:WPEFramework::Plugin::nmUtils	typeref:typename:bool
attribute	NetworkManagerStunClient.h	/^struct attribute {$/;"	s	namespace:stun
attribute_type	NetworkManagerStunClient.h	/^namespace attribute_type {$/;"	n	namespace:stun
attributes	NetworkManagerStunClient.h	/^  inline std::vector<attribute> const & attributes() const {$/;"	f	class:stun::message	typeref:typename:std::vector<attribute> const &
attributes	NetworkManagerStunClient.h	/^namespace attributes {$/;"	n	namespace:stun
autoconfig	INetworkManager.h	/^                bool autoconfig     \/* @text: autoconfig *\/;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::IPAddress	typeref:typename:bool
autoconfig	NetworkManager.json	/^                    "autoconfig": {$/;"	o	object:methods.GetIPSettings.result.properties
autoconfig	NetworkManager.json	/^                    "autoconfig": {$/;"	o	object:methods.SetIPSettings.params.properties
autoconfig	NetworkManager.json	/^        "autoconfig": {$/;"	o	object:definitions
autoconfig	NetworkManagerRDKProxy.cpp	/^    bool autoconfig;$/;"	m	struct:__anon7d34ee9e0308	typeref:typename:bool	file:
autostart	LegacyPlugin_NetworkAPIs.conf.in	/^autostart = "true"$/;"	k
autostart	LegacyPlugin_WiFiManagerAPIs.conf.in	/^autostart = "true"$/;"	k
autostart	NetworkManager.conf.in	/^autostart = "true"$/;"	k
backOffTime	NetworkManagerRDKProxy.cpp	/^            float backOffTime;$/;"	m	struct:_IARM_BUS_WiFiSrvMgr_EventData_t::__anon7d34ee9e0c0a::_WIFI_LNF_STATE	typeref:typename:float	file:
band	NetworkManagerRDKProxy.cpp	/^    char band[BUFF_MIN];      \/**< The frequency band at which the client is conneted to. *\/$/;"	m	struct:_WiFiConnectedSSIDInfo	typeref:typename:char[]	file:
baseTimer	NetworkManagerTimer.h	/^                WPEFramework::Core::TimerType<NetworkManagerTimerJob> baseTimer;$/;"	m	class:WPEFramework::Plugin::NetworkManagerTimer	typeref:typename:WPEFramework::Core::TimerType<NetworkManagerTimerJob>
bind	NetworkManagerStunClient.cpp	/^bool client::bind($/;"	f	class:stun::client	typeref:typename:bool
bind_result	NetworkManagerStunClient.h	/^  bind_result() : public_ip() {}$/;"	f	struct:stun::bind_result
bind_result	NetworkManagerStunClient.h	/^struct bind_result {$/;"	s	namespace:stun
bind_timeout	NetworkManagerRDKProxy.cpp	/^    uint16_t bind_timeout;$/;"	m	struct:__anon7d34ee9e0808	typeref:typename:uint16_t	file:
binding_error_response	NetworkManagerStunClient.h	/^  static uint16_t constexpr binding_error_response = 0x0111;$/;"	v	namespace:stun::message_type	typeref:typename:uint16_t 
binding_request	NetworkManagerStunClient.h	/^  static uint16_t constexpr binding_request = 0x001;$/;"	v	namespace:stun::message_type	typeref:typename:uint16_t 
binding_requests_max	NetworkManagerStunClient.cpp	/^  static int constexpr binding_requests_max = 9;$/;"	v	namespace:stun::details	typeref:typename:int 	file:
binding_requests_wait_time_max	NetworkManagerStunClient.cpp	/^  static std::chrono::milliseconds binding_requests_wait_time_max(1600);$/;"	v	namespace:stun::details	typeref:typename:std::chrono::milliseconds	file:
binding_response	NetworkManagerStunClient.h	/^  static uint16_t constexpr binding_response = 0x0101;$/;"	v	namespace:stun::message_type	typeref:typename:uint16_t 
bitrate	gdbus/NetworkManagerGdbusUtils.h	/^    guint32 bitrate;$/;"	m	struct:apInfo	typeref:typename:guint32
bssid	INetworkManager.h	/^                    string             bssid;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::WiFiSSIDInfo	typeref:typename:string
bssid	NetworkManager.json	/^                    "bssid": {$/;"	o	object:methods.GetConnectedSSID.result.properties
bssid	NetworkManager.json	/^        "bssid":{$/;"	o	object:definitions
bssid	NetworkManagerGnomeWIFI.h	/^    char bssid[32];$/;"	m	struct:_wifi_wps_pbc_ap	typeref:typename:char[32]
bssid	NetworkManagerRDKProxy.cpp	/^    char bssid[BSSID_BUFF];    \/**< The the Basic Service Set ID (mac address). *\/$/;"	m	struct:_WiFiPairedSSIDInfo	typeref:typename:char[]	file:
bssid	NetworkManagerRDKProxy.cpp	/^    char bssid[BSSID_BUFF];   \/**< The the Basic Service Set ID (mac address). *\/$/;"	m	struct:_WiFiConnectedSSIDInfo	typeref:typename:char[]	file:
bssid	NetworkManagerRDKProxy.cpp	/^    char bssid[BSSID_BUFF];$/;"	m	struct:_WiFiConnection	typeref:typename:char[]	file:
bssid	gdbus/NetworkManagerGdbusUtils.h	/^    string bssid;$/;"	m	struct:apInfo	typeref:typename:string
buffer	NetworkManagerStunClient.h	/^using buffer = std::vector<uint8_t>;$/;"	t	namespace:stun	typeref:typename:std::vector<uint8_t>
ca_cert	INetworkManager.h	/^                    string           ca_cert;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::WiFiConnectTo	typeref:typename:string
ca_cert	NetworkManager.json	/^                    "ca_cert": {$/;"	o	object:methods.WiFiConnect.params.properties
cacheLifetime	NetworkManager.json	/^                    "cacheLifetime": {$/;"	o	object:methods.GetStunEndpoint.result.properties
cacheLifetime	NetworkManager.json	/^                    "cacheLifetime": {$/;"	o	object:methods.SetStunEndpoint.params.properties
cacheLifetime	NetworkManager.json	/^        "cacheLifetime":{$/;"	o	object:definitions
cache_timeout	NetworkManagerRDKProxy.cpp	/^    uint16_t cache_timeout;$/;"	m	struct:__anon7d34ee9e0808	typeref:typename:uint16_t	file:
callsign	LegacyPlugin_NetworkAPIs.conf.in	/^callsign = "org.rdk.Network"$/;"	k
callsign	LegacyPlugin_WiFiManagerAPIs.conf.in	/^callsign = "org.rdk.Wifi"$/;"	k
callsign	NetworkManager.conf.in	/^callsign= "org.rdk.NetworkManager"$/;"	k
callsign	NetworkManager.json	/^        "callsign": "org.rdk.NetworkManager",$/;"	s	object:info
cancelWPS	NetworkManagerGnomeWIFI.cpp	/^        bool wifiManager::cancelWPS()$/;"	f	class:WPEFramework::Plugin::wifiManager	typeref:typename:bool
cancelWPSPairing	LegacyPlugin_WiFiManagerAPIs.cpp	/^        uint32_t WiFiManager::cancelWPSPairing (const JsonObject& parameters, JsonObject& respon/;"	f	class:WPEFramework::Plugin::WiFiManager	typeref:typename:uint32_t
captivePortalURI	NetworkManagerConnectivity.h	/^            std::string captivePortalURI;$/;"	m	class:WPEFramework::Plugin::TestConnectivity	typeref:typename:std::string
carootcert	NetworkManagerRDKProxy.cpp	/^    char carootcert[MAX_FILE_PATH_LEN];$/;"	m	struct:_WiFiConnection	typeref:typename:char[]	file:
caseInsensitiveCompare	LegacyPlugin_NetworkAPIs.cpp	/^        static bool caseInsensitiveCompare(const std::string& str1, const char* str2)$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:bool	file:
caseInsensitiveCompare	NetworkManagerGnomeUtils.cpp	/^        bool nmUtils::caseInsensitiveCompare(const std::string& str1, const std::string& str2) {$/;"	f	class:WPEFramework::Plugin::nmUtils	typeref:typename:bool
change_request	NetworkManagerStunClient.h	/^  static uint16_t constexpr change_request = 0x0003;$/;"	v	namespace:stun::attribute_type	typeref:typename:uint16_t 
changed_address	NetworkManagerStunClient.h	/^    changed_address(attribute const & attr) : address(attr) { }$/;"	f	struct:stun::attributes::changed_address
changed_address	NetworkManagerStunClient.h	/^  static uint16_t constexpr changed_address = 0x005;$/;"	v	namespace:stun::attribute_type	typeref:typename:uint16_t 
changed_address	NetworkManagerStunClient.h	/^  struct changed_address : public address {$/;"	s	namespace:stun::attributes
checkAutoConnectEnabledInIPv4Conn	NetworkManagerGnomeWIFI.cpp	/^        bool static checkAutoConnectEnabledInIPv4Conn(NMConnection *connection)$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:bool	file:
checkCurlResponse	NetworkManagerConnectivity.cpp	/^    Exchange::INetworkManager::InternetStatus TestConnectivity::checkCurlResponse(const std::vec/;"	f	class:WPEFramework::Plugin::TestConnectivity	typeref:typename:Exchange::INetworkManager::InternetStatus
checkInternetStateFromResponseCode	NetworkManagerConnectivity.cpp	/^    Exchange::INetworkManager::InternetStatus TestConnectivity::checkInternetStateFromResponseCo/;"	f	class:WPEFramework::Plugin::TestConnectivity	typeref:typename:Exchange::INetworkManager::InternetStatus
checkSSIDAvailable	NetworkManagerGnomeWIFI.cpp	/^        static NMAccessPoint *checkSSIDAvailable(NMDevice *device, const char *ssid)$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:NMAccessPoint *	file:
class	NetworkManager.json	/^        "class": "NetworkManager",$/;"	s	object:info
clearSSID	LegacyPlugin_WiFiManagerAPIs.cpp	/^        uint32_t WiFiManager::clearSSID (const JsonObject& parameters, JsonObject& response)$/;"	f	class:WPEFramework::Plugin::WiFiManager	typeref:typename:uint32_t
clearSSID	NetworkManagerRDKProxy.cpp	/^        WiFiConnection clearSSID;$/;"	m	union:_IARM_Bus_WiFiSrvMgr_Param_t::__anon7d34ee9e0a0a	typeref:typename:WiFiConnection	file:
client	NetworkManagerGnomeEvents.h	/^        NMClient *client;$/;"	m	struct:WPEFramework::Plugin::__anon87bbc0eb0108	typeref:typename:NMClient *
client	NetworkManagerGnomeProxy.cpp	/^static NMClient *client = NULL;$/;"	v	typeref:typename:NMClient *	file:
client	NetworkManagerStunClient.cpp	/^client::client()$/;"	f	class:stun::client
client	NetworkManagerStunClient.h	/^class client {$/;"	c	namespace:stun
clientStateChangedCb	NetworkManagerGnomeEvents.cpp	/^    static void clientStateChangedCb (NMClient *client, GParamSpec *pspec, gpointer user_data)$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:void	file:
client_cert	INetworkManager.h	/^                    string           client_cert;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::WiFiConnectTo	typeref:typename:string
client_cert	NetworkManager.json	/^                    "client_cert": {$/;"	o	object:methods.WiFiConnect.params.properties
clientcert	NetworkManagerRDKProxy.cpp	/^    char clientcert[MAX_FILE_PATH_LEN];$/;"	m	struct:_WiFiConnection	typeref:typename:char[]	file:
cm	Tests/unit_test/test_NetworkManagerConnectivity.cpp	/^   WPEFramework::Plugin::ConnectivityMonitor cm;$/;"	m	class:ConnectivityMonitorTest	typeref:typename:WPEFramework::Plugin::ConnectivityMonitor	file:
code	NetworkManagerRDKProxy.cpp	/^            WiFiErrorCode_t code;$/;"	m	struct:_IARM_BUS_WiFiSrvMgr_EventData_t::__anon7d34ee9e0c0a::_WIFI_ERROR	typeref:typename:WiFiErrorCode_t	file:
configuration	NetworkManager.conf.in	/^configuration = JSON()$/;"	k
connect	LegacyPlugin_WiFiManagerAPIs.cpp	/^        uint32_t WiFiManager::connect(const JsonObject& parameters, JsonObject& response)$/;"	f	class:WPEFramework::Plugin::WiFiManager	typeref:typename:uint32_t
connect	NetworkManagerRDKProxy.cpp	/^        WiFiConnection connect;$/;"	m	union:_IARM_Bus_WiFiSrvMgr_Param_t::__anon7d34ee9e0a0a	typeref:typename:WiFiConnection	file:
connect	NetworkManagerTimer.h	/^                void connect(std::function<void()> callback)$/;"	f	class:WPEFramework::Plugin::NetworkManagerTimer	typeref:typename:void
connected	INetworkManager.h	/^                bool          connected;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::InterfaceDetails	typeref:typename:bool
connected	NetworkManager.json	/^                                "connected":{$/;"	o	object:methods.GetAvailableInterfaces.result.properties.interfaces.items.properties
connected	NetworkManager.json	/^                    "connected": {$/;"	o	object:methods.IsConnectedToInternet.result.properties
connection	gdbus/NetworkManagerGdbusMgr.h	/^                GDBusConnection* connection;$/;"	m	class:WPEFramework::Plugin::DbusMgr	typeref:typename:GDBusConnection *
connectionBuilder	NetworkManagerGnomeWIFI.cpp	/^        static bool connectionBuilder(const Exchange::INetworkManager::WiFiConnectTo& ssidinfo, /;"	f	namespace:WPEFramework::Plugin	typeref:typename:bool	file:
connectionBuilder	gdbus/NetworkManagerGdbusClient.cpp	/^        static bool connectionBuilder(const Exchange::INetworkManager::WiFiConnectTo& ssidinfo, /;"	f	namespace:WPEFramework::Plugin	typeref:typename:bool	file:
connectionType	NetworkManagerRDKProxy.cpp	/^        WiFiConnectionTypeCode_t connectionType;$/;"	m	union:_IARM_Bus_WiFiSrvMgr_Param_t::__anon7d34ee9e0a0a	typeref:typename:WiFiConnectionTypeCode_t	file:
connectivity	NetworkManager.conf.in	/^connectivity = JSON()$/;"	k
connectivityConf	NetworkManagerImplementation.h	/^                ConnectivityConf connectivityConf;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation::Configuration	typeref:typename:ConnectivityConf
connectivityMonitor	NetworkManagerImplementation.h	/^                mutable ConnectivityMonitor connectivityMonitor;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:ConnectivityMonitor
connectivityMonitorFunction	NetworkManagerConnectivity.cpp	/^    void ConnectivityMonitor::connectivityMonitorFunction()$/;"	f	class:WPEFramework::Plugin::ConnectivityMonitor	typeref:typename:void
convertPercentageToSignalStrengtStr	NetworkManagerGnomeUtils.cpp	/^        const char* nmUtils::convertPercentageToSignalStrengtStr(int percentage) {$/;"	f	class:WPEFramework::Plugin::nmUtils	typeref:typename:const char *
convertPercentageToSignalStrengtStr	gdbus/NetworkManagerGdbusUtils.cpp	/^        const char* GnomeUtils::convertPercentageToSignalStrengtStr(int percentage) {$/;"	f	class:WPEFramework::Plugin::GnomeUtils	typeref:typename:const char *
convertSsidInfoToJsonObject	gdbus/NetworkManagerGdbusUtils.cpp	/^        bool GnomeUtils::convertSsidInfoToJsonObject(Exchange::INetworkManager::WiFiSSIDInfo& wi/;"	f	class:WPEFramework::Plugin::GnomeUtils	typeref:typename:bool
convertUrIToDomainName	NetworkManagerConnectivity.cpp	/^    std::string DnsResolver::convertUrIToDomainName(std::string& url)$/;"	f	class:WPEFramework::Plugin::DnsResolver	typeref:typename:std::string
count	NetworkManager.json	/^                    "count": {$/;"	o	object:methods.Ping.params.properties
count	NetworkManager.json	/^        "count": {$/;"	o	object:definitions
createClientNewConnection	NetworkManagerGnomeWIFI.cpp	/^        bool wifiManager::createClientNewConnection()$/;"	f	class:WPEFramework::Plugin::wifiManager	typeref:typename:bool
create_binding_request	NetworkManagerStunClient.cpp	/^message * message_factory::create_binding_request()$/;"	f	class:stun::message_factory	typeref:typename:message *
create_udp_socket	NetworkManagerStunClient.cpp	/^void client::create_udp_socket(int inet_family)$/;"	f	class:stun::client	typeref:typename:void
curSsids	NetworkManagerRDKProxy.cpp	/^    wifiSsidData_t curSsids;$/;"	m	struct:_IARM_Bus_WiFiSrvMgr_SsidList_Param_t	typeref:typename:wifiSsidData_t	file:
curlErrorCode	NetworkManagerConnectivity.h	/^            int curlErrorCode = 0;$/;"	m	class:WPEFramework::Plugin::TestConnectivity	typeref:typename:int
curlSetOpt	NetworkManagerConnectivity.h	/^            void curlSetOpt(CURL *curl, CURLoption option, curlValue value)$/;"	f	class:WPEFramework::Plugin::TestConnectivity	typeref:typename:void
curlVerboseEnabled	NetworkManagerConnectivity.cpp	/^    static bool curlVerboseEnabled() {$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:bool	file:
current_time	NetworkManagerConnectivity.cpp	/^    static long current_time ()$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:long	file:
data	NetworkManagerRDKProxy.cpp	/^    } data;$/;"	m	struct:_IARM_BUS_WiFiSrvMgr_EventData_t	typeref:union:_IARM_BUS_WiFiSrvMgr_EventData_t::__anon7d34ee9e0c0a	file:
data	NetworkManagerRDKProxy.cpp	/^    } data;$/;"	m	struct:_IARM_Bus_WiFiSrvMgr_Param_t	typeref:union:_IARM_Bus_WiFiSrvMgr_Param_t::__anon7d34ee9e0a0a	file:
decode_attr	NetworkManagerStunClient.cpp	/^attribute decoder::decode_attr(buffer const & buff, size_t * offset)$/;"	f	class:stun::decoder	typeref:typename:attribute
decode_message	NetworkManagerStunClient.cpp	/^message * decoder::decode_message(buffer const & buff, size_t * offset)$/;"	f	class:stun::decoder	typeref:typename:message *
decode_u16	NetworkManagerStunClient.cpp	/^uint16_t decoder::decode_u16(buffer const & buff, size_t * offset)$/;"	f	class:stun::decoder	typeref:typename:uint16_t
decode_u32	NetworkManagerStunClient.cpp	/^uint32_t decoder::decode_u32(buffer const & buff, size_t * offset)$/;"	f	class:stun::decoder	typeref:typename:uint32_t
decoder	NetworkManagerStunClient.h	/^class decoder final {$/;"	c	namespace:stun
definitions	NetworkManager.json	/^    "definitions": {$/;"	o
deleteConnection	gdbus/NetworkManagerGdbusClient.cpp	/^        static bool deleteConnection(DbusMgr m_dbus, const std::string& path, std::string& ssid)$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:bool	file:
description	NetworkManager.json	/^        "description": "A Unified `NetworkManager` plugin that allows you to manage Ethernet and/;"	s	object:info
details	NetworkManagerStunClient.cpp	/^namespace details {$/;"	n	namespace:stun	file:
device	NetworkManagerGnomeEvents.h	/^        NMDevice *device;$/;"	m	struct:WPEFramework::Plugin::__anon87bbc0eb0108	typeref:typename:NMDevice *
deviceAddRemoveCb	gdbus/NetworkManagerGdbusEvent.cpp	/^    static void deviceAddRemoveCb(GDBusProxy *proxy, gchar *senderName, gchar *signalName,$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:void	file:
deviceAddedCB	NetworkManagerGnomeEvents.cpp	/^    static void deviceAddedCB(NMClient *client, NMDevice *device, NMEvents *nmEvents)$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:void	file:
deviceInfo	gdbus/NetworkManagerGdbusUtils.h	/^struct deviceInfo$/;"	s
deviceManagedCb	NetworkManagerGnomeWIFI.cpp	/^        static void deviceManagedCb(GObject *object, GAsyncResult *result, gpointer user_data)$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:void	file:
deviceRemovedCB	NetworkManagerGnomeEvents.cpp	/^    static void deviceRemovedCB(NMClient *client, NMDevice *device, NMEvents *nmEvents)$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:void	file:
deviceStateChangeCb	NetworkManagerGnomeEvents.cpp	/^    static void deviceStateChangeCb(NMDevice *device, GParamSpec *pspec, NMEvents *nmEvents)$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:void	file:
deviceStateChangedCB	gdbus/NetworkManagerGdbusEvent.cpp	/^    static void deviceStateChangedCB(GDBusProxy *proxy, gchar *senderName, gchar *signalName,$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:void	file:
deviceType	gdbus/NetworkManagerGdbusUtils.h	/^    NMDeviceType deviceType;$/;"	m	struct:deviceInfo	typeref:typename:NMDeviceType
dhcpserver	INetworkManager.h	/^                string dhcpserver   \/* @text: dhcpserver *\/;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::IPAddress	typeref:typename:string
dhcpserver	NetworkManager.json	/^                    "dhcpserver": {$/;"	o	object:methods.GetIPSettings.result.properties
dhcpserver	NetworkManager.json	/^        "dhcpserver": {$/;"	o	object:definitions
dhcpserver	NetworkManagerRDKProxy.cpp	/^    char dhcpserver[MAX_IP_ADDRESS_LEN];$/;"	m	struct:__anon7d34ee9e0308	typeref:typename:char[]	file:
disableConnectivityTest	NetworkManagerRDKProxy.cpp	/^    bool disableConnectivityTest;$/;"	m	struct:__anon7d34ee9e0908	typeref:typename:bool	file:
disconnect	LegacyPlugin_WiFiManagerAPIs.cpp	/^        uint32_t WiFiManager::disconnect (const JsonObject& parameters, JsonObject& response)$/;"	f	class:WPEFramework::Plugin::WiFiManager	typeref:typename:uint32_t
disconnectCb	NetworkManagerGnomeWIFI.cpp	/^        static void disconnectCb(GObject *object, GAsyncResult *result, gpointer user_data)$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:void	file:
discover_network_access_type	NetworkManagerStunClient.cpp	/^network_access_type client::discover_network_access_type(server const & srv)$/;"	f	class:stun::client	typeref:typename:network_access_type
displayMenu	Tests/raspberrypi/NetworkManagerGdbusTest.cpp	/^void displayMenu()$/;"	f	typeref:typename:void
doPing	LegacyPlugin_NetworkAPIs.cpp	/^        uint32_t Network::doPing(const JsonObject& parameters, JsonObject& response)$/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:uint32_t
doScanNotify	NetworkManagerGnomeEvents.h	/^        std::atomic<bool>doScanNotify = {false};$/;"	m	class:WPEFramework::Plugin::GnomeNetworkManagerEvents	typeref:typename:std::atomic<bool>
doScanNotify	gdbus/NetworkManagerGdbusEvent.h	/^        std::atomic<bool>doScanNotify = {true};$/;"	m	class:WPEFramework::Plugin::NetworkManagerEvents	typeref:typename:std::atomic<bool>
doTrace	LegacyPlugin_NetworkAPIs.cpp	/^        uint32_t Network::doTrace(const JsonObject& parameters, JsonObject& response)$/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:uint32_t
dump_buffer	NetworkManagerStunClient.cpp	/^  void dump_buffer(char const * prefix, buffer const & buff)$/;"	f	namespace:stun::details	typeref:typename:void
eap	INetworkManager.h	/^                    string           eap;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::WiFiConnectTo	typeref:typename:string
eap	NetworkManager.json	/^                    "eap": {$/;"	o	object:methods.WiFiConnect.params.properties
eapIdentity	NetworkManagerRDKProxy.cpp	/^    char eapIdentity[BUFF_LENGTH_256];$/;"	m	struct:_WiFiConnection	typeref:typename:char[]	file:
eap_identity	INetworkManager.h	/^                    string           eap_identity;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::WiFiConnectTo	typeref:typename:string
eap_identity	NetworkManager.json	/^                    "eap_identity": {$/;"	o	object:methods.WiFiConnect.params.properties
eap_password	INetworkManager.h	/^                    string           eap_password;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::WiFiConnectTo	typeref:typename:string
eap_password	NetworkManager.json	/^                    "eap_password": {$/;"	o	object:methods.WiFiConnect.params.properties
eap_phase1	INetworkManager.h	/^                    string           eap_phase1;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::WiFiConnectTo	typeref:typename:string
eap_phase1	NetworkManager.json	/^                    "eap_phase1": {$/;"	o	object:methods.WiFiConnect.params.properties
eap_phase2	INetworkManager.h	/^                    string           eap_phase2;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::WiFiConnectTo	typeref:typename:string
eap_phase2	NetworkManager.json	/^                    "eap_phase2": {$/;"	o	object:methods.WiFiConnect.params.properties
enable	NetworkManagerRDKProxy.cpp	/^    bool enable;$/;"	m	struct:_setWiFiAdapter	typeref:typename:bool	file:
enabled	INetworkManager.h	/^                bool          enabled;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::InterfaceDetails	typeref:typename:bool
enabled	NetworkManager.json	/^                                "enabled":{$/;"	o	object:methods.GetAvailableInterfaces.result.properties.interfaces.items.properties
enabled	NetworkManager.json	/^                    "enabled":{$/;"	o	object:methods.GetInterfaceState.result.properties
enabled	NetworkManager.json	/^                    "enabled":{$/;"	o	object:methods.SetInterfaceState.params.properties
encode	NetworkManagerStunClient.cpp	/^buffer message::encode() const$/;"	f	class:stun::message	typeref:typename:buffer
encode_u16	NetworkManagerStunClient.cpp	/^void encoder::encode_u16(buffer & buff, uint16_t n)$/;"	f	class:stun::encoder	typeref:typename:void
encode_u32	NetworkManagerStunClient.cpp	/^void encoder::encode_u32(buffer & buff, uint32_t n)$/;"	f	class:stun::encoder	typeref:typename:void
encoder	NetworkManagerStunClient.h	/^class encoder final {$/;"	c	namespace:stun
endpoint	NetworkManager.json	/^                    "endpoint": {$/;"	o	object:methods.GetStunEndpoint.result.properties
endpoint	NetworkManager.json	/^                    "endpoint": {$/;"	o	object:methods.SetStunEndpoint.params.properties
endpoint	NetworkManager.json	/^                    "endpoint":{$/;"	o	object:methods.Ping.params.properties
endpoint	NetworkManager.json	/^                    "endpoint":{$/;"	o	object:methods.Ping.result.properties
endpoint	NetworkManager.json	/^                    "endpoint":{$/;"	o	object:methods.Trace.params.properties
endpoint	NetworkManager.json	/^                    "endpoint":{$/;"	o	object:methods.Trace.result.properties
endpoint	NetworkManager.json	/^        "endpoint":{$/;"	o	object:definitions
endpoint_1	NetworkManagerImplementation.h	/^                    Core::JSON::String endpoint_1;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation::ConnectivityConf	typeref:typename:Core::JSON::String
endpoint_2	NetworkManagerImplementation.h	/^                    Core::JSON::String endpoint_2;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation::ConnectivityConf	typeref:typename:Core::JSON::String
endpoint_3	NetworkManagerImplementation.h	/^                    Core::JSON::String endpoint_3;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation::ConnectivityConf	typeref:typename:Core::JSON::String
endpoint_4	NetworkManagerImplementation.h	/^                    Core::JSON::String endpoint_4;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation::ConnectivityConf	typeref:typename:Core::JSON::String
endpoint_5	NetworkManagerImplementation.h	/^                    Core::JSON::String endpoint_5;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation::ConnectivityConf	typeref:typename:Core::JSON::String
endpoints	NetworkManager.json	/^                    "endpoints": {$/;"	o	object:methods.GetConnectivityTestEndpoints.result.properties
endpoints	NetworkManager.json	/^                    "endpoints": {$/;"	o	object:methods.SetConnectivityTestEndpoints.params.properties
enum	NetworkManager.json	/^                        "enum": [$/;"	a	object:events.onAddressChange.params.properties.status
errCode	NetworkManagerRDKProxy.cpp	/^    NetworkManager_GetIPSettings_ErrorCode_t errCode;$/;"	m	struct:__anon7d34ee9e0308	typeref:typename:NetworkManager_GetIPSettings_ErrorCode_t	file:
error	NetworkManager.json	/^                    "error": {$/;"	o	object:methods.Ping.result.properties
error_code	NetworkManagerStunClient.h	/^  static uint16_t constexpr error_code = 0x0009;$/;"	v	namespace:stun::attribute_type	typeref:typename:uint16_t 
errorcode_to_wifi_state	NetworkManagerRDKProxy.cpp	/^        Exchange::INetworkManager::WiFiState errorcode_to_wifi_state(WiFiErrorCode_t code) {$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:Exchange::INetworkManager::WiFiState
errors	NetworkManager.json	/^        "errors": {$/;"	o	object:definitions
ethDevicePath	gdbus/NetworkManagerGdbusEvent.h	/^        std::string ethDevicePath;$/;"	m	struct:WPEFramework::Plugin::__anoncc38525b0108	typeref:typename:std::string
ethIPv4Proxy	gdbus/NetworkManagerGdbusEvent.h	/^        GDBusProxy *ethIPv4Proxy;$/;"	m	struct:WPEFramework::Plugin::__anoncc38525b0108	typeref:typename:GDBusProxy *
ethIPv6Proxy	gdbus/NetworkManagerGdbusEvent.h	/^        GDBusProxy *ethIPv6Proxy;$/;"	m	struct:WPEFramework::Plugin::__anoncc38525b0108	typeref:typename:GDBusProxy *
ethIface	NetworkManagerGnomeUtils.cpp	/^        const char* nmUtils::ethIface() {return m_ethifname.c_str();}$/;"	f	class:WPEFramework::Plugin::nmUtils	typeref:typename:const char *
ethIfname	gdbus/NetworkManagerGdbusEvent.h	/^        char ethIfname[16];$/;"	m	class:WPEFramework::Plugin::NetworkManagerEvents	typeref:typename:char[16]
eventDbus	gdbus/NetworkManagerGdbusEvent.h	/^        DbusMgr eventDbus;$/;"	m	class:WPEFramework::Plugin::NetworkManagerEvents	typeref:typename:DbusMgr
eventThrdID	NetworkManagerGnomeEvents.h	/^        GThread *eventThrdID;$/;"	m	class:WPEFramework::Plugin::GnomeNetworkManagerEvents	typeref:typename:GThread *
eventThrdID	gdbus/NetworkManagerGdbusEvent.h	/^        GThread *eventThrdID;$/;"	m	class:WPEFramework::Plugin::NetworkManagerEvents	typeref:typename:GThread *
events	NetworkManager.json	/^            "events": {$/;"	o	object:methods.StartWiFiScan
events	NetworkManager.json	/^            "events":{$/;"	o	object:methods.GetWiFiSignalStrength
events	NetworkManager.json	/^            "events":{$/;"	o	object:methods.RemoveKnownSSID
events	NetworkManager.json	/^            "events":{$/;"	o	object:methods.SetIPSettings
events	NetworkManager.json	/^            "events":{$/;"	o	object:methods.SetInterfaceState
events	NetworkManager.json	/^            "events":{$/;"	o	object:methods.SetPrimaryInterface
events	NetworkManager.json	/^            "events":{$/;"	o	object:methods.StartWPS
events	NetworkManager.json	/^            "events":{$/;"	o	object:methods.StopWPS
events	NetworkManager.json	/^            "events":{$/;"	o	object:methods.WiFiConnect
events	NetworkManager.json	/^            "events":{$/;"	o	object:methods.WiFiDisconnect
events	NetworkManager.json	/^    "events": {$/;"	o
example	NetworkManager.json	/^                                    "example": "AA:AA:AA:AA:AA:AA"$/;"	s	object:methods.GetAvailableInterfaces.result.properties.interfaces.items.properties.mac
example	NetworkManager.json	/^                                    "example": "ETHERNET"$/;"	s	object:methods.GetAvailableInterfaces.result.properties.interfaces.items.properties.type
example	NetworkManager.json	/^                                    "example": "eth0"$/;"	s	object:methods.GetAvailableInterfaces.result.properties.interfaces.items.properties.name
example	NetworkManager.json	/^                                    "example": "myAP-2.4"$/;"	s	object:events.onAvailableSSIDs.params.properties.ssids.items.properties.ssid
example	NetworkManager.json	/^                                    "example": true$/;"	b	object:methods.GetAvailableInterfaces.result.properties.interfaces.items.properties.connected
example	NetworkManager.json	/^                                    "example": true$/;"	b	object:methods.GetAvailableInterfaces.result.properties.interfaces.items.properties.enabled
example	NetworkManager.json	/^                                "example": 0 $/;"	n	object:methods.GetSupportedsecurityModes.result.properties.security_modes.properties.NONE
example	NetworkManager.json	/^                                "example": 1$/;"	n	object:methods.GetSupportedsecurityModes.result.properties.security_modes.properties.WPA_PSK
example	NetworkManager.json	/^                                "example": 2$/;"	n	object:methods.GetSupportedsecurityModes.result.properties.security_modes.properties.SAE
example	NetworkManager.json	/^                                "example": 3$/;"	n	object:methods.GetSupportedsecurityModes.result.properties.security_modes.properties.EAP
example	NetworkManager.json	/^                            "example": "Xfinity Mobile"$/;"	s	object:methods.StartWiFiScan.params.properties.ssids.items
example	NetworkManager.json	/^                            "example": "Xfinity_Guest"$/;"	s	object:methods.GetKnownSSIDs.result.properties.ssids.items
example	NetworkManager.json	/^                            "example": "http:\/\/clients3.google.com\/generate_204"$/;"	s	object:methods.GetConnectivityTestEndpoints.result.properties.endpoints.items
example	NetworkManager.json	/^                            "example": "http:\/\/clients3.google.com\/generate_204"$/;"	s	object:methods.SetConnectivityTestEndpoints.params.properties.endpoints.items
example	NetworkManager.json	/^                        "example": "-121.000000"$/;"	s	object:methods.GetConnectedSSID.result.properties.noise
example	NetworkManager.json	/^                        "example": "..."$/;"	s	object:methods.Ping.result.properties.error
example	NetworkManager.json	/^                        "example": "..."$/;"	s	object:methods.Ping.result.properties.guid
example	NetworkManager.json	/^                        "example": "..."$/;"	s	object:methods.Trace.result.properties.guid
example	NetworkManager.json	/^                        "example": "..."$/;"	s	object:methods.Trace.result.properties.results
example	NetworkManager.json	/^                        "example": "..."$/;"	s	object:methods.WiFiConnect.params.properties.ca_cert
example	NetworkManager.json	/^                        "example": "..."$/;"	s	object:methods.WiFiConnect.params.properties.client_cert
example	NetworkManager.json	/^                        "example": "..."$/;"	s	object:methods.WiFiConnect.params.properties.eap_identity
example	NetworkManager.json	/^                        "example": "..."$/;"	s	object:methods.WiFiConnect.params.properties.eap_password
example	NetworkManager.json	/^                        "example": "..."$/;"	s	object:methods.WiFiConnect.params.properties.eap_phase1
example	NetworkManager.json	/^                        "example": "..."$/;"	s	object:methods.WiFiConnect.params.properties.eap_phase2
example	NetworkManager.json	/^                        "example": "..."$/;"	s	object:methods.WiFiConnect.params.properties.private_key
example	NetworkManager.json	/^                        "example": "..."$/;"	s	object:methods.WiFiConnect.params.properties.private_key_passwd
example	NetworkManager.json	/^                        "example": "0.0"$/;"	s	object:methods.Ping.result.properties.packetLoss
example	NetworkManager.json	/^                        "example": "130.397"$/;"	s	object:methods.Ping.result.properties.tripAvg
example	NetworkManager.json	/^                        "example": "144.000000"$/;"	s	object:methods.GetConnectedSSID.result.properties.rate
example	NetworkManager.json	/^                        "example": "230.832"$/;"	s	object:methods.Ping.result.properties.tripMax
example	NetworkManager.json	/^                        "example": "5"$/;"	s	object:events.onWiFiStateChange.params.properties.state
example	NetworkManager.json	/^                        "example": "5"$/;"	s	object:methods.GetConnectedSSID.result.properties.security
example	NetworkManager.json	/^                        "example": "5"$/;"	s	object:methods.StartWiFiScan.params.properties.frequency
example	NetworkManager.json	/^                        "example": "61.264"$/;"	s	object:methods.Ping.result.properties.tripMin
example	NetworkManager.json	/^                        "example": "80.919"$/;"	s	object:methods.Ping.result.properties.tripStdDev
example	NetworkManager.json	/^                        "example": "88888888"$/;"	s	object:methods.StartWPS.params.properties.pin
example	NetworkManager.json	/^                        "example": "88888888"$/;"	s	object:methods.StartWPS.result.properties.pin
example	NetworkManager.json	/^                        "example": "ACQUIRED"$/;"	s	object:events.onAddressChange.params.properties.status
example	NetworkManager.json	/^                        "example": "FULLY_CONNECTED"$/;"	s	object:events.onInternetStatusChange.params.properties.status
example	NetworkManager.json	/^                        "example": "FULLY_CONNECTED"$/;"	s	object:methods.IsConnectedToInternet.result.properties.status
example	NetworkManager.json	/^                        "example": "INTERFACE_LINK_UP"$/;"	s	object:events.onInterfaceStateChange.params.properties.status
example	NetworkManager.json	/^                        "example": "NO_INTERNET"$/;"	s	object:events.onInternetStatusChange.params.properties.prevStatus
example	NetworkManager.json	/^                        "example": "PIN"$/;"	s	object:methods.StartWPS.params.properties.method
example	NetworkManager.json	/^                        "example": "TLS"$/;"	s	object:methods.WiFiConnect.params.properties.eap
example	NetworkManager.json	/^                        "example": "WIFI_STATE_CONNECTED"$/;"	s	object:events.onWiFiStateChange.params.properties.status
example	NetworkManager.json	/^                        "example": "WIFI_STATE_CONNECTED"$/;"	s	object:methods.GetWifiState.result.properties.status
example	NetworkManager.json	/^                        "example": "eth0" $/;"	s	object:events.onActiveInterfaceChange.params.properties.activeInterface
example	NetworkManager.json	/^                        "example": "http:\/\/10.0.0.1\/captiveportal.jst"$/;"	s	object:methods.GetCaptivePortalURI.result.properties.uri
example	NetworkManager.json	/^                        "example": "wlan0" $/;"	s	object:events.onActiveInterfaceChange.params.properties.prevActiveInterface
example	NetworkManager.json	/^                        "example": "wlan0"$/;"	s	object:methods.SetInterfaceState.params.properties.interface
example	NetworkManager.json	/^                        "example": 1$/;"	n	object:events.onInterfaceStateChange.params.properties.state
example	NetworkManager.json	/^                        "example": 1$/;"	n	object:events.onInternetStatusChange.params.properties.prevState
example	NetworkManager.json	/^                        "example": 1$/;"	n	object:methods.GetLogLevel.result.properties.level
example	NetworkManager.json	/^                        "example": 1$/;"	n	object:methods.SetLogLevel.params.properties.level
example	NetworkManager.json	/^                        "example": 10$/;"	n	object:methods.Ping.result.properties.packetsReceived
example	NetworkManager.json	/^                        "example": 10$/;"	n	object:methods.Ping.result.properties.packetsTransmitted
example	NetworkManager.json	/^                        "example": 3$/;"	n	object:methods.IsConnectedToInternet.result.properties.state
example	NetworkManager.json	/^                        "example": 4$/;"	n	object:events.onInternetStatusChange.params.properties.state
example	NetworkManager.json	/^                        "example": true$/;"	b	object:methods.GetInterfaceState.result.properties.enabled
example	NetworkManager.json	/^                        "example": true$/;"	b	object:methods.IsConnectedToInternet.result.properties.connected
example	NetworkManager.json	/^                        "example": true$/;"	b	object:methods.SetInterfaceState.params.properties.enabled
example	NetworkManager.json	/^                        "example": true$/;"	b	object:methods.WiFiConnect.params.properties.persist
example	NetworkManager.json	/^            "example": ""$/;"	s	object:definitions.errors
example	NetworkManager.json	/^            "example": ""$/;"	s	object:definitions.guid
example	NetworkManager.json	/^            "example": "-27.000000"$/;"	s	object:definitions.strength
example	NetworkManager.json	/^            "example": "0"$/;"	s	object:definitions.cacheLifetime
example	NetworkManager.json	/^            "example": "192.168.1.1"$/;"	s	object:definitions.dhcpserver
example	NetworkManager.json	/^            "example": "192.168.1.1"$/;"	s	object:definitions.gateway
example	NetworkManager.json	/^            "example": "192.168.1.1"$/;"	s	object:definitions.primarydns
example	NetworkManager.json	/^            "example": "192.168.1.101"$/;"	s	object:definitions.ipaddress
example	NetworkManager.json	/^            "example": "192.168.1.2"$/;"	s	object:definitions.secondarydns
example	NetworkManager.json	/^            "example": "2.442000"$/;"	s	object:definitions.frequency
example	NetworkManager.json	/^            "example": "30"$/;"	s	object:definitions.timeout
example	NetworkManager.json	/^            "example": "3478"$/;"	s	object:definitions.port
example	NetworkManager.json	/^            "example": "45.57.221.20"$/;"	s	object:definitions.endpoint
example	NetworkManager.json	/^            "example": "AA:BB:CC:DD:EE:FF"$/;"	s	object:definitions.bssid
example	NetworkManager.json	/^            "example": "Excellent"$/;"	s	object:definitions.quality
example	NetworkManager.json	/^            "example": "IPv4"$/;"	s	object:definitions.ipversion
example	NetworkManager.json	/^            "example": "d00:410:2016::"$/;"	s	object:definitions.ula
example	NetworkManager.json	/^            "example": "myHomeSSID"$/;"	s	object:definitions.ssid
example	NetworkManager.json	/^            "example": "password"$/;"	s	object:definitions.passphrase
example	NetworkManager.json	/^            "example": "true"$/;"	s	object:definitions.success
example	NetworkManager.json	/^            "example": "wlan0"$/;"	s	object:definitions.interface
example	NetworkManager.json	/^            "example": 10$/;"	n	object:definitions.count
example	NetworkManager.json	/^            "example": 10$/;"	n	object:definitions.packets
example	NetworkManager.json	/^            "example": 24$/;"	n	object:definitions.prefix
example	NetworkManager.json	/^            "example": 4$/;"	n	object:definitions.state
example	NetworkManager.json	/^            "example": 6$/;"	n	object:definitions.security
example	NetworkManager.json	/^            "example": true$/;"	b	object:definitions.autoconfig
executeExternally	NetworkManagerImplementation.cpp	/^        void NetworkManagerImplementation::executeExternally(NetworkEvents event, const string c/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:void
executeWpaCliCommand	NetworkManagerGnomeWIFI.cpp	/^        std::string wifiManager::executeWpaCliCommand(const std::string& wpaCliCommand) {$/;"	f	class:WPEFramework::Plugin::wifiManager	typeref:typename:std::string
family_to_string	NetworkManagerStunClient.cpp	/^  static char const * family_to_string(int family) {$/;"	f	namespace:stun::details	typeref:typename:char const *	file:
file_descriptor	NetworkManagerStunClient.cpp	/^    file_descriptor(int n) : m_fd(n) { }$/;"	f	class:stun::details::file_descriptor	file:
file_descriptor	NetworkManagerStunClient.cpp	/^  class file_descriptor {$/;"	c	namespace:stun::details	file:
filterScanResults	NetworkManagerImplementation.cpp	/^        void NetworkManagerImplementation::filterScanResults(JsonArray &ssids)$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:void
find_attribute	NetworkManagerStunClient.cpp	/^attribute const * message::find_attribute(uint16_t attr_type) const$/;"	f	class:stun::message	typeref:typename:attribute const *
flag	gdbus/NetworkManagerGdbusUtils.h	/^    NM80211ApFlags flag;$/;"	m	struct:apInfo	typeref:typename:NM80211ApFlags
flags	NetworkManagerRDKProxy.cpp	/^    unsigned int flags;$/;"	m	struct:__anon7d34ee9e0108	typeref:typename:unsigned int	file:
flags	gdbus/NetworkManagerGdbusMgr.h	/^                GDBusProxyFlags flags;$/;"	m	class:WPEFramework::Plugin::DbusMgr	typeref:typename:GDBusProxyFlags
frequency	INetworkManager.h	/^                    string             frequency;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::WiFiSSIDInfo	typeref:typename:string
frequency	INetworkManager.h	/^                    string           frequency;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::WiFiScanResults	typeref:typename:string
frequency	NetworkManager.json	/^                                "frequency":{$/;"	o	object:events.onAvailableSSIDs.params.properties.ssids.items.properties
frequency	NetworkManager.json	/^                    "frequency": {$/;"	o	object:methods.GetConnectedSSID.result.properties
frequency	NetworkManager.json	/^                    "frequency": {$/;"	o	object:methods.StartWiFiScan.params.properties
frequency	NetworkManager.json	/^        "frequency":{$/;"	o	object:definitions
frequency	NetworkManagerRDKProxy.cpp	/^    int  frequency;                    \/**< The Frequency wt which the client is connected to. /;"	m	struct:_WiFiConnectedSSIDInfo	typeref:typename:int	file:
frequency	gdbus/NetworkManagerGdbusUtils.h	/^    guint32 frequency;$/;"	m	struct:apInfo	typeref:typename:guint32
full_cone	NetworkManagerStunClient.h	/^  full_cone,$/;"	e	enum:stun::network_access_type
gDefaultLogLevel	NetworkManagerLogger.cpp	/^    static LogLevel gDefaultLogLevel = INFO_LEVEL;$/;"	v	namespace:NetworkManagerLogger	typeref:typename:LogLevel	file:
gateway	INetworkManager.h	/^                string gateway      \/* @text: gateway *\/;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::IPAddress	typeref:typename:string
gateway	NetworkManager.json	/^                    "gateway": {$/;"	o	object:methods.GetIPSettings.result.properties
gateway	NetworkManager.json	/^                    "gateway": {$/;"	o	object:methods.SetIPSettings.params.properties
gateway	NetworkManager.json	/^        "gateway": {$/;"	o	object:definitions
gateway	NetworkManagerRDKProxy.cpp	/^    char gateway[MAX_IP_ADDRESS_LEN];$/;"	m	struct:__anon7d34ee9e0308	typeref:typename:char[]	file:
gateway	NetworkManagerRDKProxy.cpp	/^    char gateway[MAX_IP_ADDRESS_LEN];$/;"	m	struct:__anon7d34ee9e0408	typeref:typename:char[]	file:
generateUUID	gdbus/NetworkManagerGdbusClient.cpp	/^        static inline std::string generateUUID()$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:std::string	file:
getApDetails	gdbus/NetworkManagerGdbusUtils.cpp	/^        bool GnomeUtils::getApDetails(DbusMgr& m_dbus, const char* apPath, Exchange::INetworkMan/;"	f	class:WPEFramework::Plugin::GnomeUtils	typeref:typename:bool
getApInfo	NetworkManagerGnomeWIFI.cpp	/^        static void getApInfo(NMAccessPoint *AccessPoint, Exchange::INetworkManager::WiFiSSIDInf/;"	f	namespace:WPEFramework::Plugin	typeref:typename:void	file:
getAvailableInterfaces	gdbus/NetworkManagerGdbusClient.cpp	/^        bool NetworkManagerClient::getAvailableInterfaces(std::vector<Exchange::INetworkManager:/;"	f	class:WPEFramework::Plugin::NetworkManagerClient	typeref:typename:bool
getAvailableSSIDs	gdbus/NetworkManagerGdbusClient.cpp	/^        bool NetworkManagerClient::getAvailableSSIDs(std::list<std::string>& ssids)$/;"	f	class:WPEFramework::Plugin::NetworkManagerClient	typeref:typename:bool
getCachedPropertyBoolean	gdbus/NetworkManagerGdbusUtils.cpp	/^        bool GnomeUtils::getCachedPropertyBoolean(GDBusProxy* proxy, const char* property, bool /;"	f	class:WPEFramework::Plugin::GnomeUtils	typeref:typename:bool
getCachedPropertyU	gdbus/NetworkManagerGdbusUtils.cpp	/^        bool GnomeUtils::getCachedPropertyU(GDBusProxy* proxy, const char* propertiy, uint32_t */;"	f	class:WPEFramework::Plugin::GnomeUtils	typeref:typename:bool
getCaptivePortal	NetworkManagerConnectivity.h	/^            std::string getCaptivePortal() {return captivePortalURI;}$/;"	f	class:WPEFramework::Plugin::TestConnectivity	typeref:typename:std::string
getCaptivePortalURI	LegacyPlugin_NetworkAPIs.cpp	/^        uint32_t Network::getCaptivePortalURI(const JsonObject& parameters, JsonObject& response/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:uint32_t
getCaptivePortalURI	NetworkManagerConnectivity.cpp	/^    std::string ConnectivityMonitor::getCaptivePortalURI()$/;"	f	class:WPEFramework::Plugin::ConnectivityMonitor	typeref:typename:std::string
getConnectedSSID	LegacyPlugin_WiFiManagerAPIs.cpp	/^        uint32_t WiFiManager::getConnectedSSID (const JsonObject& parameters, JsonObject& respon/;"	f	class:WPEFramework::Plugin::WiFiManager	typeref:typename:uint32_t
getConnectedSSID	NetworkManagerGnomeWIFI.cpp	/^        bool static getConnectedSSID(NMDevice *device, std::string& ssidin)$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:bool	file:
getConnectedSSID	NetworkManagerRDKProxy.cpp	/^        WiFiConnectedSSIDInfo_t getConnectedSSID;$/;"	m	union:_IARM_Bus_WiFiSrvMgr_Param_t::__anon7d34ee9e0a0a	typeref:typename:WiFiConnectedSSIDInfo_t	file:
getConnectedSSID	gdbus/NetworkManagerGdbusClient.cpp	/^        bool NetworkManagerClient::getConnectedSSID(Exchange::INetworkManager::WiFiSSIDInfo &ssi/;"	f	class:WPEFramework::Plugin::NetworkManagerClient	typeref:typename:bool
getConnection	gdbus/NetworkManagerGdbusMgr.cpp	/^        GDBusConnection* DbusMgr::getConnection()$/;"	f	class:WPEFramework::Plugin::DbusMgr	typeref:typename:GDBusConnection *
getConnectionPaths	gdbus/NetworkManagerGdbusUtils.cpp	/^        bool GnomeUtils::getConnectionPaths(DbusMgr& m_dbus, std::list<std::string>& pathsList)$/;"	f	class:WPEFramework::Plugin::GnomeUtils	typeref:typename:bool
getConnectivityMonitorEndpoints	NetworkManagerConnectivity.cpp	/^    std::vector<std::string> ConnectivityMonitor::getConnectivityMonitorEndpoints()$/;"	f	class:WPEFramework::Plugin::ConnectivityMonitor	typeref:typename:std::vector<std::string>
getConnectivityMonitorEndpoints	NetworkManagerConnectivity.cpp	/^    std::vector<std::string> EndpointManager::getConnectivityMonitorEndpoints()$/;"	f	class:WPEFramework::Plugin::EndpointManager	typeref:typename:std::vector<std::string>
getCurlError	NetworkManagerConnectivity.h	/^            int getCurlError(){return curlErrorCode;}$/;"	f	class:WPEFramework::Plugin::TestConnectivity	typeref:typename:int
getCurrentState	LegacyPlugin_WiFiManagerAPIs.cpp	/^        uint32_t WiFiManager::getCurrentState(const JsonObject& parameters, JsonObject& response/;"	f	class:WPEFramework::Plugin::WiFiManager	typeref:typename:uint32_t
getDefaultInterface	LegacyPlugin_NetworkAPIs.cpp	/^        uint32_t Network::getDefaultInterface (const JsonObject& parameters, JsonObject& respons/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:uint32_t
getDeviceByIpIface	gdbus/NetworkManagerGdbusUtils.cpp	/^        bool GnomeUtils::getDeviceByIpIface(DbusMgr& m_dbus, const gchar *ifaceName, std::string/;"	f	class:WPEFramework::Plugin::GnomeUtils	typeref:typename:bool
getDeviceInfoByIfname	gdbus/NetworkManagerGdbusUtils.cpp	/^        bool GnomeUtils::getDeviceInfoByIfname(DbusMgr& m_dbus, const char* ifaceName, deviceInf/;"	f	class:WPEFramework::Plugin::GnomeUtils	typeref:typename:bool
getDevicePropertiesByPath	gdbus/NetworkManagerGdbusUtils.cpp	/^        bool GnomeUtils::getDevicePropertiesByPath(DbusMgr& m_dbus, const char* devicePath, devi/;"	f	class:WPEFramework::Plugin::GnomeUtils	typeref:typename:bool
getEthIfname	gdbus/NetworkManagerGdbusUtils.cpp	/^        const char* GnomeUtils::getEthIfname() { return ifnameEth; }$/;"	f	class:WPEFramework::Plugin::GnomeUtils	typeref:typename:const char *
getIPSettings	LegacyPlugin_NetworkAPIs.cpp	/^        uint32_t Network::getIPSettings (const JsonObject& parameters, JsonObject& response)$/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:uint32_t
getIPSettings	gdbus/NetworkManagerGdbusClient.cpp	/^        bool NetworkManagerClient::getIPSettings(const std::string& interface, const std::string/;"	f	class:WPEFramework::Plugin::NetworkManagerClient	typeref:typename:bool
getIPSettings2	LegacyPlugin_NetworkAPIs.cpp	/^        uint32_t Network::getIPSettings2 (const JsonObject& parameters, JsonObject& response)$/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:uint32_t
getIPv4AddrFromIPv4ConfigProxy	gdbus/NetworkManagerGdbusUtils.cpp	/^        bool GnomeUtils::getIPv4AddrFromIPv4ConfigProxy(GDBusProxy *ipProxy, std::string& ipAddr/;"	f	class:WPEFramework::Plugin::GnomeUtils	typeref:typename:bool
getIPv6AddrFromIPv6ConfigProxy	gdbus/NetworkManagerGdbusUtils.cpp	/^        bool GnomeUtils::getIPv6AddrFromIPv6ConfigProxy( GDBusProxy *ipProxy, std::string& ipAdd/;"	f	class:WPEFramework::Plugin::GnomeUtils	typeref:typename:bool
getInstance	NetworkManagerGnomeEvents.cpp	/^    GnomeNetworkManagerEvents* GnomeNetworkManagerEvents::getInstance()$/;"	f	class:WPEFramework::Plugin::GnomeNetworkManagerEvents	typeref:typename:GnomeNetworkManagerEvents *
getInstance	NetworkManagerGnomeWIFI.h	/^            static wifiManager* getInstance()$/;"	f	class:WPEFramework::Plugin::wifiManager	typeref:typename:wifiManager *
getInstance	gdbus/NetworkManagerGdbusClient.h	/^                static NetworkManagerClient* getInstance()$/;"	f	class:WPEFramework::Plugin::NetworkManagerClient	typeref:typename:NetworkManagerClient *
getInstance	gdbus/NetworkManagerGdbusEvent.cpp	/^    NetworkManagerEvents* NetworkManagerEvents::getInstance()$/;"	f	class:WPEFramework::Plugin::NetworkManagerEvents	typeref:typename:NetworkManagerEvents *
getInterafaceNameFormDevicePath	gdbus/NetworkManagerGdbusEvent.cpp	/^    static std::string getInterafaceNameFormDevicePath(const char* DevicePath)$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:std::string	file:
getInterfaceNameToType	LegacyPlugin_NetworkAPIs.cpp	/^        string Network::getInterfaceNameToType(const string & interface)$/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:string
getInterfaceState	gdbus/NetworkManagerGdbusClient.cpp	/^        bool NetworkManagerClient::getInterfaceState(const std::string& interface, bool& isEnabl/;"	f	class:WPEFramework::Plugin::NetworkManagerClient	typeref:typename:bool
getInterfaceTypeToName	LegacyPlugin_NetworkAPIs.cpp	/^        string Network::getInterfaceTypeToName(const string & interface)$/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:string
getInterfaces	LegacyPlugin_NetworkAPIs.cpp	/^        uint32_t Network::getInterfaces (const JsonObject& parameters, JsonObject& response)$/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:uint32_t
getInterfacesName	NetworkManagerGnomeUtils.cpp	/^        bool nmUtils::getInterfacesName()$/;"	f	class:WPEFramework::Plugin::nmUtils	typeref:typename:bool
getInternetConnectionState	LegacyPlugin_NetworkAPIs.cpp	/^        uint32_t Network::getInternetConnectionState(const JsonObject& parameters, JsonObject& r/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:uint32_t
getInternetState	NetworkManagerConnectivity.cpp	/^    Exchange::INetworkManager::InternetStatus ConnectivityMonitor::getInternetState(Exchange::IN/;"	f	class:WPEFramework::Plugin::ConnectivityMonitor	typeref:typename:Exchange::INetworkManager::InternetStatus
getInternetState	NetworkManagerConnectivity.h	/^            Exchange::INetworkManager::InternetStatus getInternetState(){return internetSate;}$/;"	f	class:WPEFramework::Plugin::TestConnectivity	typeref:typename:Exchange::INetworkManager::InternetStatus
getInternetStateString	NetworkManagerConnectivity.cpp	/^    static const char* getInternetStateString(Exchange::INetworkManager::InternetStatus state)$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:const char *	file:
getKnownSSIDs	NetworkManagerGnomeWIFI.cpp	/^        bool wifiManager::getKnownSSIDs(std::list<string>& ssids)$/;"	f	class:WPEFramework::Plugin::wifiManager	typeref:typename:bool
getKnownSSIDs	gdbus/NetworkManagerGdbusClient.cpp	/^        bool NetworkManagerClient::getKnownSSIDs(std::list<std::string>& ssids)$/;"	f	class:WPEFramework::Plugin::NetworkManagerClient	typeref:typename:bool
getNetworkManagerAccessPointProxy	gdbus/NetworkManagerGdbusMgr.cpp	/^        GDBusProxy* DbusMgr::getNetworkManagerAccessPointProxy(const char* apPath)$/;"	f	class:WPEFramework::Plugin::DbusMgr	typeref:typename:GDBusProxy *
getNetworkManagerActiveConnProxy	gdbus/NetworkManagerGdbusMgr.cpp	/^        GDBusProxy* DbusMgr::getNetworkManagerActiveConnProxy(const char* activePath)$/;"	f	class:WPEFramework::Plugin::DbusMgr	typeref:typename:GDBusProxy *
getNetworkManagerDeviceProxy	gdbus/NetworkManagerGdbusMgr.cpp	/^        GDBusProxy* DbusMgr::getNetworkManagerDeviceProxy(const char* devicePath)$/;"	f	class:WPEFramework::Plugin::DbusMgr	typeref:typename:GDBusProxy *
getNetworkManagerDhcpv4Proxy	gdbus/NetworkManagerGdbusMgr.cpp	/^        GDBusProxy* DbusMgr::getNetworkManagerDhcpv4Proxy(const char* dhcpConfigPath)$/;"	f	class:WPEFramework::Plugin::DbusMgr	typeref:typename:GDBusProxy *
getNetworkManagerDhcpv6Proxy	gdbus/NetworkManagerGdbusMgr.cpp	/^        GDBusProxy* DbusMgr::getNetworkManagerDhcpv6Proxy(const char* dhcpConfigPath)$/;"	f	class:WPEFramework::Plugin::DbusMgr	typeref:typename:GDBusProxy *
getNetworkManagerIpv4Proxy	gdbus/NetworkManagerGdbusMgr.cpp	/^        GDBusProxy* DbusMgr::getNetworkManagerIpv4Proxy(const char* ipConfigPath)$/;"	f	class:WPEFramework::Plugin::DbusMgr	typeref:typename:GDBusProxy *
getNetworkManagerIpv6Proxy	gdbus/NetworkManagerGdbusMgr.cpp	/^        GDBusProxy* DbusMgr::getNetworkManagerIpv6Proxy(const char* ipConfigPath)$/;"	f	class:WPEFramework::Plugin::DbusMgr	typeref:typename:GDBusProxy *
getNetworkManagerPropertyProxy	gdbus/NetworkManagerGdbusMgr.cpp	/^        GDBusProxy* DbusMgr::getNetworkManagerPropertyProxy(const char* devicePath)$/;"	f	class:WPEFramework::Plugin::DbusMgr	typeref:typename:GDBusProxy *
getNetworkManagerProxy	gdbus/NetworkManagerGdbusMgr.cpp	/^        GDBusProxy* DbusMgr::getNetworkManagerProxy()$/;"	f	class:WPEFramework::Plugin::DbusMgr	typeref:typename:GDBusProxy *
getNetworkManagerSettingsConnectionProxy	gdbus/NetworkManagerGdbusMgr.cpp	/^        GDBusProxy* DbusMgr::getNetworkManagerSettingsConnectionProxy(const char* connPath)$/;"	f	class:WPEFramework::Plugin::DbusMgr	typeref:typename:GDBusProxy *
getNetworkManagerSettingsProxy	gdbus/NetworkManagerGdbusMgr.cpp	/^        GDBusProxy* DbusMgr::getNetworkManagerSettingsProxy()$/;"	f	class:WPEFramework::Plugin::DbusMgr	typeref:typename:GDBusProxy *
getNetworkManagerWirelessProxy	gdbus/NetworkManagerGdbusMgr.cpp	/^        GDBusProxy* DbusMgr::getNetworkManagerWirelessProxy(const char* wirelessDevPath)$/;"	f	class:WPEFramework::Plugin::DbusMgr	typeref:typename:GDBusProxy *
getPairedSSID	LegacyPlugin_WiFiManagerAPIs.cpp	/^        uint32_t WiFiManager::getPairedSSID(const JsonObject& parameters, JsonObject& response)$/;"	f	class:WPEFramework::Plugin::WiFiManager	typeref:typename:uint32_t
getPairedSSID	NetworkManagerRDKProxy.cpp	/^        struct getPairedSSID {$/;"	s	union:_IARM_Bus_WiFiSrvMgr_Param_t::__anon7d34ee9e0a0a	file:
getPairedSSID	NetworkManagerRDKProxy.cpp	/^        } getPairedSSID;$/;"	m	union:_IARM_Bus_WiFiSrvMgr_Param_t::__anon7d34ee9e0a0a	typeref:struct:_IARM_Bus_WiFiSrvMgr_Param_t::__anon7d34ee9e0a0a::getPairedSSID	file:
getPairedSSIDInfo	LegacyPlugin_WiFiManagerAPIs.cpp	/^        uint32_t WiFiManager::getPairedSSIDInfo(const JsonObject& parameters, JsonObject& respon/;"	f	class:WPEFramework::Plugin::WiFiManager	typeref:typename:uint32_t
getPairedSSIDInfo	NetworkManagerRDKProxy.cpp	/^        WiFiPairedSSIDInfo_t getPairedSSIDInfo;$/;"	m	union:_IARM_Bus_WiFiSrvMgr_Param_t::__anon7d34ee9e0a0a	typeref:typename:WiFiPairedSSIDInfo_t	file:
getPrimaryInterface	gdbus/NetworkManagerGdbusClient.cpp	/^        bool NetworkManagerClient::getPrimaryInterface(std::string& interface)$/;"	f	class:WPEFramework::Plugin::NetworkManagerClient	typeref:typename:bool
getPublicIP	LegacyPlugin_NetworkAPIs.cpp	/^        uint32_t Network::getPublicIP(const JsonObject& parameters, JsonObject& response)$/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:uint32_t
getSSIDFromConnection	gdbus/NetworkManagerGdbusClient.cpp	/^        static bool getSSIDFromConnection(DbusMgr &m_dbus, const std::string connPath, std::stri/;"	f	namespace:WPEFramework::Plugin	typeref:typename:bool	file:
getSTBIPFamily	LegacyPlugin_NetworkAPIs.cpp	/^        uint32_t Network::getSTBIPFamily(const JsonObject& parameters, JsonObject& response)$/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:uint32_t
getSecurityModeString	NetworkManagerGnomeUtils.cpp	/^        std::string nmUtils::getSecurityModeString(guint32 flag, guint32 wpaFlags, guint32 rsnFl/;"	f	class:WPEFramework::Plugin::nmUtils	typeref:typename:std::string
getSecurityType	Tests/raspberrypi/NetworkManagerGdbusTest.cpp	/^WPEFramework::Exchange::INetworkManager::WIFISecurityMode getSecurityType()$/;"	f	typeref:typename:WPEFramework::Exchange::INetworkManager::WIFISecurityMode
getSettingsConnectionPath	gdbus/NetworkManagerGdbusUtils.cpp	/^        bool GnomeUtils::getSettingsConnectionPath(DbusMgr &m_dbus, std::string& connectionPath,/;"	f	class:WPEFramework::Plugin::GnomeUtils	typeref:typename:bool
getSignalData	WiFiSignalStrengthMonitor.cpp	/^        void WiFiSignalStrengthMonitor::getSignalData(std::string &ssid, Exchange::INetworkManag/;"	f	class:WPEFramework::Plugin::WiFiSignalStrengthMonitor	typeref:typename:void
getStbIp	LegacyPlugin_NetworkAPIs.cpp	/^        uint32_t Network::getStbIp(const JsonObject& parameters, JsonObject& response)$/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:uint32_t
getSupportedSecurityModes	LegacyPlugin_WiFiManagerAPIs.cpp	/^        uint32_t WiFiManager::getSupportedSecurityModes(const JsonObject& parameters, JsonObject/;"	f	class:WPEFramework::Plugin::WiFiManager	typeref:typename:uint32_t
getValue	NetworkManager.h	/^                CacheValue& getValue() {$/;"	f	class:WPEFramework::Plugin::NetworkManager::Cache	typeref:typename:CacheValue &
getValue	NetworkManager.h	/^                const CacheValue& getValue() const {$/;"	f	class:WPEFramework::Plugin::NetworkManager::Cache	typeref:typename:const CacheValue &
getWiFiSignalStrength	gdbus/NetworkManagerGdbusClient.cpp	/^        bool NetworkManagerClient::getWiFiSignalStrength(string& ssid, string& signalStrength, E/;"	f	class:WPEFramework::Plugin::NetworkManagerClient	typeref:typename:bool
getWifiConnectionPaths	gdbus/NetworkManagerGdbusUtils.cpp	/^        bool GnomeUtils::getWifiConnectionPaths(DbusMgr& m_dbus, const char* devicePath, std::li/;"	f	class:WPEFramework::Plugin::GnomeUtils	typeref:typename:bool
getWifiDevice	NetworkManagerGnomeWIFI.cpp	/^        NMDevice* wifiManager::getWifiDevice()$/;"	f	class:WPEFramework::Plugin::wifiManager	typeref:typename:NMDevice *
getWifiIfname	gdbus/NetworkManagerGdbusUtils.cpp	/^        const char* GnomeUtils::getWifiIfname() { return ifnameWlan; }$/;"	f	class:WPEFramework::Plugin::GnomeUtils	typeref:typename:const char *
getWifiState	gdbus/NetworkManagerGdbusClient.cpp	/^        bool NetworkManagerClient::getWifiState(Exchange::INetworkManager::WiFiState &state)$/;"	f	class:WPEFramework::Plugin::NetworkManagerClient	typeref:typename:bool
get_interface_address	NetworkManagerStunClient.cpp	/^  sockaddr_storage get_interface_address(std::string const & iface, int family)$/;"	f	namespace:stun::details	typeref:typename:sockaddr_storage
gmainLoopTimoutCB	NetworkManagerGnomeWIFI.cpp	/^        static gboolean gmainLoopTimoutCB(gpointer user_data)$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:gboolean	file:
guid	NetworkManager.json	/^                    "guid": {$/;"	o	object:methods.Ping.params.properties
guid	NetworkManager.json	/^                    "guid": {$/;"	o	object:methods.Ping.result.properties
guid	NetworkManager.json	/^                    "guid": {$/;"	o	object:methods.Trace.params.properties
guid	NetworkManager.json	/^                    "guid": {$/;"	o	object:methods.Trace.result.properties
guid	NetworkManager.json	/^        "guid": {$/;"	o	object:definitions
hostname	NetworkManagerStunClient.h	/^  std::string hostname;$/;"	m	struct:stun::server	typeref:typename:std::string
ifaceState	NetworkManagerGnomeUtils.cpp	/^        NMDeviceState nmUtils::ifaceState(NMClient *client, const char* interface)$/;"	f	class:WPEFramework::Plugin::nmUtils	typeref:typename:NMDeviceState
ifnameEth	gdbus/NetworkManagerGdbusUtils.cpp	/^        static const char* ifnameEth = "eth0";$/;"	v	namespace:WPEFramework::Plugin	typeref:typename:const char *	file:
ifnameEth0	NetworkManagerGnomeEvents.h	/^        std::string ifnameEth0;$/;"	m	struct:WPEFramework::Plugin::__anon87bbc0eb0108	typeref:typename:std::string
ifnameWlan	gdbus/NetworkManagerGdbusUtils.cpp	/^        static const char* ifnameWlan = "wlan0";$/;"	v	namespace:WPEFramework::Plugin	typeref:typename:const char *	file:
ifnameWlan0	NetworkManagerGnomeEvents.h	/^        std::string ifnameWlan0;$/;"	m	struct:WPEFramework::Plugin::__anon87bbc0eb0108	typeref:typename:std::string
info	NetworkManager.json	/^    "info": {$/;"	o
initiateWPS	NetworkManagerGnomeWIFI.cpp	/^        bool wifiManager::initiateWPS()$/;"	f	class:WPEFramework::Plugin::wifiManager	typeref:typename:bool
initiateWPSPairing	LegacyPlugin_WiFiManagerAPIs.cpp	/^        uint32_t WiFiManager::initiateWPSPairing (const JsonObject& parameters, JsonObject& resp/;"	f	class:WPEFramework::Plugin::WiFiManager	typeref:typename:uint32_t
interface	NetworkManager.json	/^                     "interface": {$/;"	o	object:methods.GetInterfaceState.params.properties
interface	NetworkManager.json	/^                     "interface": {$/;"	o	object:methods.SetInterfaceState.params.properties
interface	NetworkManager.json	/^                    "interface": {$/;"	o	object:methods.GetIPSettings.params.properties
interface	NetworkManager.json	/^                    "interface": {$/;"	o	object:methods.GetIPSettings.result.properties
interface	NetworkManager.json	/^                    "interface": {$/;"	o	object:methods.GetPrimaryInterface.result.properties
interface	NetworkManager.json	/^                    "interface": {$/;"	o	object:methods.SetIPSettings.params.properties
interface	NetworkManager.json	/^                    "interface": {$/;"	o	object:methods.SetPrimaryInterface.params.properties
interface	NetworkManager.json	/^                    "interface":{$/;"	o	object:events.onAddressChange.params.properties
interface	NetworkManager.json	/^                    "interface":{$/;"	o	object:events.onInterfaceStateChange.params.properties
interface	NetworkManager.json	/^                    "interface":{$/;"	o	object:methods.GetPublicIP.params.properties
interface	NetworkManager.json	/^                    "interface":{$/;"	o	object:methods.GetPublicIP.result.properties
interface	NetworkManager.json	/^        "interface": {$/;"	o	object:definitions
interface	NetworkManagerRDKProxy.cpp	/^    char interface[16];$/;"	m	struct:__anon7d34ee9e0308	typeref:typename:char[16]	file:
interface	NetworkManagerRDKProxy.cpp	/^    char interface[16];$/;"	m	struct:__anon7d34ee9e0408	typeref:typename:char[16]	file:
interface	NetworkManagerRDKProxy.cpp	/^    char interface[16];$/;"	m	struct:__anon7d34ee9e0508	typeref:typename:char[16]	file:
interface	NetworkManagerRDKProxy.cpp	/^    char interface[16];$/;"	m	struct:__anon7d34ee9e0608	typeref:typename:char[16]	file:
interface	NetworkManagerRDKProxy.cpp	/^    char interface[16];$/;"	m	struct:__anon7d34ee9e0808	typeref:typename:char[16]	file:
interface	gdbus/NetworkManagerGdbusUtils.h	/^    std::string interface;$/;"	m	struct:deviceInfo	typeref:typename:std::string
interfaceCount	NetworkManagerRDKProxy.cpp	/^   char interfaceCount;$/;"	m	struct:_IARM_BUS_NetSrvMgr_Iface_EventData_t	typeref:typename:char	file:
interfaces	NetworkManager.json	/^                    "interfaces": {$/;"	o	object:methods.GetAvailableInterfaces.result.properties
interfaces	NetworkManagerRDKProxy.cpp	/^    NetSrvMgr_Interface_t interfaces[NETSRVMGR_INTERFACES_MAX];$/;"	m	struct:__anon7d34ee9e0208	typeref:typename:NetSrvMgr_Interface_t[]	file:
internalGetIPSettings	LegacyPlugin_NetworkAPIs.cpp	/^        uint32_t Network::internalGetIPSettings(const JsonObject& parameters, JsonObject& respon/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:uint32_t
internetSate	NetworkManagerConnectivity.h	/^            Exchange::INetworkManager::InternetStatus internetSate;$/;"	m	class:WPEFramework::Plugin::TestConnectivity	typeref:typename:Exchange::INetworkManager::InternetStatus
interval	NetworkManagerImplementation.h	/^                        Core::JSON::DecUInt32 interval;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation::Stun	typeref:typename:Core::JSON::DecUInt32
invalidate	NetworkManagerStunClient.h	/^  void invalidate() { public_ip.clear(); }$/;"	f	struct:stun::bind_result	typeref:typename:void
ip4ChangedCb	NetworkManagerGnomeEvents.cpp	/^    static void ip4ChangedCb(NMIPConfig *ipConfig, GParamSpec *pspec, gpointer userData)$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:void	file:
ip4StrToNBO	gdbus/NetworkManagerGdbusUtils.cpp	/^        uint32_t GnomeUtils::ip4StrToNBO(const std::string &ipAddress)$/;"	f	class:WPEFramework::Plugin::GnomeUtils	typeref:typename:uint32_t
ip4ToString	gdbus/NetworkManagerGdbusUtils.cpp	/^        std::string GnomeUtils::ip4ToString(uint32_t ip) {$/;"	f	class:WPEFramework::Plugin::GnomeUtils	typeref:typename:std::string
ip6ChangedCb	NetworkManagerGnomeEvents.cpp	/^    static void ip6ChangedCb(NMIPConfig *ipConfig, GParamSpec *pspec, gpointer userData)$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:void	file:
ip6StrToNBO	gdbus/NetworkManagerGdbusUtils.cpp	/^        std::array<guint8, 16> GnomeUtils::ip6StrToNBO(const std::string &ipAddress)$/;"	f	class:WPEFramework::Plugin::GnomeUtils	typeref:typename:std::array<guint8,16>
ip6ToString	gdbus/NetworkManagerGdbusUtils.cpp	/^        std::string GnomeUtils::ip6ToString(const uint8_t *ipv6) {$/;"	f	class:WPEFramework::Plugin::GnomeUtils	typeref:typename:std::string
ipV4addressChangeCb	gdbus/NetworkManagerGdbusEvent.cpp	/^    static void ipV4addressChangeCb(GDBusProxy *proxy, GVariant *changedProps, GStrv invalidProp/;"	f	namespace:WPEFramework::Plugin	typeref:typename:void	file:
ipV6addressChangeCb	gdbus/NetworkManagerGdbusEvent.cpp	/^    static void ipV6addressChangeCb(GDBusProxy *proxy, GVariant *changedProps, GStrv invalidProp/;"	f	namespace:WPEFramework::Plugin	typeref:typename:void	file:
ip_address	NetworkManagerRDKProxy.cpp	/^    char ip_address[MAX_IP_ADDRESS_LEN];$/;"	m	struct:__anon7d34ee9e0608	typeref:typename:char[]	file:
ipaddress	INetworkManager.h	/^                string ipaddress    \/* @text: ipaddress *\/;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::IPAddress	typeref:typename:string
ipaddress	NetworkManager.json	/^                    "ipaddress": {$/;"	o	object:events.onAddressChange.params.properties
ipaddress	NetworkManager.json	/^                    "ipaddress": {$/;"	o	object:methods.GetIPSettings.result.properties
ipaddress	NetworkManager.json	/^                    "ipaddress": {$/;"	o	object:methods.GetPublicIP.result.properties
ipaddress	NetworkManager.json	/^                    "ipaddress": {$/;"	o	object:methods.SetIPSettings.params.properties
ipaddress	NetworkManager.json	/^        "ipaddress": {$/;"	o	object:definitions
ipaddress	NetworkManagerRDKProxy.cpp	/^    char ipaddress[MAX_IP_ADDRESS_LEN];$/;"	m	struct:__anon7d34ee9e0308	typeref:typename:char[]	file:
ipfamily	NetworkManagerRDKProxy.cpp	/^   char ipfamily[MAX_IP_FAMILY_SIZE];$/;"	m	struct:_IARM_BUS_NetSrvMgr_Iface_EventData_t	typeref:typename:char[]	file:
ipv4Resolved	NetworkManagerConnectivity.h	/^                bool ipv4Resolved = false;$/;"	m	class:WPEFramework::Plugin::DnsResolver	typeref:typename:bool
ipv6	NetworkManagerRDKProxy.cpp	/^    bool ipv6;$/;"	m	struct:__anon7d34ee9e0808	typeref:typename:bool	file:
ipv6Resolved	NetworkManagerConnectivity.h	/^                bool ipv6Resolved = false;$/;"	m	class:WPEFramework::Plugin::DnsResolver	typeref:typename:bool
ipversion	INetworkManager.h	/^                string ipversion    \/* @text: ipversion *\/;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::IPAddress	typeref:typename:string
ipversion	NetworkManager.json	/^                    "ipversion": {$/;"	o	object:events.onAddressChange.params.properties
ipversion	NetworkManager.json	/^                    "ipversion": {$/;"	o	object:methods.GetIPSettings.params.properties
ipversion	NetworkManager.json	/^                    "ipversion": {$/;"	o	object:methods.GetIPSettings.result.properties
ipversion	NetworkManager.json	/^                    "ipversion": {$/;"	o	object:methods.GetPublicIP.params.properties
ipversion	NetworkManager.json	/^                    "ipversion": {$/;"	o	object:methods.GetPublicIP.result.properties
ipversion	NetworkManager.json	/^                    "ipversion": {$/;"	o	object:methods.IsConnectedToInternet.params.properties
ipversion	NetworkManager.json	/^                    "ipversion": {$/;"	o	object:methods.IsConnectedToInternet.result.properties
ipversion	NetworkManager.json	/^                    "ipversion": {$/;"	o	object:methods.Ping.params.properties
ipversion	NetworkManager.json	/^                    "ipversion": {$/;"	o	object:methods.SetIPSettings.params.properties
ipversion	NetworkManager.json	/^                    "ipversion": {$/;"	o	object:methods.Trace.params.properties
ipversion	NetworkManager.json	/^        "ipversion": {$/;"	o	object:definitions
ipversion	NetworkManagerRDKProxy.cpp	/^    char ipversion[16];$/;"	m	struct:__anon7d34ee9e0308	typeref:typename:char[16]	file:
isActive	NetworkManagerTimer.h	/^                bool isActive()$/;"	f	class:WPEFramework::Plugin::NetworkManagerTimer	typeref:typename:bool
isAutoConnectEnabled	NetworkManagerGnomeProxy.cpp	/^        bool static isAutoConnectEnabled(NMActiveConnection* activeConn)$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:bool	file:
isConnectedToInternet	LegacyPlugin_NetworkAPIs.cpp	/^        uint32_t Network::isConnectedToInternet(const JsonObject& parameters, JsonObject& respon/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:uint32_t
isEventThrdActive	NetworkManagerGnomeEvents.h	/^        std::atomic<bool>isEventThrdActive = {false};$/;"	m	class:WPEFramework::Plugin::GnomeNetworkManagerEvents	typeref:typename:std::atomic<bool>
isEventThrdActive	gdbus/NetworkManagerGdbusEvent.h	/^        std::atomic<bool>isEventThrdActive = {false};$/;"	m	class:WPEFramework::Plugin::NetworkManagerEvents	typeref:typename:std::atomic<bool>
isInterfaceEnabled	LegacyPlugin_NetworkAPIs.cpp	/^        uint32_t Network::isInterfaceEnabled (const JsonObject& parameters, JsonObject& response/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:uint32_t
isInterfaceEnabled	NetworkManagerRDKProxy.cpp	/^   bool isInterfaceEnabled;$/;"	m	struct:_IARM_BUS_NetSrvMgr_Iface_EventData_t	typeref:typename:bool	file:
isPaired	LegacyPlugin_WiFiManagerAPIs.cpp	/^        uint32_t WiFiManager::isPaired (const JsonObject& parameters, JsonObject& response)$/;"	f	class:WPEFramework::Plugin::WiFiManager	typeref:typename:uint32_t
isPaired	NetworkManagerRDKProxy.cpp	/^        bool isPaired;$/;"	m	union:_IARM_Bus_WiFiSrvMgr_Param_t::__anon7d34ee9e0a0a	typeref:typename:bool	file:
isRunning	WiFiSignalStrengthMonitor.h	/^                std::atomic<bool> isRunning;$/;"	m	class:WPEFramework::Plugin::WiFiSignalStrengthMonitor	typeref:typename:std::atomic<bool>
isSet	NetworkManager.h	/^                bool isSet() const {$/;"	f	class:WPEFramework::Plugin::NetworkManager::Cache	typeref:typename:bool
isSupported	NetworkManagerRDKProxy.cpp	/^    bool isSupported;$/;"	m	struct:__anon7d34ee9e0308	typeref:typename:bool	file:
isWifiConnected	NetworkManagerGnomeWIFI.cpp	/^        bool wifiManager::isWifiConnected()$/;"	f	class:WPEFramework::Plugin::wifiManager	typeref:typename:bool
isWifiScannedRecently	NetworkManagerGnomeWIFI.cpp	/^        bool wifiManager::isWifiScannedRecently(int timelimitInSec)$/;"	f	class:WPEFramework::Plugin::wifiManager	typeref:typename:bool
is_ipv6	NetworkManagerRDKProxy.cpp	/^    bool is_ipv6;$/;"	m	struct:__anon7d34ee9e0608	typeref:typename:bool	file:
is_set	NetworkManager.h	/^                std::atomic<bool> is_set;$/;"	m	class:WPEFramework::Plugin::NetworkManager::Cache	typeref:typename:std::atomic<bool>
is_valid	NetworkManagerStunClient.h	/^  bool is_valid() { return !public_ip.empty(); }$/;"	f	struct:stun::bind_result	typeref:typename:bool
items	NetworkManager.json	/^                        "items": {$/;"	o	object:events.onAvailableSSIDs.params.properties.ssids
items	NetworkManager.json	/^                        "items": {$/;"	o	object:methods.GetAvailableInterfaces.result.properties.interfaces
items	NetworkManager.json	/^                        "items": {$/;"	o	object:methods.GetConnectivityTestEndpoints.result.properties.endpoints
items	NetworkManager.json	/^                        "items": {$/;"	o	object:methods.GetKnownSSIDs.result.properties.ssids
items	NetworkManager.json	/^                        "items": {$/;"	o	object:methods.SetConnectivityTestEndpoints.params.properties.endpoints
items	NetworkManager.json	/^                        "items": {$/;"	o	object:methods.StartWiFiScan.params.properties.ssids
jdata	NetworkManagerRDKProxy.cpp	/^    char jdata[MAX_SSIDLIST_BUF];    \/**< Buffer containing the serialized data. *\/$/;"	m	struct:_wifiSsidData_t	typeref:typename:char[]	file:
jdataLen	NetworkManagerRDKProxy.cpp	/^    size_t jdataLen;                 \/**< Length of the data buffer. *\/$/;"	m	struct:_wifiSsidData_t	typeref:typename:size_t	file:
jsonrpc	NetworkManager.json	/^    "jsonrpc": "2.0",$/;"	s
lastScanPropertiesChangedCB	gdbus/NetworkManagerGdbusEvent.cpp	/^    static void lastScanPropertiesChangedCB(GDBusProxy *proxy, GVariant *changedProps,$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:void	file:
length	NetworkManagerStunClient.h	/^  uint16_t length;$/;"	m	struct:stun::attribute	typeref:typename:uint16_t
level	NetworkManager.json	/^                     "level": {$/;"	o	object:methods.GetLogLevel.result.properties
level	NetworkManager.json	/^                     "level": {$/;"	o	object:methods.SetLogLevel.params.properties
locator	NetworkManager.json	/^        "locator": "libWPEFrameworkNetworkManager.so",$/;"	s	object:info
logPrint	NetworkManagerLogger.cpp	/^    void logPrint(LogLevel level, const char* file, const char* func, int line, const char* form/;"	f	namespace:NetworkManagerLogger	typeref:typename:void
loglevel	NetworkManagerImplementation.h	/^                Core::JSON::DecUInt32 loglevel;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation::Configuration	typeref:typename:Core::JSON::DecUInt32
loop	NetworkManagerGnomeEvents.h	/^        GMainLoop *loop;$/;"	m	struct:WPEFramework::Plugin::__anon87bbc0eb0108	typeref:typename:GMainLoop *
loop	gdbus/NetworkManagerGdbusEvent.h	/^        GMainLoop *loop;$/;"	m	struct:WPEFramework::Plugin::__anoncc38525b0108	typeref:typename:GMainLoop *
m_CachefilePath	NetworkManagerConnectivity.h	/^            std::string m_CachefilePath;$/;"	m	class:WPEFramework::Plugin::EndpointManager	typeref:typename:std::string
m_Endpoints	NetworkManagerConnectivity.h	/^            std::vector<std::string> m_Endpoints;$/;"	m	class:WPEFramework::Plugin::EndpointManager	typeref:typename:std::vector<std::string>
m_IPv4Available	NetworkManagerImplementation.h	/^                bool m_IPv4Available;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:bool
m_IPv6Available	NetworkManagerImplementation.h	/^                bool m_IPv6Available;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:bool
m_InternetState	NetworkManagerConnectivity.h	/^            std::atomic<Exchange::INetworkManager::InternetStatus> m_InternetState; \/\/ IPv4 or/;"	m	class:WPEFramework::Plugin::ConnectivityMonitor	typeref:typename:std::atomic<Exchange::INetworkManager::InternetStatus>
m_Ipv4InternetState	NetworkManagerConnectivity.h	/^            std::atomic<Exchange::INetworkManager::InternetStatus> m_Ipv4InternetState; \/\/  IP/;"	m	class:WPEFramework::Plugin::ConnectivityMonitor	typeref:typename:std::atomic<Exchange::INetworkManager::InternetStatus>
m_Ipv6InternetState	NetworkManagerConnectivity.h	/^            std::atomic<Exchange::INetworkManager::InternetStatus> m_Ipv6InternetState; \/\/  IP/;"	m	class:WPEFramework::Plugin::ConnectivityMonitor	typeref:typename:std::atomic<Exchange::INetworkManager::InternetStatus>
m_addr	NetworkManagerStunClient.h	/^    sockaddr_storage m_addr;$/;"	m	class:stun::attributes::address	typeref:typename:sockaddr_storage
m_attrs	NetworkManagerStunClient.h	/^  std::vector<attribute> m_attrs;$/;"	m	class:stun::message	typeref:typename:std::vector<attribute>
m_bind_timeout	NetworkManagerStunClient.h	/^  uint16_t m_bind_timeout;$/;"	m	class:stun::client	typeref:typename:uint16_t
m_cache_timeout	NetworkManagerStunClient.h	/^  uint16_t m_cache_timeout;$/;"	m	class:stun::client	typeref:typename:uint16_t
m_captiveURI	NetworkManagerConnectivity.h	/^            std::string m_captiveURI;$/;"	m	class:WPEFramework::Plugin::ConnectivityMonitor	typeref:typename:std::string
m_client	NetworkManagerGnomeWIFI.h	/^            NMClient *m_client;$/;"	m	class:WPEFramework::Plugin::wifiManager	typeref:typename:NMClient *
m_cmCv	NetworkManagerConnectivity.h	/^            std::condition_variable m_cmCv;$/;"	m	class:WPEFramework::Plugin::ConnectivityMonitor	typeref:typename:std::condition_variable
m_cmMutex	NetworkManagerConnectivity.h	/^            std::mutex m_cmMutex;$/;"	m	class:WPEFramework::Plugin::ConnectivityMonitor	typeref:typename:std::mutex
m_cmRunning	NetworkManagerConnectivity.h	/^            std::atomic<bool> m_cmRunning;$/;"	m	class:WPEFramework::Plugin::ConnectivityMonitor	typeref:typename:std::atomic<bool>
m_cmThrdID	NetworkManagerConnectivity.h	/^            std::thread m_cmThrdID;$/;"	m	class:WPEFramework::Plugin::ConnectivityMonitor	typeref:typename:std::thread
m_createNewConnection	NetworkManagerGnomeWIFI.h	/^            gboolean m_createNewConnection;$/;"	m	class:WPEFramework::Plugin::wifiManager	typeref:typename:gboolean
m_dbus	gdbus/NetworkManagerGdbusClient.h	/^                DbusMgr m_dbus;$/;"	m	class:WPEFramework::Plugin::NetworkManagerClient	typeref:typename:DbusMgr
m_defaultInterface	NetworkManagerImplementation.h	/^                string m_defaultInterface;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:string
m_domain	NetworkManagerConnectivity.h	/^                std::string m_domain{};$/;"	m	class:WPEFramework::Plugin::DnsResolver	typeref:typename:std::string
m_endpoint	NetworkManagerConnectivity.h	/^            EndpointManager m_endpoint;$/;"	m	class:WPEFramework::Plugin::ConnectivityMonitor	typeref:typename:EndpointManager
m_endpointMutex	NetworkManagerConnectivity.h	/^            std::mutex m_endpointMutex;$/;"	m	class:WPEFramework::Plugin::EndpointManager	typeref:typename:std::mutex
m_ethConnected	NetworkManagerImplementation.h	/^                std::atomic<bool> m_ethConnected;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:std::atomic<bool>
m_ethifname	NetworkManagerGnomeUtils.cpp	/^        static std::string m_ethifname = "eth0";$/;"	v	namespace:WPEFramework::Plugin	typeref:typename:std::string	file:
m_fd	NetworkManagerStunClient.cpp	/^    int m_fd;$/;"	m	class:stun::details::file_descriptor	typeref:typename:int	file:
m_fd	NetworkManagerStunClient.h	/^  int m_fd;$/;"	m	class:stun::client	typeref:typename:int
m_filterSsidslist	NetworkManagerImplementation.h	/^                std::vector<std::string> m_filterSsidslist;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:std::vector<std::string>
m_filterfrequency	NetworkManagerImplementation.h	/^                string m_filterfrequency;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:string
m_header	NetworkManagerStunClient.h	/^  message_header  m_header;$/;"	m	class:stun::message	typeref:typename:message_header
m_interface	NetworkManagerStunClient.h	/^  std::string m_interface;$/;"	m	class:stun::client	typeref:typename:std::string
m_intervalInMs	NetworkManagerTimer.h	/^                int m_intervalInMs;$/;"	m	class:WPEFramework::Plugin::NetworkManagerTimer	typeref:typename:int
m_ipv4AddressCache	NetworkManager.h	/^            Cache<Exchange::INetworkManager::IPAddress> m_ipv4AddressCache;$/;"	m	class:WPEFramework::Plugin::NetworkManager	typeref:typename:Cache<Exchange::INetworkManager::IPAddress>
m_ipv6AddressCache	NetworkManager.h	/^            Cache<Exchange::INetworkManager::IPAddress> m_ipv6AddressCache;$/;"	m	class:WPEFramework::Plugin::NetworkManager	typeref:typename:Cache<Exchange::INetworkManager::IPAddress>
m_ipversion	NetworkManagerConnectivity.h	/^            std::atomic<Exchange::INetworkManager::IPVersion> m_ipversion; \/\/  IPv6$/;"	m	class:WPEFramework::Plugin::ConnectivityMonitor	typeref:typename:std::atomic<Exchange::INetworkManager::IPVersion>
m_isActive	NetworkManagerTimer.h	/^                bool m_isActive;$/;"	m	class:WPEFramework::Plugin::NetworkManagerTimer	typeref:typename:bool
m_isSingleShot	NetworkManagerTimer.h	/^                bool m_isSingleShot;$/;"	m	class:WPEFramework::Plugin::NetworkManagerTimer	typeref:typename:bool
m_isSuccess	NetworkManagerGnomeWIFI.h	/^            bool m_isSuccess = false;$/;"	m	class:WPEFramework::Plugin::wifiManager	typeref:typename:bool
m_last_cache_time	NetworkManagerStunClient.h	/^  std::chrono::time_point<std::chrono::steady_clock> m_last_cache_time;$/;"	m	class:stun::client	typeref:typename:std::chrono::time_point<std::chrono::steady_clock>
m_last_result	NetworkManagerStunClient.h	/^  bind_result m_last_result;$/;"	m	class:stun::client	typeref:typename:bind_result
m_loop	NetworkManagerGnomeWIFI.h	/^            GMainLoop *m_loop;$/;"	m	class:WPEFramework::Plugin::wifiManager	typeref:typename:GMainLoop *
m_networkmanager	LegacyPlugin_NetworkAPIs.h	/^            std::shared_ptr<WPEFramework::JSONRPC::SmartLinkType<WPEFramework::Core::JSON::IElem/;"	m	class:WPEFramework::Plugin::Network	typeref:typename:std::shared_ptr<WPEFramework::JSONRPC::SmartLinkType<WPEFramework::Core::JSON::IElement>>
m_networkmanager	LegacyPlugin_WiFiManagerAPIs.h	/^            std::shared_ptr<WPEFramework::JSONRPC::SmartLinkType<WPEFramework::Core::JSON::IElem/;"	m	class:WPEFramework::Plugin::WiFiManager	typeref:typename:std::shared_ptr<WPEFramework::JSONRPC::SmartLinkType<WPEFramework::Core::JSON::IElement>>
m_nmContext	NetworkManagerGnomeWIFI.h	/^            GMainContext *m_nmContext = nullptr;$/;"	m	class:WPEFramework::Plugin::wifiManager	typeref:typename:GMainContext *
m_notify	NetworkManagerConnectivity.h	/^            std::atomic<bool> m_notify;$/;"	m	class:WPEFramework::Plugin::ConnectivityMonitor	typeref:typename:std::atomic<bool>
m_objectPath	NetworkManagerGnomeWIFI.h	/^            const char* m_objectPath;$/;"	m	class:WPEFramework::Plugin::wifiManager	typeref:typename:const char *
m_protocol	NetworkManagerStunClient.h	/^  protocol m_protocol;$/;"	m	class:stun::client	typeref:typename:protocol
m_publicIP	NetworkManagerImplementation.h	/^                string m_publicIP;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:string
m_publicIPAddress	NetworkManager.h	/^            string m_publicIPAddress;$/;"	m	class:WPEFramework::Plugin::NetworkManager	typeref:typename:string
m_publicIPAddressType	NetworkManager.h	/^            string m_publicIPAddressType;$/;"	m	class:WPEFramework::Plugin::NetworkManager	typeref:typename:string
m_registrationThread	NetworkManagerImplementation.h	/^                std::thread m_registrationThread;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:std::thread
m_server	NetworkManagerStunClient.h	/^  server m_server;$/;"	m	class:stun::client	typeref:typename:server
m_service	LegacyPlugin_NetworkAPIs.h	/^            PluginHost::IShell* m_service;$/;"	m	class:WPEFramework::Plugin::Network	typeref:typename:PluginHost::IShell *
m_service	LegacyPlugin_WiFiManagerAPIs.h	/^            PluginHost::IShell* m_service;$/;"	m	class:WPEFramework::Plugin::WiFiManager	typeref:typename:PluginHost::IShell *
m_source	NetworkManagerGnomeWIFI.h	/^            GSource *m_source;$/;"	m	class:WPEFramework::Plugin::wifiManager	typeref:typename:GSource *
m_stunBindTimeout	NetworkManagerImplementation.h	/^                uint16_t m_stunBindTimeout;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint16_t
m_stunCacheTimeout	NetworkManagerImplementation.h	/^                uint16_t m_stunCacheTimeout;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint16_t
m_stunEndpoint	NetworkManagerImplementation.h	/^                string m_stunEndpoint;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:string
m_stunPort	NetworkManagerImplementation.h	/^                uint16_t m_stunPort;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:uint16_t
m_subsActIfaceChange	LegacyPlugin_NetworkAPIs.h	/^            bool m_subsActIfaceChange;$/;"	m	class:WPEFramework::Plugin::Network	typeref:typename:bool
m_subsAvailableSSIDs	LegacyPlugin_WiFiManagerAPIs.h	/^            bool m_subsAvailableSSIDs;$/;"	m	class:WPEFramework::Plugin::WiFiManager	typeref:typename:bool
m_subsIPAddrChange	LegacyPlugin_NetworkAPIs.h	/^            bool m_subsIPAddrChange;$/;"	m	class:WPEFramework::Plugin::Network	typeref:typename:bool
m_subsIfaceStateChange	LegacyPlugin_NetworkAPIs.h	/^            bool m_subsIfaceStateChange;$/;"	m	class:WPEFramework::Plugin::Network	typeref:typename:bool
m_subsInternetChange	LegacyPlugin_NetworkAPIs.h	/^            bool m_subsInternetChange;$/;"	m	class:WPEFramework::Plugin::Network	typeref:typename:bool
m_subsWiFiStateChange	LegacyPlugin_WiFiManagerAPIs.h	/^            bool m_subsWiFiStateChange;$/;"	m	class:WPEFramework::Plugin::WiFiManager	typeref:typename:bool
m_subsWiFiStrengthChange	LegacyPlugin_WiFiManagerAPIs.h	/^            bool m_subsWiFiStrengthChange;$/;"	m	class:WPEFramework::Plugin::WiFiManager	typeref:typename:bool
m_switchToInitial	NetworkManagerConnectivity.h	/^            std::atomic<bool> m_switchToInitial;$/;"	m	class:WPEFramework::Plugin::ConnectivityMonitor	typeref:typename:std::atomic<bool>
m_timer	LegacyPlugin_NetworkAPIs.h	/^            NetworkManagerTimer m_timer;$/;"	m	class:WPEFramework::Plugin::Network	typeref:typename:NetworkManagerTimer
m_timer	LegacyPlugin_WiFiManagerAPIs.h	/^            NetworkManagerTimer m_timer;$/;"	m	class:WPEFramework::Plugin::WiFiManager	typeref:typename:NetworkManagerTimer
m_timerJob	NetworkManagerTimer.h	/^                NetworkManagerTimerJob m_timerJob;$/;"	m	class:WPEFramework::Plugin::NetworkManagerTimer	typeref:typename:NetworkManagerTimerJob
m_tptimer	NetworkManagerTimer.h	/^                        NetworkManagerTimer* m_tptimer;$/;"	m	class:WPEFramework::Plugin::NetworkManagerTimer::NetworkManagerTimerJob	typeref:typename:NetworkManagerTimer *
m_wifiSignalMonitor	NetworkManagerImplementation.h	/^                WiFiSignalStrengthMonitor m_wifiSignalMonitor;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:WiFiSignalStrengthMonitor
m_wifidevice	NetworkManagerGnomeWIFI.h	/^            NMDevice *m_wifidevice;$/;"	m	class:WPEFramework::Plugin::wifiManager	typeref:typename:NMDevice *
m_wlanConnected	NetworkManagerImplementation.h	/^                std::atomic<bool> m_wlanConnected;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:std::atomic<bool>
m_wlanifname	NetworkManagerGnomeUtils.cpp	/^        static std::string m_wlanifname = "wlan0";$/;"	v	namespace:WPEFramework::Plugin	typeref:typename:std::string	file:
m_wpsContext	NetworkManagerGnomeWIFI.h	/^            GMainContext *m_wpsContext = nullptr;$/;"	m	class:WPEFramework::Plugin::wifiManager	typeref:typename:GMainContext *
mac	INetworkManager.h	/^                string        mac;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::InterfaceDetails	typeref:typename:string
mac	NetworkManager.json	/^                                "mac":{$/;"	o	object:methods.GetAvailableInterfaces.result.properties.interfaces.items.properties
mac	NetworkManagerRDKProxy.cpp	/^    char mac[20];$/;"	m	struct:__anon7d34ee9e0108	typeref:typename:char[20]	file:
main	Tests/raspberrypi/NetworkManagerGdbusTest.cpp	/^int main()$/;"	f	typeref:typename:int
main	Tests/unit_test/test_WiFiSignalStrengthMonitor.cpp	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
managed	gdbus/NetworkManagerGdbusUtils.h	/^    bool managed;$/;"	m	struct:deviceInfo	typeref:typename:bool
managerRunningCb	NetworkManagerGnomeEvents.cpp	/^    static void managerRunningCb (NMClient *client, GParamSpec *pspec, gpointer user_data)$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:void	file:
mapToLegacySecurityMode	LegacyPlugin_WiFiManagerAPIs.cpp	/^        static inline uint32_t mapToLegacySecurityMode(const uint32_t securityMode)$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:uint32_t	file:
mapToLegacySecurityMode	NetworkManagerRDKProxy.cpp	/^        static inline uint32_t mapToLegacySecurityMode(const uint32_t securityMode)$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:uint32_t	file:
mapToNewSecurityMode	LegacyPlugin_WiFiManagerAPIs.cpp	/^        static inline uint32_t mapToNewSecurityMode(const uint32_t legacyMode)$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:uint32_t	file:
mapToNewSecurityMode	NetworkManagerRDKProxy.cpp	/^        static inline uint32_t mapToNewSecurityMode(const uint32_t legacyMode)$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:uint32_t	file:
mapTordkLogLevel	NetworkManagerLogger.cpp	/^    rdk_LogLevel mapTordkLogLevel(LogLevel level)$/;"	f	namespace:NetworkManagerLogger	typeref:typename:rdk_LogLevel
mapped_address	NetworkManagerStunClient.h	/^    mapped_address(attribute const & attr) : address(attr) { }$/;"	f	struct:stun::attributes::mapped_address
mapped_address	NetworkManagerStunClient.h	/^  static uint16_t constexpr mapped_address = 0x001;$/;"	v	namespace:stun::attribute_type	typeref:typename:uint16_t 
mapped_address	NetworkManagerStunClient.h	/^  struct mapped_address : public address {$/;"	s	namespace:stun::attributes
message	NetworkManagerStunClient.h	/^class message {$/;"	c	namespace:stun
message_factory	NetworkManagerStunClient.h	/^class message_factory final {$/;"	c	namespace:stun
message_header	NetworkManagerStunClient.h	/^struct message_header {$/;"	s	namespace:stun
message_integrity	NetworkManagerStunClient.h	/^  static uint16_t constexpr message_integrity = 0x0008;$/;"	v	namespace:stun::attribute_type	typeref:typename:uint16_t 
message_length	NetworkManagerStunClient.h	/^  uint16_t message_length;$/;"	m	struct:stun::message_header	typeref:typename:uint16_t
message_type	NetworkManagerStunClient.h	/^  uint16_t message_type;$/;"	m	struct:stun::message_header	typeref:typename:uint16_t
message_type	NetworkManagerStunClient.h	/^namespace message_type {$/;"	n	namespace:stun
metadata	LegacyPlugin_NetworkAPIs.cpp	/^    static Plugin::Metadata<Plugin::Network> metadata($/;"	v	namespace:WPEFramework	typeref:typename:Plugin::Metadata<Plugin::Network>	file:
metadata	LegacyPlugin_WiFiManagerAPIs.cpp	/^    static Plugin::Metadata<Plugin::WiFiManager> metadata($/;"	v	namespace:WPEFramework	typeref:typename:Plugin::Metadata<Plugin::WiFiManager>	file:
metadata	NetworkManager.cpp	/^        static Plugin::Metadata<Plugin::NetworkManager> metadata($/;"	v	namespace:WPEFramework::Plugin	typeref:typename:Plugin::Metadata<Plugin::NetworkManager>	file:
method	NetworkManager.json	/^                    "method": {$/;"	o	object:methods.StartWPS.params.properties
methods	NetworkManager.json	/^    "methods": {$/;"	o
mode	gdbus/NetworkManagerGdbusUtils.h	/^    NM80211Mode mode;$/;"	m	struct:apInfo	typeref:typename:NM80211Mode
monitor	Tests/unit_test/test_WiFiSignalStrengthMonitor.cpp	/^     WPEFramework::Plugin::WiFiSignalStrengthMonitor monitor;$/;"	m	class:WiFiSignalStrengthMonitorTest	typeref:typename:WPEFramework::Plugin::WiFiSignalStrengthMonitor	file:
monitorDevice	gdbus/NetworkManagerGdbusEvent.cpp	/^    static void monitorDevice(const gchar *devicePath) $/;"	f	namespace:WPEFramework::Plugin	typeref:typename:void	file:
monitorThread	WiFiSignalStrengthMonitor.h	/^                std::thread monitorThread;$/;"	m	class:WPEFramework::Plugin::WiFiSignalStrengthMonitor	typeref:typename:std::thread
monitorThreadFunction	WiFiSignalStrengthMonitor.cpp	/^        void WiFiSignalStrengthMonitor::monitorThreadFunction(int interval)$/;"	f	class:WPEFramework::Plugin::WiFiSignalStrengthMonitor	typeref:typename:void
more_data	NetworkManagerRDKProxy.cpp	/^            bool more_data;$/;"	m	struct:_IARM_BUS_WiFiSrvMgr_EventData_t::__anon7d34ee9e0c0a::_WIFI_SSID_LIST	typeref:typename:bool	file:
mutex	NetworkManager.h	/^                mutable std::mutex mutex;$/;"	m	class:WPEFramework::Plugin::NetworkManager::Cache	typeref:typename:std::mutex
myIDs	INetworkManager.h	/^        enum myIDs {$/;"	g	namespace:WPEFramework::Exchange
name	INetworkManager.h	/^                string        name;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::InterfaceDetails	typeref:typename:string
name	NetworkManager.json	/^                                "name":{$/;"	o	object:methods.GetAvailableInterfaces.result.properties.interfaces.items.properties
name	NetworkManagerRDKProxy.cpp	/^    char name[16];$/;"	m	struct:__anon7d34ee9e0108	typeref:typename:char[16]	file:
netmask	NetworkManagerRDKProxy.cpp	/^    char netmask[MAX_IP_ADDRESS_LEN];$/;"	m	struct:__anon7d34ee9e0308	typeref:typename:char[]	file:
networkManagerProxy	gdbus/NetworkManagerGdbusEvent.h	/^        GDBusProxy *networkManagerProxy; \/\/ networkmanager main bus$/;"	m	struct:WPEFramework::Plugin::__anoncc38525b0108	typeref:typename:GDBusProxy *
networkMangerEventMonitor	NetworkManagerGnomeEvents.cpp	/^    void* GnomeNetworkManagerEvents::networkMangerEventMonitor(void *arg)$/;"	f	class:WPEFramework::Plugin::GnomeNetworkManagerEvents	typeref:typename:void *
networkMangerEventMonitor	gdbus/NetworkManagerGdbusEvent.cpp	/^    void* NetworkManagerEvents::networkMangerEventMonitor(void *arg)$/;"	f	class:WPEFramework::Plugin::NetworkManagerEvents	typeref:typename:void *
network_access_type	NetworkManagerStunClient.h	/^enum class network_access_type {$/;"	g	namespace:stun
newInterface	NetworkManagerRDKProxy.cpp	/^    char newInterface[16];$/;"	m	struct:__anon7d34ee9e0708	typeref:typename:char[16]	file:
nmEvent	NetworkManagerGnomeProxy.cpp	/^        GnomeNetworkManagerEvents *nmEvent = nullptr;$/;"	v	namespace:WPEFramework::Plugin	typeref:typename:GnomeNetworkManagerEvents *
nmEvents	NetworkManagerGnomeEvents.h	/^        NMEvents nmEvents;$/;"	m	class:WPEFramework::Plugin::GnomeNetworkManagerEvents	typeref:typename:NMEvents
nmEvents	gdbus/NetworkManagerGdbusEvent.h	/^        NMEvents nmEvents{};$/;"	m	class:WPEFramework::Plugin::NetworkManagerEvents	typeref:typename:NMEvents
nmProxy	gdbus/NetworkManagerGdbusMgr.h	/^                GDBusProxy *nmProxy = NULL;$/;"	m	class:WPEFramework::Plugin::DbusMgr	typeref:typename:GDBusProxy *
nmUtils	NetworkManagerGnomeUtils.h	/^        class nmUtils$/;"	c	namespace:WPEFramework::Plugin
noise	INetworkManager.h	/^                    string             noise;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::WiFiSSIDInfo	typeref:typename:string
noise	NetworkManager.json	/^                    "noise":{$/;"	o	object:methods.GetConnectedSSID.result.properties
noise	NetworkManagerRDKProxy.cpp	/^    float noise;              \/**< The average noise strength in dBm. *\/$/;"	m	struct:_WiFiConnectedSSIDInfo	typeref:typename:float	file:
notifyInternetStatusChangedEvent	NetworkManagerConnectivity.cpp	/^    void ConnectivityMonitor::notifyInternetStatusChangedEvent(Exchange::INetworkManager::Intern/;"	f	class:WPEFramework::Plugin::ConnectivityMonitor	typeref:typename:void
nsm_connectivity_httpcode	NetworkManagerConnectivity.h	/^enum nsm_connectivity_httpcode {$/;"	g
oldInterface	NetworkManagerRDKProxy.cpp	/^    char oldInterface[16];$/;"	m	struct:__anon7d34ee9e0708	typeref:typename:char[16]	file:
onActivateComplete	NetworkManagerGnomeWIFI.cpp	/^        static void onActivateComplete(GObject *source_object, GAsyncResult *res, gpointer user_/;"	f	namespace:WPEFramework::Plugin	typeref:typename:void	file:
onActiveInterfaceChange	LegacyPlugin_NetworkAPIs.cpp	/^        void Network::onActiveInterfaceChange(const JsonObject& parameters)$/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:void
onActiveInterfaceChange	NetworkManager.h	/^                void onActiveInterfaceChange(const string prevActiveInterface, const string curr/;"	f	class:WPEFramework::Plugin::NetworkManager::Notification	typeref:typename:void
onActiveInterfaceChange	NetworkManager.json	/^                "onActiveInterfaceChange" : "Triggered when device’s default interface changed/;"	s	object:methods.SetPrimaryInterface.events
onActiveInterfaceChange	NetworkManager.json	/^        "onActiveInterfaceChange":{$/;"	o	object:events
onActiveInterfaceChange	NetworkManagerJsonRpc.cpp	/^        void NetworkManager::onActiveInterfaceChange(const string prevActiveInterface, const str/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:void
onActiveInterfaceChangeCb	NetworkManagerGnomeEvents.cpp	/^    void GnomeNetworkManagerEvents::onActiveInterfaceChangeCb(std::string newIface)$/;"	f	class:WPEFramework::Plugin::GnomeNetworkManagerEvents	typeref:typename:void
onActiveInterfaceChangeCb	gdbus/NetworkManagerGdbusEvent.cpp	/^    void NetworkManagerEvents::onActiveInterfaceChangeCb(std::string newIface)$/;"	f	class:WPEFramework::Plugin::NetworkManagerEvents	typeref:typename:void
onAddressChange	NetworkManager.json	/^                "onAddressChange" : "Triggered when an IP Address is assigned or lost",$/;"	s	object:methods.RemoveKnownSSID.events
onAddressChange	NetworkManager.json	/^                "onAddressChange" : "Triggered when an IP Address is assigned or lost",$/;"	s	object:methods.StartWPS.events
onAddressChange	NetworkManager.json	/^                "onAddressChange" : "Triggered when an IP Address is assigned or lost",$/;"	s	object:methods.WiFiDisconnect.events
onAddressChange	NetworkManager.json	/^                "onAddressChange" : "Triggered when the device connects to router.",$/;"	s	object:methods.SetIPSettings.events
onAddressChange	NetworkManager.json	/^                "onAddressChange" : "Triggered when the device connects to router.",$/;"	s	object:methods.SetPrimaryInterface.events
onAddressChange	NetworkManager.json	/^        "onAddressChange":{$/;"	o	object:events
onAddressChangeCb	NetworkManagerGnomeEvents.cpp	/^    void GnomeNetworkManagerEvents::onAddressChangeCb(std::string iface, std::string ipAddress, /;"	f	class:WPEFramework::Plugin::GnomeNetworkManagerEvents	typeref:typename:void
onAddressChangeCb	gdbus/NetworkManagerGdbusEvent.cpp	/^    void NetworkManagerEvents::onAddressChangeCb(std::string iface, bool acquired, bool isIPv6, /;"	f	class:WPEFramework::Plugin::NetworkManagerEvents	typeref:typename:void
onAvailableSSIDs	LegacyPlugin_WiFiManagerAPIs.cpp	/^        void WiFiManager::onAvailableSSIDs(const JsonObject& parameters)$/;"	f	class:WPEFramework::Plugin::WiFiManager	typeref:typename:void
onAvailableSSIDs	NetworkManager.h	/^                void onAvailableSSIDs(const string jsonOfScanResults) override$/;"	f	class:WPEFramework::Plugin::NetworkManager::Notification	typeref:typename:void
onAvailableSSIDs	NetworkManager.json	/^                "onAvailableSSIDs" : "Triggered when list of SSIDs is available after the scan c/;"	s	object:methods.StartWiFiScan.events
onAvailableSSIDs	NetworkManager.json	/^        "onAvailableSSIDs":{$/;"	o	object:events
onAvailableSSIDs	NetworkManagerJsonRpc.cpp	/^        void NetworkManager::onAvailableSSIDs(const string jsonOfScanResults)$/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:void
onAvailableSSIDsCb	NetworkManagerGnomeEvents.cpp	/^    void GnomeNetworkManagerEvents::onAvailableSSIDsCb(NMDeviceWifi *wifiDevice, GParamSpec *psp/;"	f	class:WPEFramework::Plugin::GnomeNetworkManagerEvents	typeref:typename:void
onAvailableSSIDsCb	gdbus/NetworkManagerGdbusEvent.cpp	/^    void NetworkManagerEvents::onAvailableSSIDsCb(const char* wifiDevicePath)$/;"	f	class:WPEFramework::Plugin::NetworkManagerEvents	typeref:typename:void
onConnectionSignalReceivedCB	gdbus/NetworkManagerGdbusEvent.cpp	/^    static void onConnectionSignalReceivedCB (GDBusProxy *proxy, gchar *senderName, gchar *signa/;"	f	namespace:WPEFramework::Plugin	typeref:typename:void	file:
onIPAddressChange	LegacyPlugin_NetworkAPIs.cpp	/^        void Network::onIPAddressChange(const JsonObject& parameters)$/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:void
onIPAddressChange	NetworkManager.h	/^                void onIPAddressChange(const string interface, const string ipversion, const str/;"	f	class:WPEFramework::Plugin::NetworkManager::Notification	typeref:typename:void
onIPAddressChange	NetworkManagerJsonRpc.cpp	/^        void NetworkManager::onIPAddressChange(const string interface, const string ipversion, c/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:void
onInterfaceStateChange	LegacyPlugin_NetworkAPIs.cpp	/^        void Network::onInterfaceStateChange(const JsonObject& parameters)$/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:void
onInterfaceStateChange	NetworkManager.h	/^                void onInterfaceStateChange(const Exchange::INetworkManager::InterfaceState stat/;"	f	class:WPEFramework::Plugin::NetworkManager::Notification	typeref:typename:void
onInterfaceStateChange	NetworkManager.json	/^                "onInterfaceStateChange" : "Triggered when interface’s state changed",$/;"	s	object:methods.SetPrimaryInterface.events
onInterfaceStateChange	NetworkManager.json	/^                "onInterfaceStateChange" : "Triggered when interface’s status changes to enabl/;"	s	object:methods.SetInterfaceState.events
onInterfaceStateChange	NetworkManager.json	/^        "onInterfaceStateChange":{$/;"	o	object:events
onInterfaceStateChange	NetworkManagerJsonRpc.cpp	/^        void NetworkManager::onInterfaceStateChange(const Exchange::INetworkManager::InterfaceSt/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:void
onInterfaceStateChangeCb	NetworkManagerGnomeEvents.cpp	/^    void GnomeNetworkManagerEvents::onInterfaceStateChangeCb(uint8_t newState, std::string iface/;"	f	class:WPEFramework::Plugin::GnomeNetworkManagerEvents	typeref:typename:void
onInterfaceStateChangeCb	gdbus/NetworkManagerGdbusEvent.cpp	/^    void NetworkManagerEvents::onInterfaceStateChangeCb(Exchange::INetworkManager::InterfaceStat/;"	f	class:WPEFramework::Plugin::NetworkManagerEvents	typeref:typename:void
onInternetStatusChange	LegacyPlugin_NetworkAPIs.cpp	/^        void Network::onInternetStatusChange(const JsonObject& parameters)$/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:void
onInternetStatusChange	NetworkManager.h	/^                void onInternetStatusChange(const Exchange::INetworkManager::InternetStatus prev/;"	f	class:WPEFramework::Plugin::NetworkManager::Notification	typeref:typename:void
onInternetStatusChange	NetworkManager.json	/^                "onInternetStatusChange" : "Triggered when each IP address is lost or acquired."$/;"	s	object:methods.SetIPSettings.events
onInternetStatusChange	NetworkManager.json	/^                "onInternetStatusChange" : "Triggered when each IP address is lost or acquired."$/;"	s	object:methods.SetPrimaryInterface.events
onInternetStatusChange	NetworkManager.json	/^                "onInternetStatusChange" : "Triggered when internet connection state changed"$/;"	s	object:methods.RemoveKnownSSID.events
onInternetStatusChange	NetworkManager.json	/^                "onInternetStatusChange" : "Triggered when internet connection state changed"$/;"	s	object:methods.StartWPS.events
onInternetStatusChange	NetworkManager.json	/^                "onInternetStatusChange" : "Triggered when internet connection state changed"$/;"	s	object:methods.WiFiDisconnect.events
onInternetStatusChange	NetworkManager.json	/^        "onInternetStatusChange":{$/;"	o	object:events
onInternetStatusChange	NetworkManagerJsonRpc.cpp	/^        void NetworkManager::onInternetStatusChange(const Exchange::INetworkManager::InternetSta/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:void
onPingResponse	NetworkManager.json	/^                "onPingResponse" : "Triggered when Trace request get success."$/;"	s	object:methods.Trace.onTraceResponse
onTimeoutCallback	NetworkManagerTimer.h	/^                std::function<void()> onTimeoutCallback;$/;"	m	class:WPEFramework::Plugin::NetworkManagerTimer	typeref:typename:std::function<void ()>
onTraceResponse	NetworkManager.json	/^            "onTraceResponse":{$/;"	o	object:methods.Trace
onWIFIStateChange	NetworkManager.json	/^                "onWIFIStateChange" : "Triggered when Wifi state changes to DISCONNECTED (only i/;"	s	object:methods.StartWPS.events
onWIFIStateChange	NetworkManager.json	/^                "onWIFIStateChange" : "Triggered when Wifi state changes to DISCONNECTED (only i/;"	s	object:methods.WiFiDisconnect.events
onWIFIStateChange	NetworkManager.json	/^                "onWIFIStateChange" : "Triggered when Wifi state changes to DISCONNECTED."$/;"	s	object:methods.StopWPS.events
onWIFIStateChanged	NetworkManagerGnomeEvents.cpp	/^    void GnomeNetworkManagerEvents::onWIFIStateChanged(uint8_t state)$/;"	f	class:WPEFramework::Plugin::GnomeNetworkManagerEvents	typeref:typename:void
onWIFIStateChanged	gdbus/NetworkManagerGdbusEvent.cpp	/^    void NetworkManagerEvents::onWIFIStateChanged(Exchange::INetworkManager::WiFiState state, st/;"	f	class:WPEFramework::Plugin::NetworkManagerEvents	typeref:typename:void
onWiFiSignalStrengthChange	LegacyPlugin_WiFiManagerAPIs.cpp	/^        void WiFiManager::onWiFiSignalStrengthChange(const JsonObject& parameters)$/;"	f	class:WPEFramework::Plugin::WiFiManager	typeref:typename:void
onWiFiSignalStrengthChange	NetworkManager.h	/^                void onWiFiSignalStrengthChange(const string ssid, const string strength, const /;"	f	class:WPEFramework::Plugin::NetworkManager::Notification	typeref:typename:void
onWiFiSignalStrengthChange	NetworkManager.json	/^                "onWiFiSignalStrengthChange" : "Triggered when Wifi signal strength switches bet/;"	s	object:methods.GetWiFiSignalStrength.events
onWiFiSignalStrengthChange	NetworkManager.json	/^        "onWiFiSignalStrengthChange":{$/;"	o	object:events
onWiFiSignalStrengthChange	NetworkManagerJsonRpc.cpp	/^        void NetworkManager::onWiFiSignalStrengthChange(const string ssid, const string strength/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:void
onWiFiStateChange	LegacyPlugin_WiFiManagerAPIs.cpp	/^        void WiFiManager::onWiFiStateChange(const JsonObject& parameters)$/;"	f	class:WPEFramework::Plugin::WiFiManager	typeref:typename:void
onWiFiStateChange	NetworkManager.h	/^                void onWiFiStateChange(const Exchange::INetworkManager::WiFiState state) overrid/;"	f	class:WPEFramework::Plugin::NetworkManager::Notification	typeref:typename:void
onWiFiStateChange	NetworkManager.json	/^                "onWiFiStateChange" : "Triggered when Wifi state changes to CONNECTING, CONNECTE/;"	s	object:methods.WiFiConnect.events
onWiFiStateChange	NetworkManager.json	/^                "onWiFiStateChange" : "Triggered when Wifi state changes to DISCONNECTED",$/;"	s	object:methods.RemoveKnownSSID.events
onWiFiStateChange	NetworkManager.json	/^        "onWiFiStateChange":{$/;"	o	object:events
onWiFiStateChange	NetworkManagerJsonRpc.cpp	/^        void NetworkManager::onWiFiStateChange(const Exchange::INetworkManager::WiFiState state)$/;"	f	class:WPEFramework::Plugin::NetworkManager	typeref:typename:void
open_internet	NetworkManagerStunClient.h	/^  open_internet,$/;"	e	enum:stun::network_access_type
operator ()	NetworkManagerConnectivity.h	/^                bool operator()() { return (ipv6Resolved || ipv4Resolved);}$/;"	f	class:WPEFramework::Plugin::DnsResolver	typeref:typename:bool
operator ()	NetworkManagerConnectivity.h	/^            std::vector<std::string> operator()() { return getConnectivityMonitorEndpoints(); }$/;"	f	class:WPEFramework::Plugin::EndpointManager	typeref:typename:std::vector<std::string>
operator =	NetworkManager.h	/^                Cache& operator=(CacheValue&& value) {$/;"	f	class:WPEFramework::Plugin::NetworkManager::Cache	typeref:typename:Cache &
operator =	NetworkManager.h	/^                Cache& operator=(const CacheValue& value) {$/;"	f	class:WPEFramework::Plugin::NetworkManager::Cache	typeref:typename:Cache &
operator ==	NetworkManagerTimer.h	/^                        inline bool operator==(const NetworkManagerTimerJob& RHS) const$/;"	f	class:WPEFramework::Plugin::NetworkManagerTimer::NetworkManagerTimerJob	typeref:typename:bool
operator int	NetworkManagerStunClient.cpp	/^    operator int() const { return m_fd; }$/;"	f	class:stun::details::file_descriptor	file:
packetLoss	NetworkManager.json	/^                    "packetLoss": {$/;"	o	object:methods.Ping.result.properties
packets	NetworkManager.json	/^                    "packets": {$/;"	o	object:methods.Trace.params.properties
packets	NetworkManager.json	/^        "packets": {$/;"	o	object:definitions
packetsReceived	NetworkManager.json	/^                    "packetsReceived": {$/;"	o	object:methods.Ping.result.properties
packetsTransmitted	NetworkManager.json	/^                    "packetsTransmitted": {$/;"	o	object:methods.Ping.result.properties
params	NetworkManager.json	/^            "params": {$/;"	o	object:events.onActiveInterfaceChange
params	NetworkManager.json	/^            "params": {$/;"	o	object:events.onAddressChange
params	NetworkManager.json	/^            "params": {$/;"	o	object:events.onAvailableSSIDs
params	NetworkManager.json	/^            "params": {$/;"	o	object:events.onInterfaceStateChange
params	NetworkManager.json	/^            "params": {$/;"	o	object:events.onInternetStatusChange
params	NetworkManager.json	/^            "params": {$/;"	o	object:events.onWiFiSignalStrengthChange
params	NetworkManager.json	/^            "params": {$/;"	o	object:events.onWiFiStateChange
params	NetworkManager.json	/^            "params": {$/;"	o	object:methods.AddToKnownSSIDs
params	NetworkManager.json	/^            "params": {$/;"	o	object:methods.GetIPSettings
params	NetworkManager.json	/^            "params": {$/;"	o	object:methods.GetInterfaceState
params	NetworkManager.json	/^            "params": {$/;"	o	object:methods.GetPublicIP
params	NetworkManager.json	/^            "params": {$/;"	o	object:methods.IsConnectedToInternet
params	NetworkManager.json	/^            "params": {$/;"	o	object:methods.Ping
params	NetworkManager.json	/^            "params": {$/;"	o	object:methods.RemoveKnownSSID
params	NetworkManager.json	/^            "params": {$/;"	o	object:methods.SetConnectivityTestEndpoints
params	NetworkManager.json	/^            "params": {$/;"	o	object:methods.SetIPSettings
params	NetworkManager.json	/^            "params": {$/;"	o	object:methods.SetInterfaceState
params	NetworkManager.json	/^            "params": {$/;"	o	object:methods.SetLogLevel
params	NetworkManager.json	/^            "params": {$/;"	o	object:methods.SetPrimaryInterface
params	NetworkManager.json	/^            "params": {$/;"	o	object:methods.SetStunEndpoint
params	NetworkManager.json	/^            "params": {$/;"	o	object:methods.StartWPS
params	NetworkManager.json	/^            "params": {$/;"	o	object:methods.StartWiFiScan
params	NetworkManager.json	/^            "params": {$/;"	o	object:methods.Trace
params	NetworkManager.json	/^            "params": {$/;"	o	object:methods.WiFiConnect
passphrase	INetworkManager.h	/^                    string           passphrase;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::WiFiConnectTo	typeref:typename:string
passphrase	NetworkManager.json	/^                    "passphrase": {$/;"	o	object:methods.AddToKnownSSIDs.params.properties
passphrase	NetworkManager.json	/^                    "passphrase": {$/;"	o	object:methods.WiFiConnect.params.properties
passphrase	NetworkManager.json	/^        "passphrase": {$/;"	o	object:definitions
passphrase	NetworkManagerRDKProxy.cpp	/^    char passphrase[PASSPHRASE_BUFF];$/;"	m	struct:_WiFiConnection	typeref:typename:char[]	file:
password	NetworkManagerImplementation.h	/^                    Core::JSON::String password;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation::WiFiConfig	typeref:typename:Core::JSON::String
password	NetworkManagerStunClient.h	/^  static uint16_t constexpr password = 0x0007;$/;"	v	namespace:stun::attribute_type	typeref:typename:uint16_t 
path	gdbus/NetworkManagerGdbusUtils.h	/^    std::string path;$/;"	m	struct:deviceInfo	typeref:typename:std::string
pbc	NetworkManagerRDKProxy.cpp	/^    bool pbc;$/;"	m	struct:_IARM_Bus_WiFiSrvMgr_WPS_Parameters_t	typeref:typename:bool	file:
persist	INetworkManager.h	/^                    bool             persist;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::WiFiConnectTo	typeref:typename:bool
persist	NetworkManager.json	/^                    "persist": {$/;"	o	object:methods.WiFiConnect.params.properties
persist	NetworkManagerRDKProxy.cpp	/^   bool persist;$/;"	m	struct:_IARM_BUS_NetSrvMgr_Iface_EventData_t	typeref:typename:bool	file:
persistSSIDInfo	NetworkManagerRDKProxy.cpp	/^    bool persistSSIDInfo;$/;"	m	struct:_WiFiConnection	typeref:typename:bool	file:
pin	NetworkManager.json	/^                    "pin": {$/;"	o	object:methods.StartWPS.params.properties
pin	NetworkManager.json	/^                    "pin": {$/;"	o	object:methods.StartWPS.result.properties
pin	NetworkManagerRDKProxy.cpp	/^    char pin[9];$/;"	m	struct:_IARM_Bus_WiFiSrvMgr_WPS_Parameters_t	typeref:typename:char[9]	file:
platform_init	NetworkManagerGnomeProxy.cpp	/^        void NetworkManagerImplementation::platform_init()$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:void
platform_init	NetworkManagerRDKProxy.cpp	/^        void NetworkManagerImplementation::platform_init()$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:void
platform_init	gdbus/NetworkManagerGdbusProxy.cpp	/^        void NetworkManagerImplementation::platform_init()$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:void
port	NetworkManager.json	/^                    "port": {$/;"	o	object:methods.GetStunEndpoint.result.properties
port	NetworkManager.json	/^                    "port": {$/;"	o	object:methods.SetStunEndpoint.params.properties
port	NetworkManager.json	/^        "port":{$/;"	o	object:definitions
port	NetworkManagerImplementation.h	/^                        Core::JSON::DecUInt32 port;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation::Stun	typeref:typename:Core::JSON::DecUInt32
port	NetworkManagerRDKProxy.cpp	/^    uint16_t port;$/;"	m	struct:__anon7d34ee9e0808	typeref:typename:uint16_t	file:
port	NetworkManagerStunClient.h	/^  uint16_t port;$/;"	m	struct:stun::server	typeref:typename:uint16_t
port_resricted	NetworkManagerStunClient.h	/^  port_resricted,$/;"	e	enum:stun::network_access_type
precondition	LegacyPlugin_NetworkAPIs.conf.in	/^precondition = ["Platform"]$/;"	k
precondition	LegacyPlugin_WiFiManagerAPIs.conf.in	/^precondition = ["Platform"]$/;"	k
prefix	INetworkManager.h	/^                uint32_t prefix     \/* @text: prefix *\/;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::IPAddress	typeref:typename:uint32_t
prefix	NetworkManager.json	/^                    "prefix": {$/;"	o	object:methods.GetIPSettings.result.properties
prefix	NetworkManager.json	/^                    "prefix": {$/;"	o	object:methods.SetIPSettings.params.properties
prefix	NetworkManager.json	/^        "prefix": {$/;"	o	object:definitions
prevActiveInterface	NetworkManager.json	/^                    "prevActiveInterface":{$/;"	o	object:events.onActiveInterfaceChange.params.properties
prevState	NetworkManager.json	/^                    "prevState":{$/;"	o	object:events.onInternetStatusChange.params.properties
prevStatus	NetworkManager.json	/^                    "prevStatus":{$/;"	o	object:events.onInternetStatusChange.params.properties
primaryConnectionCb	NetworkManagerGnomeEvents.cpp	/^    static void primaryConnectionCb(NMClient *client, GParamSpec *param, NMEvents *nmEvents)$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:void	file:
primaryConnectionChangedCB	gdbus/NetworkManagerGdbusEvent.cpp	/^    static void primaryConnectionChangedCB(GDBusProxy *proxy, GVariant *changedPropes, GStrv inv/;"	f	namespace:WPEFramework::Plugin	typeref:typename:void	file:
primarydns	INetworkManager.h	/^                string primarydns   \/* @text: primarydns *\/;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::IPAddress	typeref:typename:string
primarydns	NetworkManager.json	/^                    "primarydns": {$/;"	o	object:methods.GetIPSettings.result.properties
primarydns	NetworkManager.json	/^                    "primarydns": {$/;"	o	object:methods.SetIPSettings.params.properties
primarydns	NetworkManager.json	/^        "primarydns": {$/;"	o	object:definitions
primarydns	NetworkManagerRDKProxy.cpp	/^    char primarydns[MAX_IP_ADDRESS_LEN];$/;"	m	struct:__anon7d34ee9e0308	typeref:typename:char[]	file:
printActiveSSIDsOnly	NetworkManagerGnomeUtils.cpp	/^        void nmUtils::printActiveSSIDsOnly(NMDeviceWifi *wifiDevice)$/;"	f	class:WPEFramework::Plugin::nmUtils	typeref:typename:void
printSSIDs	Tests/raspberrypi/NetworkManagerGdbusTest.cpp	/^void printSSIDs(const std::list<std::string>& ssids)$/;"	f	typeref:typename:void
private_key	INetworkManager.h	/^                    string           private_key;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::WiFiConnectTo	typeref:typename:string
private_key	NetworkManager.json	/^                    "private_key": {$/;"	o	object:methods.WiFiConnect.params.properties
private_key_passwd	INetworkManager.h	/^                    string           private_key_passwd;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::WiFiConnectTo	typeref:typename:string
private_key_passwd	NetworkManager.json	/^                    "private_key_passwd": {$/;"	o	object:methods.WiFiConnect.params.properties
privatekey	NetworkManagerRDKProxy.cpp	/^    char privatekey[MAX_FILE_PATH_LEN];$/;"	m	struct:_WiFiConnection	typeref:typename:char[]	file:
process	NetworkManager.conf.in	/^process= JSON()$/;"	k
properties	NetworkManager.json	/^                            "properties": {$/;"	o	object:events.onAvailableSSIDs.params.properties.ssids.items
properties	NetworkManager.json	/^                            "properties": {$/;"	o	object:methods.GetAvailableInterfaces.result.properties.interfaces.items
properties	NetworkManager.json	/^                        "properties": {$/;"	o	object:methods.GetSupportedsecurityModes.result.properties.security_modes
properties	NetworkManager.json	/^                  "properties": {$/;"	o	object:methods.StartWiFiScan.result
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:events.onActiveInterfaceChange.params
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:events.onAddressChange.params
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:events.onAvailableSSIDs.params
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:events.onInterfaceStateChange.params
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:events.onInternetStatusChange.params
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:events.onWiFiSignalStrengthChange.params
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:events.onWiFiStateChange.params
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.AddToKnownSSIDs.params
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.AddToKnownSSIDs.result
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.GetAvailableInterfaces.result
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.GetCaptivePortalURI.result
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.GetConnectedSSID.result
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.GetConnectivityTestEndpoints.result
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.GetIPSettings.params
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.GetIPSettings.result
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.GetInterfaceState.params
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.GetInterfaceState.result
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.GetKnownSSIDs.result
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.GetLogLevel.result
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.GetPrimaryInterface.result
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.GetPublicIP.params
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.GetPublicIP.result
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.GetStunEndpoint.result
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.GetSupportedsecurityModes.result
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.GetWiFiSignalStrength.result
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.GetWifiState.result
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.IsConnectedToInternet.params
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.IsConnectedToInternet.result
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.Ping.params
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.Ping.result
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.RemoveKnownSSID.params
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.RemoveKnownSSID.result
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.SetConnectivityTestEndpoints.params
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.SetConnectivityTestEndpoints.result
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.SetIPSettings.params
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.SetIPSettings.result
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.SetInterfaceState.params
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.SetInterfaceState.result
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.SetLogLevel.params
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.SetLogLevel.result
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.SetPrimaryInterface.params
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.SetPrimaryInterface.result
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.SetStunEndpoint.params
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.SetStunEndpoint.result
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.StartWPS.params
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.StartWPS.result
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.StartWiFiScan.params
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.StopWPS.result
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.StopWiFiScan.result
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.Trace.params
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.Trace.result
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.WiFiConnect.params
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.WiFiConnect.result
properties	NetworkManager.json	/^                "properties": {$/;"	o	object:methods.WiFiDisconnect.result
protocol	NetworkManagerStunClient.h	/^enum class protocol {$/;"	g	namespace:stun
public_ip	NetworkManagerRDKProxy.cpp	/^    char public_ip[MAX_IP_ADDRESS_LEN];$/;"	m	struct:__anon7d34ee9e0808	typeref:typename:char[]	file:
public_ip	NetworkManagerStunClient.h	/^  std::string public_ip;$/;"	m	struct:stun::bind_result	typeref:typename:std::string
quality	NetworkManager.json	/^                    "quality":{$/;"	o	object:events.onWiFiSignalStrengthChange.params.properties
quality	NetworkManager.json	/^                    "quality":{$/;"	o	object:methods.GetWiFiSignalStrength.result.properties
quality	NetworkManager.json	/^        "quality":{$/;"	o	object:definitions
quit	NetworkManagerGnomeWIFI.cpp	/^        bool wifiManager::quit(NMDevice *wifiNMDevice)$/;"	f	class:WPEFramework::Plugin::wifiManager	typeref:typename:bool
random_fill	NetworkManagerStunClient.cpp	/^  inline void random_fill(iterator begin, iterator end) {$/;"	f	namespace:stun::details	typeref:typename:void
rate	INetworkManager.h	/^                    string             rate;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::WiFiSSIDInfo	typeref:typename:string
rate	NetworkManager.json	/^                    "rate":{$/;"	o	object:methods.GetConnectedSSID.result.properties
rate	NetworkManagerRDKProxy.cpp	/^    float rate;               \/**< The Physical data rate in Mbps *\/$/;"	m	struct:_WiFiConnectedSSIDInfo	typeref:typename:float	file:
readEndpointsFromFile	NetworkManagerConnectivity.cpp	/^    std::vector<std::string> EndpointManager::readEndpointsFromFile()$/;"	f	class:WPEFramework::Plugin::EndpointManager	typeref:typename:std::vector<std::string>
reflected_from	NetworkManagerStunClient.h	/^  static uint16_t constexpr reflected_from = 0x000b;$/;"	v	namespace:stun::attribute_type	typeref:typename:uint16_t 
registerLegacyMethods	LegacyPlugin_NetworkAPIs.cpp	/^        void Network::registerLegacyMethods(void)$/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:void
registerLegacyMethods	LegacyPlugin_WiFiManagerAPIs.cpp	/^        void WiFiManager::registerLegacyMethods(void)$/;"	f	class:WPEFramework::Plugin::WiFiManager	typeref:typename:void
removeKnownSSID	NetworkManagerGnomeWIFI.cpp	/^        bool wifiManager::removeKnownSSID(const string& ssid)$/;"	f	class:WPEFramework::Plugin::wifiManager	typeref:typename:bool
removeKnownSSIDCb	NetworkManagerGnomeWIFI.cpp	/^        static void removeKnownSSIDCb(GObject *client, GAsyncResult *result, gpointer user_data)$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:void	file:
removeKnownSSIDs	gdbus/NetworkManagerGdbusClient.cpp	/^        bool NetworkManagerClient::removeKnownSSIDs(const std::string& ssid)$/;"	f	class:WPEFramework::Plugin::NetworkManagerClient	typeref:typename:bool
required	NetworkManager.json	/^                            "required": [$/;"	a	object:events.onAvailableSSIDs.params.properties.ssids.items
required	NetworkManager.json	/^                            "required": [$/;"	a	object:methods.GetAvailableInterfaces.result.properties.interfaces.items
required	NetworkManager.json	/^                        "required": [$/;"	a	object:methods.GetSupportedsecurityModes.result.properties.security_modes
required	NetworkManager.json	/^                "required": [$/;"	a	object:events.onActiveInterfaceChange.params
required	NetworkManager.json	/^                "required": [$/;"	a	object:events.onAddressChange.params
required	NetworkManager.json	/^                "required": [$/;"	a	object:events.onInterfaceStateChange.params
required	NetworkManager.json	/^                "required": [$/;"	a	object:events.onInternetStatusChange.params
required	NetworkManager.json	/^                "required": [$/;"	a	object:events.onWiFiSignalStrengthChange.params
required	NetworkManager.json	/^                "required": [$/;"	a	object:events.onWiFiStateChange.params
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.AddToKnownSSIDs.params
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.AddToKnownSSIDs.result
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.GetAvailableInterfaces.result
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.GetCaptivePortalURI.result
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.GetConnectedSSID.result
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.GetConnectivityTestEndpoints.result
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.GetIPSettings.params
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.GetIPSettings.result
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.GetInterfaceState.params
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.GetInterfaceState.result
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.GetKnownSSIDs.result
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.GetLogLevel.result
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.GetPrimaryInterface.result
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.GetPublicIP.params
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.GetPublicIP.result
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.GetStunEndpoint.result
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.GetSupportedsecurityModes.result
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.GetWiFiSignalStrength.result
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.GetWifiState.result
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.IsConnectedToInternet.params
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.IsConnectedToInternet.result
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.Ping.params
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.Ping.result
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.RemoveKnownSSID.params
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.RemoveKnownSSID.result
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.SetConnectivityTestEndpoints.params
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.SetConnectivityTestEndpoints.result
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.SetIPSettings.params
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.SetIPSettings.result
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.SetInterfaceState.params
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.SetInterfaceState.result
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.SetLogLevel.params
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.SetLogLevel.result
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.SetPrimaryInterface.params
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.SetPrimaryInterface.result
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.SetStunEndpoint.params
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.StartWPS.params
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.StartWPS.result
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.StartWiFiScan.params
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.StartWiFiScan.result
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.StopWPS.result
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.StopWiFiScan.result
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.Trace.params
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.Trace.result
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.WiFiConnect.params
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.WiFiConnect.result
required	NetworkManager.json	/^                "required": [$/;"	a	object:methods.WiFiDisconnect.result
reset	NetworkManager.h	/^                void reset() {$/;"	f	class:WPEFramework::Plugin::NetworkManager::Cache	typeref:typename:void
resolveIP	NetworkManagerConnectivity.cpp	/^    bool DnsResolver::resolveIP(std::string& uri, Exchange::INetworkManager::IPVersion& ipversio/;"	f	class:WPEFramework::Plugin::DnsResolver	typeref:typename:bool
resolve_hostname	NetworkManagerStunClient.cpp	/^  std::vector<sockaddr_storage> resolve_hostname(std::string const & host, uint16_t port, stun::/;"	f	namespace:stun::details	typeref:typename:std::vector<sockaddr_storage>
response_address	NetworkManagerStunClient.h	/^  static uint16_t constexpr response_address = 0x0002;$/;"	v	namespace:stun::attribute_type	typeref:typename:uint16_t 
restricted	NetworkManagerStunClient.h	/^  restricted,$/;"	e	enum:stun::network_access_type
result	NetworkManager.json	/^            "result": {$/;"	o	object:methods.AddToKnownSSIDs
result	NetworkManager.json	/^            "result": {$/;"	o	object:methods.GetAvailableInterfaces
result	NetworkManager.json	/^            "result": {$/;"	o	object:methods.GetCaptivePortalURI
result	NetworkManager.json	/^            "result": {$/;"	o	object:methods.GetConnectedSSID
result	NetworkManager.json	/^            "result": {$/;"	o	object:methods.GetConnectivityTestEndpoints
result	NetworkManager.json	/^            "result": {$/;"	o	object:methods.GetIPSettings
result	NetworkManager.json	/^            "result": {$/;"	o	object:methods.GetInterfaceState
result	NetworkManager.json	/^            "result": {$/;"	o	object:methods.GetKnownSSIDs
result	NetworkManager.json	/^            "result": {$/;"	o	object:methods.GetLogLevel
result	NetworkManager.json	/^            "result": {$/;"	o	object:methods.GetPrimaryInterface
result	NetworkManager.json	/^            "result": {$/;"	o	object:methods.GetPublicIP
result	NetworkManager.json	/^            "result": {$/;"	o	object:methods.GetStunEndpoint
result	NetworkManager.json	/^            "result": {$/;"	o	object:methods.GetSupportedsecurityModes
result	NetworkManager.json	/^            "result": {$/;"	o	object:methods.GetWiFiSignalStrength
result	NetworkManager.json	/^            "result": {$/;"	o	object:methods.GetWifiState
result	NetworkManager.json	/^            "result": {$/;"	o	object:methods.IsConnectedToInternet
result	NetworkManager.json	/^            "result": {$/;"	o	object:methods.Ping
result	NetworkManager.json	/^            "result": {$/;"	o	object:methods.RemoveKnownSSID
result	NetworkManager.json	/^            "result": {$/;"	o	object:methods.SetConnectivityTestEndpoints
result	NetworkManager.json	/^            "result": {$/;"	o	object:methods.SetIPSettings
result	NetworkManager.json	/^            "result": {$/;"	o	object:methods.SetInterfaceState
result	NetworkManager.json	/^            "result": {$/;"	o	object:methods.SetLogLevel
result	NetworkManager.json	/^            "result": {$/;"	o	object:methods.SetPrimaryInterface
result	NetworkManager.json	/^            "result": {$/;"	o	object:methods.SetStunEndpoint
result	NetworkManager.json	/^            "result": {$/;"	o	object:methods.StartWPS
result	NetworkManager.json	/^            "result": {$/;"	o	object:methods.StartWiFiScan
result	NetworkManager.json	/^            "result": {$/;"	o	object:methods.StopWPS
result	NetworkManager.json	/^            "result": {$/;"	o	object:methods.StopWiFiScan
result	NetworkManager.json	/^            "result": {$/;"	o	object:methods.Trace
result	NetworkManager.json	/^            "result": {$/;"	o	object:methods.WiFiConnect
result	NetworkManager.json	/^            "result": {$/;"	o	object:methods.WiFiDisconnect
results	NetworkManager.json	/^                   "results": {$/;"	o	object:methods.Trace.result.properties
retrieveSSID	LegacyPlugin_WiFiManagerAPIs.cpp	/^        uint32_t WiFiManager::retrieveSSID (const JsonObject& parameters, JsonObject& response)$/;"	f	class:WPEFramework::Plugin::WiFiManager	typeref:typename:uint32_t
retrieveValues	WiFiSignalStrengthMonitor.cpp	/^        std::string WiFiSignalStrengthMonitor::retrieveValues(const char *command, const char* k/;"	f	class:WPEFramework::Plugin::WiFiSignalStrengthMonitor	typeref:typename:std::string
returnJson	LegacyPlugin_NetworkAPIs.cpp	/^#define returnJson(/;"	d	file:
returnJson	LegacyPlugin_WiFiManagerAPIs.cpp	/^#define returnJson(/;"	d	file:
returnJson	NetworkManagerJsonRpc.cpp	/^#define returnJson(/;"	d	file:
rsnFlag	gdbus/NetworkManagerGdbusUtils.h	/^    NM80211ApSecurityFlags rsnFlag;$/;"	m	struct:apInfo	typeref:typename:NM80211ApSecurityFlags
rssid_command	WiFiSignalStrengthMonitor.cpp	/^#define rssid_command /;"	d	file:
saveSSID	LegacyPlugin_WiFiManagerAPIs.cpp	/^        uint32_t WiFiManager::saveSSID (const JsonObject& parameters, JsonObject& response)$/;"	f	class:WPEFramework::Plugin::WiFiManager	typeref:typename:uint32_t
saveSSID	NetworkManagerRDKProxy.cpp	/^        WiFiConnection saveSSID;$/;"	m	union:_IARM_Bus_WiFiSrvMgr_Param_t::__anon7d34ee9e0a0a	typeref:typename:WiFiConnection	file:
secMode	NetworkManagerRDKProxy.cpp	/^    SsidSecurity secMode;$/;"	m	struct:_WiFiPairedSSIDInfo	typeref:typename:SsidSecurity	file:
secondarydns	INetworkManager.h	/^                string secondarydns \/* @text: secondarydns *\/;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::IPAddress	typeref:typename:string
secondarydns	NetworkManager.json	/^                    "secondarydns": {$/;"	o	object:methods.GetIPSettings.result.properties
secondarydns	NetworkManager.json	/^                    "secondarydns": {$/;"	o	object:methods.SetIPSettings.params.properties
secondarydns	NetworkManager.json	/^        "secondarydns": {$/;"	o	object:definitions
secondarydns	NetworkManagerRDKProxy.cpp	/^    char secondarydns[MAX_IP_ADDRESS_LEN];$/;"	m	struct:__anon7d34ee9e0308	typeref:typename:char[]	file:
security	INetworkManager.h	/^                    WIFISecurityMode   security;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::WiFiSSIDInfo	typeref:typename:WIFISecurityMode
security	INetworkManager.h	/^                    WIFISecurityMode security;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::WiFiConnectTo	typeref:typename:WIFISecurityMode
security	INetworkManager.h	/^                    WIFISecurityMode security;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::WiFiScanResults	typeref:typename:WIFISecurityMode
security	INetworkManager.h	/^                WIFISecurityMode security;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::WIFISecurityModeInfo	typeref:typename:WIFISecurityMode
security	NetworkManager.json	/^                                "security":{$/;"	o	object:events.onAvailableSSIDs.params.properties.ssids.items.properties
security	NetworkManager.json	/^                    "security": {$/;"	o	object:methods.AddToKnownSSIDs.params.properties
security	NetworkManager.json	/^                    "security": {$/;"	o	object:methods.WiFiConnect.params.properties
security	NetworkManager.json	/^                    "security":{$/;"	o	object:methods.GetConnectedSSID.result.properties
security	NetworkManager.json	/^        "security": {$/;"	o	object:definitions
security	NetworkManagerImplementation.h	/^                    Core::JSON::DecUInt8 security;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation::WiFiConfig	typeref:typename:Core::JSON::DecUInt8
security	NetworkManagerRDKProxy.cpp	/^    char security[BUFF_LENGTH_64];    \/**< security of AP *\/$/;"	m	struct:_WiFiPairedSSIDInfo	typeref:typename:char[]	file:
security	NetworkManagerRDKProxy.cpp	/^    char security[BUFF_LENGTH_64];$/;"	m	struct:_WiFiConnection	typeref:typename:char[]	file:
securityMode	NetworkManagerRDKProxy.cpp	/^    int securityMode;         \/**< Current WiFi Security Mode used for connection. *\/$/;"	m	struct:_WiFiConnectedSSIDInfo	typeref:typename:int	file:
securityName	INetworkManager.h	/^                string           securityName;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::WIFISecurityModeInfo	typeref:typename:string
security_PSK	NetworkManagerRDKProxy.cpp	/^    char security_PSK[PASSPHRASE_BUFF];$/;"	m	struct:_WiFiConnection	typeref:typename:char[]	file:
security_WEPKey	NetworkManagerRDKProxy.cpp	/^    char security_WEPKey[PASSPHRASE_BUFF];$/;"	m	struct:_WiFiConnection	typeref:typename:char[]	file:
security_mode	NetworkManagerRDKProxy.cpp	/^    SsidSecurity security_mode;$/;"	m	struct:_WiFiConnection	typeref:typename:SsidSecurity	file:
security_modes	NetworkManager.json	/^                    "security_modes": {$/;"	o	object:methods.GetSupportedsecurityModes.result.properties
send_binding_request	NetworkManagerStunClient.cpp	/^std::unique_ptr<message> client::send_binding_request(sockaddr_storage const & addr, $/;"	f	class:stun::client	typeref:typename:std::unique_ptr<message>
send_binding_request	NetworkManagerStunClient.cpp	/^std::unique_ptr<message> client::send_binding_request(std::chrono::milliseconds wait_time)$/;"	f	class:stun::client	typeref:typename:std::unique_ptr<message>
send_message	NetworkManagerStunClient.cpp	/^message * client::send_message(sockaddr_storage const & remote_addr, message const & req,$/;"	f	class:stun::client	typeref:typename:message *
server	NetworkManagerRDKProxy.cpp	/^    char server[MAX_HOST_NAME_LEN];$/;"	m	struct:__anon7d34ee9e0808	typeref:typename:char[]	file:
server	NetworkManagerStunClient.h	/^  server(std::string const& h, uint16_t p)$/;"	f	struct:stun::server
server	NetworkManagerStunClient.h	/^struct server {$/;"	s	namespace:stun
setConnectivityMonitorEndpoints	NetworkManagerConnectivity.cpp	/^    void ConnectivityMonitor::setConnectivityMonitorEndpoints(const std::vector<std::string> &en/;"	f	class:WPEFramework::Plugin::ConnectivityMonitor	typeref:typename:void
setConnectivityMonitorEndpoints	NetworkManagerConnectivity.cpp	/^    void EndpointManager::setConnectivityMonitorEndpoints(const std::vector<std::string>& endpoi/;"	f	class:WPEFramework::Plugin::EndpointManager	typeref:typename:void
setConnectivityTestEndpoints	LegacyPlugin_NetworkAPIs.cpp	/^        uint32_t Network::setConnectivityTestEndpoints(const JsonObject& parameters, JsonObject&/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:uint32_t
setDefaultInterface	LegacyPlugin_NetworkAPIs.cpp	/^        uint32_t Network::setDefaultInterface(const JsonObject& parameters, JsonObject& response/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:uint32_t
setIPSettings	LegacyPlugin_NetworkAPIs.cpp	/^        uint32_t Network::setIPSettings(const JsonObject& parameters, JsonObject& response)$/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:uint32_t
setIPSettings	gdbus/NetworkManagerGdbusClient.cpp	/^        bool NetworkManagerClient::setIPSettings(const std::string& interface, const Exchange::I/;"	f	class:WPEFramework::Plugin::NetworkManagerClient	typeref:typename:bool
setInterface	NetworkManagerRDKProxy.cpp	/^        char setInterface[INTERFACE_SIZE];$/;"	m	union:_IARM_BUS_NetSrvMgr_Iface_EventData_t::__anon7d34ee9e0b0a	typeref:typename:char[]	file:
setInterfaceEnabled	LegacyPlugin_NetworkAPIs.cpp	/^        uint32_t Network::setInterfaceEnabled (const JsonObject& parameters, JsonObject& respons/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:uint32_t
setInterfaceState	NetworkManagerGnomeWIFI.cpp	/^        bool wifiManager::setInterfaceState(std::string interface, bool enabled)$/;"	f	class:WPEFramework::Plugin::wifiManager	typeref:typename:bool
setInterfaceState	gdbus/NetworkManagerGdbusClient.cpp	/^        bool NetworkManagerClient::setInterfaceState(const std::string& interface, bool enable)$/;"	f	class:WPEFramework::Plugin::NetworkManagerClient	typeref:typename:bool
setInterval	NetworkManagerTimer.h	/^                void setInterval(int msec)$/;"	f	class:WPEFramework::Plugin::NetworkManagerTimer	typeref:typename:void
setIpSettings	NetworkManagerGnomeWIFI.cpp	/^        bool wifiManager::setIpSettings(const string interface, const Exchange::INetworkManager:/;"	f	class:WPEFramework::Plugin::wifiManager	typeref:typename:bool
setPrimaryInterface	gdbus/NetworkManagerGdbusClient.cpp	/^        bool NetworkManagerClient::setPrimaryInterface(const std::string& interface)$/;"	f	class:WPEFramework::Plugin::NetworkManagerClient	typeref:typename:bool
setSingleShot	NetworkManagerTimer.h	/^                void setSingleShot(bool val)$/;"	f	class:WPEFramework::Plugin::NetworkManagerTimer	typeref:typename:void
setStunEndpoint	LegacyPlugin_NetworkAPIs.cpp	/^        uint32_t Network::setStunEndpoint(const JsonObject& parameters, JsonObject& response)$/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:uint32_t
setWiFiAdapter	NetworkManagerRDKProxy.cpp	/^} setWiFiAdapter;$/;"	t	typeref:struct:_setWiFiAdapter	file:
settingsProxy	gdbus/NetworkManagerGdbusEvent.h	/^        GDBusProxy *settingsProxy; \/\/ settings $/;"	m	struct:WPEFramework::Plugin::__anoncc38525b0108	typeref:typename:GDBusProxy *
setwifiScanOptions	NetworkManagerGnomeEvents.cpp	/^    void GnomeNetworkManagerEvents::setwifiScanOptions(bool doNotify)$/;"	f	class:WPEFramework::Plugin::GnomeNetworkManagerEvents	typeref:typename:void
setwifiScanOptions	gdbus/NetworkManagerGdbusEvent.cpp	/^    void NetworkManagerEvents::setwifiScanOptions(bool doNotify)$/;"	f	class:WPEFramework::Plugin::NetworkManagerEvents	typeref:typename:void
setwifiadapter	NetworkManagerRDKProxy.cpp	/^        setWiFiAdapter setwifiadapter;$/;"	m	union:_IARM_Bus_WiFiSrvMgr_Param_t::__anon7d34ee9e0a0a	typeref:typename:setWiFiAdapter	file:
shared_secret_error_response	NetworkManagerStunClient.h	/^  static uint16_t constexpr shared_secret_error_response = 0x0112;$/;"	v	namespace:stun::message_type	typeref:typename:uint16_t 
shared_secret_request	NetworkManagerStunClient.h	/^  static uint16_t constexpr shared_secret_request = 0x0002;$/;"	v	namespace:stun::message_type	typeref:typename:uint16_t 
shared_secret_response	NetworkManagerStunClient.h	/^  static uint16_t constexpr shared_secret_response = 0x0102;$/;"	v	namespace:stun::message_type	typeref:typename:uint16_t 
signalStrength	NetworkManagerRDKProxy.cpp	/^    float signalStrength;     \/**< The RSSI value in dBm. *\/$/;"	m	struct:_WiFiConnectedSSIDInfo	typeref:typename:float	file:
signalStrengthThresholdExcellent	NetworkManagerGnomeProxy.cpp	/^        const float signalStrengthThresholdExcellent = -50.0f;$/;"	v	namespace:WPEFramework::Plugin	typeref:typename:const float
signalStrengthThresholdExcellent	NetworkManagerRDKProxy.cpp	/^        const float signalStrengthThresholdExcellent = -50.0f;$/;"	v	namespace:WPEFramework::Plugin	typeref:typename:const float
signalStrengthThresholdExcellent	WiFiSignalStrengthMonitor.cpp	/^        static const float signalStrengthThresholdExcellent = -50.0f;$/;"	v	namespace:WPEFramework::Plugin	typeref:typename:const float	file:
signalStrengthThresholdFair	NetworkManagerGnomeProxy.cpp	/^        const float signalStrengthThresholdFair = -67.0f;$/;"	v	namespace:WPEFramework::Plugin	typeref:typename:const float
signalStrengthThresholdFair	NetworkManagerRDKProxy.cpp	/^        const float signalStrengthThresholdFair = -67.0f;$/;"	v	namespace:WPEFramework::Plugin	typeref:typename:const float
signalStrengthThresholdFair	WiFiSignalStrengthMonitor.cpp	/^        static const float signalStrengthThresholdFair = -67.0f;$/;"	v	namespace:WPEFramework::Plugin	typeref:typename:const float	file:
signalStrengthThresholdGood	NetworkManagerGnomeProxy.cpp	/^        const float signalStrengthThresholdGood = -60.0f;$/;"	v	namespace:WPEFramework::Plugin	typeref:typename:const float
signalStrengthThresholdGood	NetworkManagerRDKProxy.cpp	/^        const float signalStrengthThresholdGood = -60.0f;$/;"	v	namespace:WPEFramework::Plugin	typeref:typename:const float
signalStrengthThresholdGood	WiFiSignalStrengthMonitor.cpp	/^        static const float signalStrengthThresholdGood = -60.0f;$/;"	v	namespace:WPEFramework::Plugin	typeref:typename:const float	file:
size	NetworkManagerRDKProxy.cpp	/^    unsigned char         size;$/;"	m	struct:__anon7d34ee9e0208	typeref:typename:unsigned char	file:
sockaddr_get_port	NetworkManagerStunClient.cpp	/^  uint16_t sockaddr_get_port(sockaddr_storage const & addr)$/;"	f	namespace:stun::details	typeref:typename:uint16_t
sockaddr_to_string	NetworkManagerStunClient.cpp	/^std::string sockaddr_to_string(sockaddr_storage const & addr)$/;"	f	namespace:stun	typeref:typename:std::string
sockaddr_to_string2	NetworkManagerStunClient.cpp	/^  std::string sockaddr_to_string2(sockaddr const * addr, int family)$/;"	f	namespace:stun::details	typeref:typename:std::string
socket_length	NetworkManagerStunClient.cpp	/^  socklen_t socket_length(sockaddr_storage const & addr)$/;"	f	namespace:stun::details	typeref:typename:socklen_t
source_address	NetworkManagerStunClient.h	/^    source_address(attribute const & attr) : address(attr) { }$/;"	f	struct:stun::attributes::source_address
source_address	NetworkManagerStunClient.h	/^  static uint16_t constexpr source_address = 0x004;$/;"	v	namespace:stun::attribute_type	typeref:typename:uint16_t 
source_address	NetworkManagerStunClient.h	/^  struct source_address : public address {$/;"	s	namespace:stun::attributes
sourcelocation	NetworkManager.json	/^        "sourcelocation": "https:\/\/github.com\/rdkcentral\/networkmanager\/blob\/main\/Network/;"	s	object:info
ssid	INetworkManager.h	/^                    string             ssid;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::WiFiSSIDInfo	typeref:typename:string
ssid	INetworkManager.h	/^                    string           ssid;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::WiFiConnectTo	typeref:typename:string
ssid	INetworkManager.h	/^                    string           ssid;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::WiFiScanResults	typeref:typename:string
ssid	NetworkManager.json	/^                                "ssid":{$/;"	o	object:events.onAvailableSSIDs.params.properties.ssids.items.properties
ssid	NetworkManager.json	/^                    "ssid": {$/;"	o	object:methods.AddToKnownSSIDs.params.properties
ssid	NetworkManager.json	/^                    "ssid": {$/;"	o	object:methods.GetConnectedSSID.result.properties
ssid	NetworkManager.json	/^                    "ssid": {$/;"	o	object:methods.GetWiFiSignalStrength.result.properties
ssid	NetworkManager.json	/^                    "ssid": {$/;"	o	object:methods.RemoveKnownSSID.params.properties
ssid	NetworkManager.json	/^                    "ssid": {$/;"	o	object:methods.WiFiConnect.params.properties
ssid	NetworkManager.json	/^                    "ssid":{$/;"	o	object:events.onWiFiSignalStrengthChange.params.properties
ssid	NetworkManager.json	/^        "ssid":{$/;"	o	object:definitions
ssid	NetworkManagerGnomeWIFI.h	/^    char ssid[32];$/;"	m	struct:_wifi_wps_pbc_ap	typeref:typename:char[32]
ssid	NetworkManagerImplementation.h	/^                    Core::JSON::String ssid;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation::WiFiConfig	typeref:typename:Core::JSON::String
ssid	NetworkManagerRDKProxy.cpp	/^            char ssid[SSID_SIZE];$/;"	m	struct:_IARM_Bus_WiFiSrvMgr_Param_t::__anon7d34ee9e0a0a::getPairedSSID	typeref:typename:char[]	file:
ssid	NetworkManagerRDKProxy.cpp	/^    char ssid[SSID_SIZE];      \/**< The name of connected SSID. *\/$/;"	m	struct:_WiFiPairedSSIDInfo	typeref:typename:char[]	file:
ssid	NetworkManagerRDKProxy.cpp	/^    char ssid[SSID_SIZE];     \/**< The name of connected SSID. *\/$/;"	m	struct:_WiFiConnectedSSIDInfo	typeref:typename:char[]	file:
ssid	NetworkManagerRDKProxy.cpp	/^    char ssid[SSID_SIZE];$/;"	m	struct:_WiFiConnection	typeref:typename:char[]	file:
ssid	gdbus/NetworkManagerGdbusUtils.h	/^    string ssid;$/;"	m	struct:apInfo	typeref:typename:string
ssid_command	WiFiSignalStrengthMonitor.cpp	/^#define ssid_command /;"	d	file:
ssid_list	NetworkManagerRDKProxy.cpp	/^            char ssid_list[MAX_SSIDLIST_BUF];$/;"	m	struct:_IARM_BUS_WiFiSrvMgr_EventData_t::__anon7d34ee9e0c0a::_WIFI_SSID_LIST	typeref:typename:char[]	file:
ssids	NetworkManager.json	/^                    "ssids": {$/;"	o	object:events.onAvailableSSIDs.params.properties
ssids	NetworkManager.json	/^                    "ssids": {$/;"	o	object:methods.GetKnownSSIDs.result.properties
ssids	NetworkManager.json	/^                    "ssids": {$/;"	o	object:methods.StartWiFiScan.params.properties
start	NetworkManagerTimer.h	/^                void start()$/;"	f	class:WPEFramework::Plugin::NetworkManagerTimer	typeref:typename:void
start	NetworkManagerTimer.h	/^                void start(int msec)$/;"	f	class:WPEFramework::Plugin::NetworkManagerTimer	typeref:typename:void
startConnectivityMonitor	NetworkManagerConnectivity.cpp	/^    bool ConnectivityMonitor::startConnectivityMonitor()$/;"	f	class:WPEFramework::Plugin::ConnectivityMonitor	typeref:typename:bool
startConnectivityMonitoring	LegacyPlugin_NetworkAPIs.cpp	/^        uint32_t Network::startConnectivityMonitoring(const JsonObject& parameters, JsonObject& /;"	f	class:WPEFramework::Plugin::Network	typeref:typename:uint32_t
startNetworkMangerEventMonitor	NetworkManagerGnomeEvents.cpp	/^    bool GnomeNetworkManagerEvents::startNetworkMangerEventMonitor()$/;"	f	class:WPEFramework::Plugin::GnomeNetworkManagerEvents	typeref:typename:bool
startNetworkMangerEventMonitor	gdbus/NetworkManagerGdbusEvent.cpp	/^    bool NetworkManagerEvents::startNetworkMangerEventMonitor()$/;"	f	class:WPEFramework::Plugin::NetworkManagerEvents	typeref:typename:bool
startScan	LegacyPlugin_WiFiManagerAPIs.cpp	/^	uint32_t WiFiManager::startScan(const JsonObject& parameters, JsonObject& response)$/;"	f	class:WPEFramework::Plugin::WiFiManager	typeref:typename:uint32_t
startWPS	gdbus/NetworkManagerGdbusClient.cpp	/^        bool NetworkManagerClient::startWPS()$/;"	f	class:WPEFramework::Plugin::NetworkManagerClient	typeref:typename:bool
startWiFiSignalStrengthMonitor	WiFiSignalStrengthMonitor.cpp	/^        void WiFiSignalStrengthMonitor::startWiFiSignalStrengthMonitor(int interval)$/;"	f	class:WPEFramework::Plugin::WiFiSignalStrengthMonitor	typeref:typename:void
startWifiScan	gdbus/NetworkManagerGdbusClient.cpp	/^        bool NetworkManagerClient::startWifiScan(const std::string ssid)$/;"	f	class:WPEFramework::Plugin::NetworkManagerClient	typeref:typename:bool
startuporder	LegacyPlugin_NetworkAPIs.conf.in	/^startuporder = "@PLUGIN_LEGACY_NW_STARTUPORDER@"$/;"	k
startuporder	LegacyPlugin_WiFiManagerAPIs.conf.in	/^startuporder = "@PLUGIN_LEGACY_WIFI_STARTUPORDER@"$/;"	k
startuporder	NetworkManager.conf.in	/^startuporder = "@PLUGIN_NETWORKMANAGER_STARTUPORDER@"$/;"	k
state	NetworkManager.json	/^                    "state": {$/;"	o	object:methods.GetWifiState.result.properties
state	NetworkManager.json	/^                    "state": {$/;"	o	object:methods.IsConnectedToInternet.result.properties
state	NetworkManager.json	/^                    "state":{$/;"	o	object:events.onInterfaceStateChange.params.properties
state	NetworkManager.json	/^                    "state":{$/;"	o	object:events.onInternetStatusChange.params.properties
state	NetworkManager.json	/^                    "state":{$/;"	o	object:events.onWiFiStateChange.params.properties
state	NetworkManager.json	/^        "state": {$/;"	o	object:definitions
state	NetworkManagerRDKProxy.cpp	/^            WiFiLNFState_t state;$/;"	m	struct:_IARM_BUS_WiFiSrvMgr_EventData_t::__anon7d34ee9e0c0a::_WIFI_LNF_STATE	typeref:typename:WiFiLNFState_t	file:
state	NetworkManagerRDKProxy.cpp	/^            WiFiStatusCode_t state;$/;"	m	struct:_IARM_BUS_WiFiSrvMgr_EventData_t::__anon7d34ee9e0c0a::_WIFI_STATECHANGE_DATA	typeref:typename:WiFiStatusCode_t	file:
state	gdbus/NetworkManagerGdbusUtils.h	/^    NMDeviceState state;$/;"	m	struct:deviceInfo	typeref:typename:NMDeviceState
stateReason	gdbus/NetworkManagerGdbusUtils.h	/^    NMDeviceStateReason stateReason;$/;"	m	struct:deviceInfo	typeref:typename:NMDeviceStateReason
status	NetworkManager.json	/^                    "status": {$/;"	o	object:events.onWiFiStateChange.params.properties
status	NetworkManager.json	/^                    "status": {$/;"	o	object:methods.GetWifiState.result.properties
status	NetworkManager.json	/^                    "status": {$/;"	o	object:methods.IsConnectedToInternet.result.properties
status	NetworkManager.json	/^                    "status":{$/;"	o	object:events.onAddressChange.params.properties
status	NetworkManager.json	/^                    "status":{$/;"	o	object:events.onInterfaceStateChange.params.properties
status	NetworkManager.json	/^                    "status":{$/;"	o	object:events.onInternetStatusChange.params.properties
status	NetworkManager.json	/^        "status": "development",$/;"	s	object:info
status	NetworkManagerRDKProxy.cpp	/^    bool status;$/;"	m	struct:_IARM_Bus_WiFiSrvMgr_Param_t	typeref:typename:bool	file:
status	NetworkManagerRDKProxy.cpp	/^    bool status;$/;"	m	struct:_IARM_Bus_WiFiSrvMgr_SsidList_Param_t	typeref:typename:bool	file:
status	NetworkManagerRDKProxy.cpp	/^    bool status;$/;"	m	struct:_IARM_Bus_WiFiSrvMgr_WPS_Parameters_t	typeref:typename:bool	file:
status	NetworkManagerRDKProxy.cpp	/^    bool status;$/;"	m	struct:__anon7d34ee9e0508	typeref:typename:bool	file:
stop	NetworkManagerTimer.h	/^                void stop()$/;"	f	class:WPEFramework::Plugin::NetworkManagerTimer	typeref:typename:void
stopConnectivityMonitor	NetworkManagerConnectivity.cpp	/^    bool ConnectivityMonitor::stopConnectivityMonitor()$/;"	f	class:WPEFramework::Plugin::ConnectivityMonitor	typeref:typename:bool
stopConnectivityMonitoring	LegacyPlugin_NetworkAPIs.cpp	/^        uint32_t Network::stopConnectivityMonitoring(const JsonObject& parameters, JsonObject& r/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:uint32_t
stopNetworkMangerEventMonitor	NetworkManagerGnomeEvents.cpp	/^    void GnomeNetworkManagerEvents::stopNetworkMangerEventMonitor()$/;"	f	class:WPEFramework::Plugin::GnomeNetworkManagerEvents	typeref:typename:void
stopNetworkMangerEventMonitor	gdbus/NetworkManagerGdbusEvent.cpp	/^    void NetworkManagerEvents::stopNetworkMangerEventMonitor()$/;"	f	class:WPEFramework::Plugin::NetworkManagerEvents	typeref:typename:void
stopScan	LegacyPlugin_WiFiManagerAPIs.cpp	/^        uint32_t WiFiManager::stopScan(const JsonObject& parameters, JsonObject& response)$/;"	f	class:WPEFramework::Plugin::WiFiManager	typeref:typename:uint32_t
stopThread	WiFiSignalStrengthMonitor.h	/^                std::atomic<bool> stopThread;$/;"	m	class:WPEFramework::Plugin::WiFiSignalStrengthMonitor	typeref:typename:std::atomic<bool>
stopWPS	gdbus/NetworkManagerGdbusClient.cpp	/^        bool NetworkManagerClient::stopWPS()$/;"	f	class:WPEFramework::Plugin::NetworkManagerClient	typeref:typename:bool
strength	INetworkManager.h	/^                    string             strength;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::WiFiSSIDInfo	typeref:typename:string
strength	INetworkManager.h	/^                    string           strength;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::WiFiScanResults	typeref:typename:string
strength	NetworkManager.json	/^                                "strength":{$/;"	o	object:events.onAvailableSSIDs.params.properties.ssids.items.properties
strength	NetworkManager.json	/^                    "strength": {$/;"	o	object:methods.GetConnectedSSID.result.properties
strength	NetworkManager.json	/^                    "strength": {$/;"	o	object:methods.GetWiFiSignalStrength.result.properties
strength	NetworkManager.json	/^                    "strength":{$/;"	o	object:events.onWiFiSignalStrengthChange.params.properties
strength	NetworkManager.json	/^        "strength":{$/;"	o	object:definitions
strength	gdbus/NetworkManagerGdbusUtils.h	/^    guint32 strength;$/;"	m	struct:apInfo	typeref:typename:guint32
stun	NetworkManager.conf.in	/^stun = JSON()$/;"	k
stun	NetworkManagerImplementation.h	/^                Stun stun;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation::Configuration	typeref:typename:Stun
stun	NetworkManagerStunClient.cpp	/^namespace stun {$/;"	n	file:
stun	NetworkManagerStunClient.h	/^namespace stun$/;"	n
stunClient	NetworkManagerImplementation.h	/^                stun::client stunClient;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:stun::client
stunEndpoint	NetworkManagerImplementation.h	/^                        Core::JSON::String stunEndpoint;$/;"	m	class:WPEFramework::Plugin::NetworkManagerImplementation::Stun	typeref:typename:Core::JSON::String
subscribeForlastScanPropertyEvent	gdbus/NetworkManagerGdbusEvent.cpp	/^    static bool subscribeForlastScanPropertyEvent(const gchar *wirelessPath)$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:bool	file:
subscribeToEvents	LegacyPlugin_NetworkAPIs.cpp	/^        void Network::subscribeToEvents(void)$/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:void
subscribeToEvents	LegacyPlugin_WiFiManagerAPIs.cpp	/^        void WiFiManager::subscribeToEvents(void)$/;"	f	class:WPEFramework::Plugin::WiFiManager	typeref:typename:void
success	NetworkManager.json	/^                     "success": {$/;"	o	object:methods.StartWiFiScan.result.properties
success	NetworkManager.json	/^                    "success": {$/;"	o	object:methods.GetAvailableInterfaces.result.properties
success	NetworkManager.json	/^                    "success": {$/;"	o	object:methods.GetConnectivityTestEndpoints.result.properties
success	NetworkManager.json	/^                    "success": {$/;"	o	object:methods.GetIPSettings.result.properties
success	NetworkManager.json	/^                    "success": {$/;"	o	object:methods.GetInterfaceState.result.properties
success	NetworkManager.json	/^                    "success": {$/;"	o	object:methods.GetKnownSSIDs.result.properties
success	NetworkManager.json	/^                    "success": {$/;"	o	object:methods.GetLogLevel.result.properties
success	NetworkManager.json	/^                    "success": {$/;"	o	object:methods.GetPublicIP.result.properties
success	NetworkManager.json	/^                    "success": {$/;"	o	object:methods.GetStunEndpoint.result.properties
success	NetworkManager.json	/^                    "success": {$/;"	o	object:methods.IsConnectedToInternet.result.properties
success	NetworkManager.json	/^                    "success": {$/;"	o	object:methods.Ping.result.properties
success	NetworkManager.json	/^                    "success": {$/;"	o	object:methods.SetConnectivityTestEndpoints.result.properties
success	NetworkManager.json	/^                    "success": {$/;"	o	object:methods.SetIPSettings.result.properties
success	NetworkManager.json	/^                    "success": {$/;"	o	object:methods.SetInterfaceState.result.properties
success	NetworkManager.json	/^                    "success": {$/;"	o	object:methods.SetLogLevel.result.properties
success	NetworkManager.json	/^                    "success": {$/;"	o	object:methods.SetPrimaryInterface.result.properties
success	NetworkManager.json	/^                    "success": {$/;"	o	object:methods.SetStunEndpoint.result.properties
success	NetworkManager.json	/^                    "success": {$/;"	o	object:methods.StopWiFiScan.result.properties
success	NetworkManager.json	/^                    "success": {$/;"	o	object:methods.Trace.result.properties
success	NetworkManager.json	/^                    "success": {$/;"	o	object:methods.WiFiConnect.result.properties
success	NetworkManager.json	/^                    "success":{$/;"	o	object:methods.AddToKnownSSIDs.result.properties
success	NetworkManager.json	/^                    "success":{$/;"	o	object:methods.GetCaptivePortalURI.result.properties
success	NetworkManager.json	/^                    "success":{$/;"	o	object:methods.GetConnectedSSID.result.properties
success	NetworkManager.json	/^                    "success":{$/;"	o	object:methods.GetSupportedsecurityModes.result.properties
success	NetworkManager.json	/^                    "success":{$/;"	o	object:methods.GetWiFiSignalStrength.result.properties
success	NetworkManager.json	/^                    "success":{$/;"	o	object:methods.GetWifiState.result.properties
success	NetworkManager.json	/^                    "success":{$/;"	o	object:methods.RemoveKnownSSID.result.properties
success	NetworkManager.json	/^                    "success":{$/;"	o	object:methods.StartWPS.result.properties
success	NetworkManager.json	/^                    "success":{$/;"	o	object:methods.StopWPS.result.properties
success	NetworkManager.json	/^                    "success":{$/;"	o	object:methods.WiFiDisconnect.result.properties
success	NetworkManager.json	/^        "success": {$/;"	o	object:definitions
summary	NetworkManager.json	/^                                    "summary": "Discovered SSID",$/;"	s	object:events.onAvailableSSIDs.params.properties.ssids.items.properties.ssid
summary	NetworkManager.json	/^                                    "summary": "Interface  Type",$/;"	s	object:methods.GetAvailableInterfaces.result.properties.interfaces.items.properties.type
summary	NetworkManager.json	/^                                    "summary": "Interface MAC address",$/;"	s	object:methods.GetAvailableInterfaces.result.properties.interfaces.items.properties.mac
summary	NetworkManager.json	/^                                    "summary": "Interface Name. ex: eth0 or wlan0",$/;"	s	object:methods.GetAvailableInterfaces.result.properties.interfaces.items.properties.name
summary	NetworkManager.json	/^                                    "summary": "Whether the interface is currently connected",$/;"	s	object:methods.GetAvailableInterfaces.result.properties.interfaces.items.properties.connected
summary	NetworkManager.json	/^                                    "summary": "Whether the interface is currently enabled",$/;"	s	object:methods.GetAvailableInterfaces.result.properties.interfaces.items.properties.enabled
summary	NetworkManager.json	/^                                "summary": "Security mode for open network",$/;"	s	object:methods.GetSupportedsecurityModes.result.properties.security_modes.properties.NONE
summary	NetworkManager.json	/^                                "summary": "Supports security mode WPA enterpise",$/;"	s	object:methods.GetSupportedsecurityModes.result.properties.security_modes.properties.EAP
summary	NetworkManager.json	/^                                "summary": "Supports security mode WPA,WPA-PSK,WPA2-PSK, WPA3-Pe/;"	s	object:methods.GetSupportedsecurityModes.result.properties.security_modes.properties.WPA_PSK
summary	NetworkManager.json	/^                                "summary": "Supports security mode WPA3-Personal",$/;"	s	object:methods.GetSupportedsecurityModes.result.properties.security_modes.properties.SAE
summary	NetworkManager.json	/^                            "summary": "The SSID to scan.",$/;"	s	object:methods.StartWiFiScan.params.properties.ssids.items
summary	NetworkManager.json	/^                            "summary": "The WiFi SSID Name",$/;"	s	object:methods.GetKnownSSIDs.result.properties.ssids.items
summary	NetworkManager.json	/^                            "summary": "The endpoint URL",$/;"	s	object:methods.GetConnectivityTestEndpoints.result.properties.endpoints.items
summary	NetworkManager.json	/^                            "summary": "The endpoint URL",$/;"	s	object:methods.SetConnectivityTestEndpoints.params.properties.endpoints.items
summary	NetworkManager.json	/^                        "summary": " To persist the SSID across reboots; similar to auto connect/;"	s	object:methods.WiFiConnect.params.properties.persist
summary	NetworkManager.json	/^                        "summary": "A list of endpoint URLs used",$/;"	s	object:methods.GetConnectivityTestEndpoints.result.properties.endpoints
summary	NetworkManager.json	/^                        "summary": "A list of endpoints to test",$/;"	s	object:methods.SetConnectivityTestEndpoints.params.properties.endpoints
summary	NetworkManager.json	/^                        "summary": "A list of known SSIDs",$/;"	s	object:methods.GetKnownSSIDs.result.properties.ssids
summary	NetworkManager.json	/^                        "summary": "A valid 8 digit WPS pin number. Use this parameter when the /;"	s	object:methods.StartWPS.params.properties.pin
summary	NetworkManager.json	/^                        "summary": "An error message",$/;"	s	object:methods.Ping.result.properties.error
summary	NetworkManager.json	/^                        "summary": "An interface details",$/;"	s	object:methods.GetAvailableInterfaces.result.properties.interfaces
summary	NetworkManager.json	/^                        "summary": "Captive portal URI",$/;"	s	object:methods.GetCaptivePortalURI.result.properties.uri
summary	NetworkManager.json	/^                        "summary": "Current state of the interface",$/;"	s	object:events.onInterfaceStateChange.params.properties.state
summary	NetworkManager.json	/^                        "summary": "Current status of the interface",$/;"	s	object:events.onInterfaceStateChange.params.properties.status
summary	NetworkManager.json	/^                        "summary": "Enable the specified interface",$/;"	s	object:methods.SetInterfaceState.params.properties.interface
summary	NetworkManager.json	/^                        "summary": "Get Log level to get more information",$/;"	s	object:methods.GetLogLevel.result.properties.level
summary	NetworkManager.json	/^                        "summary": "Internet state",$/;"	s	object:methods.IsConnectedToInternet.result.properties.state
summary	NetworkManager.json	/^                        "summary": "Internet status",$/;"	s	object:methods.IsConnectedToInternet.result.properties.status
summary	NetworkManager.json	/^                        "summary": "On Available SSID's",$/;"	s	object:events.onAvailableSSIDs.params.properties.ssids
summary	NetworkManager.json	/^                        "summary": "Set Log level to get more information",$/;"	s	object:methods.SetLogLevel.params.properties.level
summary	NetworkManager.json	/^                        "summary": "The EAP type to be used",$/;"	s	object:methods.WiFiConnect.params.properties.eap
summary	NetworkManager.json	/^                        "summary": "The WPS pin value. Valid only when `method` is set to `PIN` /;"	s	object:methods.StartWPS.result.properties.pin
summary	NetworkManager.json	/^                        "summary": "The average noise strength in dBm",$/;"	s	object:methods.GetConnectedSSID.result.properties.noise
summary	NetworkManager.json	/^                        "summary": "The average time to receive the packets",$/;"	s	object:methods.Ping.result.properties.tripAvg
summary	NetworkManager.json	/^                        "summary": "The ca_cert to be used for EAP",$/;"	s	object:methods.WiFiConnect.params.properties.ca_cert
summary	NetworkManager.json	/^                        "summary": "The client_cert to be used for EAP",$/;"	s	object:methods.WiFiConnect.params.properties.client_cert
summary	NetworkManager.json	/^                        "summary": "The current interface",$/;"	s	object:events.onActiveInterfaceChange.params.properties.activeInterface
summary	NetworkManager.json	/^                        "summary": "The eap_password to be used for EAP",$/;"	s	object:methods.WiFiConnect.params.properties.eap_password
summary	NetworkManager.json	/^                        "summary": "The eap_phase1 to be used for EAP",$/;"	s	object:methods.WiFiConnect.params.properties.eap_phase1
summary	NetworkManager.json	/^                        "summary": "The eap_phase2 to be used for EAP",$/;"	s	object:methods.WiFiConnect.params.properties.eap_phase2
summary	NetworkManager.json	/^                        "summary": "The frequency to scan. An empty or `null` value scans all fr/;"	s	object:methods.StartWiFiScan.params.properties.frequency
summary	NetworkManager.json	/^                        "summary": "The globally unique identifier",$/;"	s	object:methods.Ping.result.properties.guid
summary	NetworkManager.json	/^                        "summary": "The globally unique identifier",$/;"	s	object:methods.Trace.result.properties.guid
summary	NetworkManager.json	/^                        "summary": "The identity to be used for EAP",$/;"	s	object:methods.WiFiConnect.params.properties.eap_identity
summary	NetworkManager.json	/^                        "summary": "The internet connection state",$/;"	s	object:events.onInternetStatusChange.params.properties.state
summary	NetworkManager.json	/^                        "summary": "The internet connection status",$/;"	s	object:events.onInternetStatusChange.params.properties.status
summary	NetworkManager.json	/^                        "summary": "The list of SSIDs to be scanned.",$/;"	s	object:methods.StartWiFiScan.params.properties.ssids
summary	NetworkManager.json	/^                        "summary": "The maximum amount of time to receive the packets",$/;"	s	object:methods.Ping.result.properties.tripMax
summary	NetworkManager.json	/^                        "summary": "The method used to obtain the pin (must be one of the follow/;"	s	object:methods.StartWPS.params.properties.method
summary	NetworkManager.json	/^                        "summary": "The minimum amount of time to receive the packets",$/;"	s	object:methods.Ping.result.properties.tripMin
summary	NetworkManager.json	/^                        "summary": "The number of packets lost",$/;"	s	object:methods.Ping.result.properties.packetLoss
summary	NetworkManager.json	/^                        "summary": "The number of packets received",$/;"	s	object:methods.Ping.result.properties.packetsReceived
summary	NetworkManager.json	/^                        "summary": "The number of packets sent",$/;"	s	object:methods.Ping.result.properties.packetsTransmitted
summary	NetworkManager.json	/^                        "summary": "The physical data rate in Mbps",$/;"	s	object:methods.GetConnectedSSID.result.properties.rate
summary	NetworkManager.json	/^                        "summary": "The previous interface that was changed",$/;"	s	object:events.onActiveInterfaceChange.params.properties.prevActiveInterface
summary	NetworkManager.json	/^                        "summary": "The previous internet connection status",$/;"	s	object:events.onInternetStatusChange.params.properties.prevStatus
summary	NetworkManager.json	/^                        "summary": "The private_key to be used for EAP",$/;"	s	object:methods.WiFiConnect.params.properties.private_key
summary	NetworkManager.json	/^                        "summary": "The private_key_passwd to be used for EAP",$/;"	s	object:methods.WiFiConnect.params.properties.private_key_passwd
summary	NetworkManager.json	/^                        "summary": "The privious internet connection state",$/;"	s	object:events.onInternetStatusChange.params.properties.prevState
summary	NetworkManager.json	/^                        "summary": "The response of traceroute",$/;"	s	object:methods.Trace.result.properties.results
summary	NetworkManager.json	/^                        "summary": "The security mode. See the `connect` method",$/;"	s	object:methods.GetConnectedSSID.result.properties.security
summary	NetworkManager.json	/^                        "summary": "The standard deviation for the trip",$/;"	s	object:methods.Ping.result.properties.tripStdDev
summary	NetworkManager.json	/^                        "summary": "The supported security modes and its associated integer valu/;"	s	object:methods.GetSupportedsecurityModes.result.properties.security_modes
summary	NetworkManager.json	/^                        "summary": "Whether IP address was acquired or lost (must be one of the /;"	s	object:events.onAddressChange.params.properties.status
summary	NetworkManager.json	/^                        "summary": "Whether the interface is enabled or disabled",$/;"	s	object:methods.GetInterfaceState.result.properties.enabled
summary	NetworkManager.json	/^                        "summary": "Whether the interface must be enabled or disabled",$/;"	s	object:methods.SetInterfaceState.params.properties.enabled
summary	NetworkManager.json	/^                        "summary": "WiFi State",$/;"	s	object:events.onWiFiStateChange.params.properties.state
summary	NetworkManager.json	/^                        "summary": "WiFi status",$/;"	s	object:events.onWiFiStateChange.params.properties.status
summary	NetworkManager.json	/^                        "summary": "WiFi status",$/;"	s	object:methods.GetWifiState.result.properties.status
summary	NetworkManager.json	/^                        "summary": "`true` if internet connectivity is detected, otherwise `fals/;"	s	object:methods.IsConnectedToInternet.result.properties.connected
summary	NetworkManager.json	/^                "summary":"it allows empty parameter too",$/;"	s	object:methods.GetPublicIP.params
summary	NetworkManager.json	/^            "summary": "An interface, such as `eth0` or `wlan0`, depending upon availability of /;"	s	object:definitions.interface
summary	NetworkManager.json	/^            "summary": "Cancels the in-progress WPS pairing operation. The operation forcefully /;"	s	object:methods.StopWPS
summary	NetworkManager.json	/^            "summary": "Disconnects from the currently connected SSID. A event will be posted up/;"	s	object:methods.WiFiDisconnect
summary	NetworkManager.json	/^            "summary": "Enable or disable the specified interface",$/;"	s	object:methods.SetInterfaceState
summary	NetworkManager.json	/^            "summary": "Error string of scan failure",$/;"	s	object:definitions.errors
summary	NetworkManager.json	/^            "summary": "Get Log level that is currently used.",$/;"	s	object:methods.GetLogLevel
summary	NetworkManager.json	/^            "summary": "Get WiFiSignalStrength of connected SSID. The signal quality is identife/;"	s	object:methods.GetWiFiSignalStrength
summary	NetworkManager.json	/^            "summary": "Get device supported list of available interface including their state."/;"	s	object:methods.GetAvailableInterfaces
summary	NetworkManager.json	/^            "summary": "Get the STUN endpoint that is used to identify public IP of the device."/;"	s	object:methods.GetStunEndpoint
summary	NetworkManager.json	/^            "summary": "Gets currently used test endpoints. on success list out the connectivity/;"	s	object:methods.GetConnectivityTestEndpoints
summary	NetworkManager.json	/^            "summary": "Gets list of saved SSIDs. This method returns all the SSIDs that are sav/;"	s	object:methods.GetKnownSSIDs
summary	NetworkManager.json	/^            "summary": "Gets the IP setting for the given interface.",$/;"	s	object:methods.GetIPSettings
summary	NetworkManager.json	/^            "summary": "Gets the captive portal URI if connected to any captive portal network."/;"	s	object:methods.GetCaptivePortalURI
summary	NetworkManager.json	/^            "summary": "Gets the current Status of the specified interface",$/;"	s	object:methods.GetInterfaceState
summary	NetworkManager.json	/^            "summary": "Gets the internet\/public IP Address of the device.",$/;"	s	object:methods.GetPublicIP
summary	NetworkManager.json	/^            "summary": "Gets the primary\/default network interface for the device. The active n/;"	s	object:methods.GetPrimaryInterface
summary	NetworkManager.json	/^            "summary": "Initiates WiFi scaning. This method supports scanning for specific range/;"	s	object:methods.StartWiFiScan
summary	NetworkManager.json	/^            "summary": "Initiates a connection using Wifi Protected Setup (WPS). An existing con/;"	s	object:methods.StartWPS
summary	NetworkManager.json	/^            "summary": "Initiates request to connect to the specified SSID with the given passph/;"	s	object:methods.WiFiConnect
summary	NetworkManager.json	/^            "summary": "Pings the specified endpoint with the specified number of packets.",$/;"	s	object:methods.Ping
summary	NetworkManager.json	/^            "summary": "Remove given SSID from saved SSIDs. This method just removes an entry fr/;"	s	object:methods.RemoveKnownSSID
summary	NetworkManager.json	/^            "summary": "Returns the Wifi security modes that the device supports.",$/;"	s	object:methods.GetSupportedsecurityModes
summary	NetworkManager.json	/^            "summary": "Returns the connected SSID information.",$/;"	s	object:methods.GetConnectedSSID
summary	NetworkManager.json	/^            "summary": "Returns the current Wifi State. The possible Wifi states are as follows./;"	s	object:methods.GetWifiState
summary	NetworkManager.json	/^            "summary": "STUN server cache timeout",$/;"	s	object:definitions.cacheLifetime
summary	NetworkManager.json	/^            "summary": "STUN server port",$/;"	s	object:definitions.port
summary	NetworkManager.json	/^            "summary": "Saves the SSID, passphrase, and security mode for upcoming and future se/;"	s	object:methods.AddToKnownSSIDs
summary	NetworkManager.json	/^            "summary": "Seeks whether the device has internet connectivity. This API might take /;"	s	object:methods.IsConnectedToInternet
summary	NetworkManager.json	/^            "summary": "Set Log level for more information. The possible set log level are as fo/;"	s	object:methods.SetLogLevel
summary	NetworkManager.json	/^            "summary": "Set the STUN endpoint to be used to identify public IP of the device.",$/;"	s	object:methods.SetStunEndpoint
summary	NetworkManager.json	/^            "summary": "Sets the IP settings for the given interface.",$/;"	s	object:methods.SetIPSettings
summary	NetworkManager.json	/^            "summary": "Sets the primary\/default interface for the device. This call fails if t/;"	s	object:methods.SetPrimaryInterface
summary	NetworkManager.json	/^            "summary": "Signal strength Quality",$/;"	s	object:definitions.quality
summary	NetworkManager.json	/^            "summary": "Stops WiFi scanning. Any discovered SSIDs from the call to the `StartWiF/;"	s	object:methods.StopWiFiScan
summary	NetworkManager.json	/^            "summary": "The BSSID of given SSID",$/;"	s	object:definitions.bssid
summary	NetworkManager.json	/^            "summary": "The DHCP Server address",$/;"	s	object:definitions.dhcpserver
summary	NetworkManager.json	/^            "summary": "The IP address",$/;"	s	object:definitions.ipaddress
summary	NetworkManager.json	/^            "summary": "The IPv6 Unified Local Address",$/;"	s	object:definitions.ula
summary	NetworkManager.json	/^            "summary": "The Signal RSSI value in dBm",$/;"	s	object:definitions.strength
summary	NetworkManager.json	/^            "summary": "The WiFi SSID Name",$/;"	s	object:definitions.ssid
summary	NetworkManager.json	/^            "summary": "The access point password",$/;"	s	object:definitions.passphrase
summary	NetworkManager.json	/^            "summary": "The gateway address",$/;"	s	object:definitions.gateway
summary	NetworkManager.json	/^            "summary": "The given State",$/;"	s	object:definitions.state
summary	NetworkManager.json	/^            "summary": "The globally unique identifier",$/;"	s	object:definitions.guid
summary	NetworkManager.json	/^            "summary": "The host name or IP address",$/;"	s	object:definitions.endpoint
summary	NetworkManager.json	/^            "summary": "The number of packets to send. Default is 5.",$/;"	s	object:definitions.packets
summary	NetworkManager.json	/^            "summary": "The number of requests to send. Default is 3.",$/;"	s	object:definitions.count
summary	NetworkManager.json	/^            "summary": "The prefix number",$/;"	s	object:definitions.prefix
summary	NetworkManager.json	/^            "summary": "The primary DNS address",$/;"	s	object:definitions.primarydns
summary	NetworkManager.json	/^            "summary": "The secondary DNS address",$/;"	s	object:definitions.secondarydns
summary	NetworkManager.json	/^            "summary": "The security mode. See `getSupportedsecurityModes`.",$/;"	s	object:definitions.security
summary	NetworkManager.json	/^            "summary": "The supported frequency for this SSID in GHz",$/;"	s	object:definitions.frequency
summary	NetworkManager.json	/^            "summary": "This method used to set up to 5 endpoints for a connectivity test. Succe/;"	s	object:methods.SetConnectivityTestEndpoints
summary	NetworkManager.json	/^            "summary": "Timeout",$/;"	s	object:definitions.timeout
summary	NetworkManager.json	/^            "summary": "Traces the specified endpoint with the specified number of packets using/;"	s	object:methods.Trace
summary	NetworkManager.json	/^            "summary": "Triggered when WIFI connection Signal Strength get changed.",$/;"	s	object:events.onWiFiSignalStrengthChange
summary	NetworkManager.json	/^            "summary": "Triggered when WIFI connection state get changed. The possible states ar/;"	s	object:events.onWiFiStateChange
summary	NetworkManager.json	/^            "summary": "Triggered when an IP Address is assigned or lost.",$/;"	s	object:events.onAddressChange
summary	NetworkManager.json	/^            "summary": "Triggered when an interface state is changed. The possible states are \\/;"	s	object:events.onInterfaceStateChange
summary	NetworkManager.json	/^            "summary": "Triggered when internet connection state changed.The possible internet c/;"	s	object:events.onInternetStatusChange
summary	NetworkManager.json	/^            "summary": "Triggered when scan completes or when scan cancelled.",$/;"	s	object:events.onAvailableSSIDs
summary	NetworkManager.json	/^            "summary": "Triggered when the primary\/active interface changes, regardless if it's/;"	s	object:events.onActiveInterfaceChange
summary	NetworkManager.json	/^            "summary": "Whether the request succeeded",$/;"	s	object:definitions.success
summary	NetworkManager.json	/^            "summary": "`true` if DHCP is used, `false` if IP is configured manually",$/;"	s	object:definitions.autoconfig
summary	NetworkManager.json	/^            "summary": "either IPv4 or IPv6",$/;"	s	object:definitions.ipversion
switchToInitialCheck	NetworkManagerConnectivity.cpp	/^    bool ConnectivityMonitor::switchToInitialCheck()$/;"	f	class:WPEFramework::Plugin::ConnectivityMonitor	typeref:typename:bool
symmetric_firewall	NetworkManagerStunClient.h	/^  symmetric_firewall,$/;"	e	enum:stun::network_access_type
symmetric_nat	NetworkManagerStunClient.h	/^  symmetric_nat,$/;"	e	enum:stun::network_access_type
sync	NetworkManagerRDKProxy.cpp	/^    bool sync;$/;"	m	struct:__anon7d34ee9e0808	typeref:typename:bool	file:
threadEventRegistration	NetworkManagerRDKProxy.cpp	/^        void  NetworkManagerImplementation::threadEventRegistration()$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation	typeref:typename:void
throw_error	NetworkManagerStunClient.cpp	/^  void throw_error(char const * format, ...)$/;"	f	namespace:stun::details	typeref:typename:void
timeout	NetworkManager.json	/^                    "timeout": {$/;"	o	object:methods.GetStunEndpoint.result.properties
timeout	NetworkManager.json	/^                    "timeout": {$/;"	o	object:methods.Ping.params.properties
timeout	NetworkManager.json	/^                    "timeout": {$/;"	o	object:methods.SetStunEndpoint.params.properties
timeout	NetworkManager.json	/^        "timeout":{$/;"	o	object:definitions
title	NetworkManager.json	/^        "title": "NetworkManager Plugin",$/;"	s	object:info
to_wifi_state	NetworkManagerRDKProxy.cpp	/^        Exchange::INetworkManager::WiFiState to_wifi_state(WiFiStatusCode_t code) {$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:Exchange::INetworkManager::WiFiState
transaction_id	NetworkManagerStunClient.h	/^  std::array<uint8_t, 16> transaction_id;$/;"	m	struct:stun::message_header	typeref:typename:std::array<uint8_t,16>
trimPath	NetworkManagerLogger.cpp	/^    const char* trimPath(const char* s)$/;"	f	namespace:NetworkManagerLogger	typeref:typename:const char *
tripAvg	NetworkManager.json	/^                    "tripAvg": {$/;"	o	object:methods.Ping.result.properties
tripMax	NetworkManager.json	/^                    "tripMax": {$/;"	o	object:methods.Ping.result.properties
tripMin	NetworkManager.json	/^                    "tripMin": {$/;"	o	object:methods.Ping.result.properties
tripStdDev	NetworkManager.json	/^                    "tripStdDev": {$/;"	o	object:methods.Ping.result.properties
type	INetworkManager.h	/^                InterfaceType type;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::InterfaceDetails	typeref:typename:InterfaceType
type	NetworkManager.json	/^                                    "type": "boolean",$/;"	s	object:methods.GetAvailableInterfaces.result.properties.interfaces.items.properties.connected
type	NetworkManager.json	/^                                    "type": "boolean",$/;"	s	object:methods.GetAvailableInterfaces.result.properties.interfaces.items.properties.enabled
type	NetworkManager.json	/^                                    "type": "string",$/;"	s	object:events.onAvailableSSIDs.params.properties.ssids.items.properties.ssid
type	NetworkManager.json	/^                                    "type": "string",$/;"	s	object:methods.GetAvailableInterfaces.result.properties.interfaces.items.properties.mac
type	NetworkManager.json	/^                                    "type": "string",$/;"	s	object:methods.GetAvailableInterfaces.result.properties.interfaces.items.properties.name
type	NetworkManager.json	/^                                    "type": "string",$/;"	s	object:methods.GetAvailableInterfaces.result.properties.interfaces.items.properties.type
type	NetworkManager.json	/^                                "type": "integer",$/;"	s	object:methods.GetSupportedsecurityModes.result.properties.security_modes.properties.EAP
type	NetworkManager.json	/^                                "type": "integer",$/;"	s	object:methods.GetSupportedsecurityModes.result.properties.security_modes.properties.NONE
type	NetworkManager.json	/^                                "type": "integer",$/;"	s	object:methods.GetSupportedsecurityModes.result.properties.security_modes.properties.SAE
type	NetworkManager.json	/^                                "type": "integer",$/;"	s	object:methods.GetSupportedsecurityModes.result.properties.security_modes.properties.WPA_PSK
type	NetworkManager.json	/^                                "type":{$/;"	o	object:methods.GetAvailableInterfaces.result.properties.interfaces.items.properties
type	NetworkManager.json	/^                            "type": "string",$/;"	s	object:methods.GetConnectivityTestEndpoints.result.properties.endpoints.items
type	NetworkManager.json	/^                            "type": "string",$/;"	s	object:methods.GetKnownSSIDs.result.properties.ssids.items
type	NetworkManager.json	/^                            "type": "string",$/;"	s	object:methods.SetConnectivityTestEndpoints.params.properties.endpoints.items
type	NetworkManager.json	/^                            "type": "string",$/;"	s	object:methods.StartWiFiScan.params.properties.ssids.items
type	NetworkManager.json	/^                            "type":"object",$/;"	s	object:events.onAvailableSSIDs.params.properties.ssids.items
type	NetworkManager.json	/^                            "type":"object",$/;"	s	object:methods.GetAvailableInterfaces.result.properties.interfaces.items
type	NetworkManager.json	/^                        "type": "array",$/;"	s	object:methods.GetConnectivityTestEndpoints.result.properties.endpoints
type	NetworkManager.json	/^                        "type": "array",$/;"	s	object:methods.GetKnownSSIDs.result.properties.ssids
type	NetworkManager.json	/^                        "type": "array",$/;"	s	object:methods.SetConnectivityTestEndpoints.params.properties.endpoints
type	NetworkManager.json	/^                        "type": "array",$/;"	s	object:methods.StartWiFiScan.params.properties.ssids
type	NetworkManager.json	/^                        "type": "boolean",$/;"	s	object:methods.GetInterfaceState.result.properties.enabled
type	NetworkManager.json	/^                        "type": "boolean",$/;"	s	object:methods.IsConnectedToInternet.result.properties.connected
type	NetworkManager.json	/^                        "type": "boolean",$/;"	s	object:methods.SetInterfaceState.params.properties.enabled
type	NetworkManager.json	/^                        "type": "boolean",$/;"	s	object:methods.WiFiConnect.params.properties.persist
type	NetworkManager.json	/^                        "type": "integer",$/;"	s	object:events.onInterfaceStateChange.params.properties.state
type	NetworkManager.json	/^                        "type": "integer",$/;"	s	object:events.onInternetStatusChange.params.properties.prevState
type	NetworkManager.json	/^                        "type": "integer",$/;"	s	object:events.onInternetStatusChange.params.properties.state
type	NetworkManager.json	/^                        "type": "integer",$/;"	s	object:events.onWiFiStateChange.params.properties.state
type	NetworkManager.json	/^                        "type": "integer",$/;"	s	object:methods.GetLogLevel.result.properties.level
type	NetworkManager.json	/^                        "type": "integer",$/;"	s	object:methods.IsConnectedToInternet.result.properties.state
type	NetworkManager.json	/^                        "type": "integer",$/;"	s	object:methods.Ping.result.properties.packetsReceived
type	NetworkManager.json	/^                        "type": "integer",$/;"	s	object:methods.Ping.result.properties.packetsTransmitted
type	NetworkManager.json	/^                        "type": "integer",$/;"	s	object:methods.SetLogLevel.params.properties.level
type	NetworkManager.json	/^                        "type": "object",$/;"	s	object:methods.GetSupportedsecurityModes.result.properties.security_modes
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:events.onActiveInterfaceChange.params.properties.activeInterface
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:events.onActiveInterfaceChange.params.properties.prevActiveInterface
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:events.onAddressChange.params.properties.status
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:events.onInterfaceStateChange.params.properties.status
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:events.onInternetStatusChange.params.properties.prevStatus
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:events.onInternetStatusChange.params.properties.status
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:events.onWiFiStateChange.params.properties.status
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:methods.GetCaptivePortalURI.result.properties.uri
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:methods.GetConnectedSSID.result.properties.noise
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:methods.GetConnectedSSID.result.properties.rate
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:methods.GetConnectedSSID.result.properties.security
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:methods.GetWifiState.result.properties.status
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:methods.IsConnectedToInternet.result.properties.status
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:methods.Ping.result.properties.error
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:methods.Ping.result.properties.guid
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:methods.Ping.result.properties.packetLoss
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:methods.Ping.result.properties.tripAvg
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:methods.Ping.result.properties.tripMax
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:methods.Ping.result.properties.tripMin
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:methods.Ping.result.properties.tripStdDev
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:methods.SetInterfaceState.params.properties.interface
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:methods.StartWPS.params.properties.method
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:methods.StartWPS.params.properties.pin
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:methods.StartWiFiScan.params.properties.frequency
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:methods.Trace.result.properties.guid
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:methods.Trace.result.properties.results
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:methods.WiFiConnect.params.properties.ca_cert
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:methods.WiFiConnect.params.properties.client_cert
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:methods.WiFiConnect.params.properties.eap
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:methods.WiFiConnect.params.properties.eap_identity
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:methods.WiFiConnect.params.properties.eap_password
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:methods.WiFiConnect.params.properties.eap_phase1
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:methods.WiFiConnect.params.properties.eap_phase2
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:methods.WiFiConnect.params.properties.private_key
type	NetworkManager.json	/^                        "type": "string",$/;"	s	object:methods.WiFiConnect.params.properties.private_key_passwd
type	NetworkManager.json	/^                        "type":"array",$/;"	s	object:events.onAvailableSSIDs.params.properties.ssids
type	NetworkManager.json	/^                        "type":"array",$/;"	s	object:methods.GetAvailableInterfaces.result.properties.interfaces
type	NetworkManager.json	/^                        "type":"string",$/;"	s	object:methods.StartWPS.result.properties.pin
type	NetworkManager.json	/^                  "type": "object",$/;"	s	object:methods.StartWiFiScan.result
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:events.onActiveInterfaceChange.params
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:events.onAddressChange.params
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:events.onAvailableSSIDs.params
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:events.onInterfaceStateChange.params
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:events.onInternetStatusChange.params
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:events.onWiFiSignalStrengthChange.params
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:events.onWiFiStateChange.params
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.AddToKnownSSIDs.params
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.AddToKnownSSIDs.result
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.GetAvailableInterfaces.result
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.GetCaptivePortalURI.result
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.GetConnectedSSID.result
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.GetIPSettings.result
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.GetInterfaceState.params
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.GetInterfaceState.result
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.GetKnownSSIDs.result
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.GetLogLevel.result
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.GetPrimaryInterface.result
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.GetPublicIP.result
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.GetStunEndpoint.result
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.GetSupportedsecurityModes.result
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.GetWiFiSignalStrength.result
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.GetWifiState.result
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.IsConnectedToInternet.result
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.Ping.result
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.RemoveKnownSSID.params
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.RemoveKnownSSID.result
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.SetConnectivityTestEndpoints.result
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.SetIPSettings.result
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.SetInterfaceState.params
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.SetInterfaceState.result
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.SetLogLevel.params
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.SetLogLevel.result
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.SetPrimaryInterface.result
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.SetStunEndpoint.result
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.StartWPS.params
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.StartWPS.result
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.StartWiFiScan.params
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.StopWPS.result
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.StopWiFiScan.result
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.Trace.result
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.WiFiConnect.params
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.WiFiConnect.result
type	NetworkManager.json	/^                "type": "object",$/;"	s	object:methods.WiFiDisconnect.result
type	NetworkManager.json	/^                "type":"object",$/;"	s	object:methods.GetConnectivityTestEndpoints.result
type	NetworkManager.json	/^                "type":"object",$/;"	s	object:methods.GetIPSettings.params
type	NetworkManager.json	/^                "type":"object",$/;"	s	object:methods.GetPublicIP.params
type	NetworkManager.json	/^                "type":"object",$/;"	s	object:methods.IsConnectedToInternet.params
type	NetworkManager.json	/^                "type":"object",$/;"	s	object:methods.Ping.params
type	NetworkManager.json	/^                "type":"object",$/;"	s	object:methods.SetConnectivityTestEndpoints.params
type	NetworkManager.json	/^                "type":"object",$/;"	s	object:methods.SetIPSettings.params
type	NetworkManager.json	/^                "type":"object",$/;"	s	object:methods.SetPrimaryInterface.params
type	NetworkManager.json	/^                "type":"object",$/;"	s	object:methods.SetStunEndpoint.params
type	NetworkManager.json	/^                "type":"object",$/;"	s	object:methods.Trace.params
type	NetworkManager.json	/^            "type": "boolean",$/;"	s	object:definitions.autoconfig
type	NetworkManager.json	/^            "type": "boolean",$/;"	s	object:definitions.success
type	NetworkManager.json	/^            "type": "integer",$/;"	s	object:definitions.cacheLifetime
type	NetworkManager.json	/^            "type": "integer",$/;"	s	object:definitions.count
type	NetworkManager.json	/^            "type": "integer",$/;"	s	object:definitions.packets
type	NetworkManager.json	/^            "type": "integer",$/;"	s	object:definitions.port
type	NetworkManager.json	/^            "type": "integer",$/;"	s	object:definitions.prefix
type	NetworkManager.json	/^            "type": "integer",$/;"	s	object:definitions.security
type	NetworkManager.json	/^            "type": "integer",$/;"	s	object:definitions.state
type	NetworkManager.json	/^            "type": "integer",$/;"	s	object:definitions.timeout
type	NetworkManager.json	/^            "type": "string",$/;"	s	object:definitions.bssid
type	NetworkManager.json	/^            "type": "string",$/;"	s	object:definitions.dhcpserver
type	NetworkManager.json	/^            "type": "string",$/;"	s	object:definitions.endpoint
type	NetworkManager.json	/^            "type": "string",$/;"	s	object:definitions.errors
type	NetworkManager.json	/^            "type": "string",$/;"	s	object:definitions.frequency
type	NetworkManager.json	/^            "type": "string",$/;"	s	object:definitions.gateway
type	NetworkManager.json	/^            "type": "string",$/;"	s	object:definitions.guid
type	NetworkManager.json	/^            "type": "string",$/;"	s	object:definitions.interface
type	NetworkManager.json	/^            "type": "string",$/;"	s	object:definitions.ipaddress
type	NetworkManager.json	/^            "type": "string",$/;"	s	object:definitions.ipversion
type	NetworkManager.json	/^            "type": "string",$/;"	s	object:definitions.passphrase
type	NetworkManager.json	/^            "type": "string",$/;"	s	object:definitions.primarydns
type	NetworkManager.json	/^            "type": "string",$/;"	s	object:definitions.quality
type	NetworkManager.json	/^            "type": "string",$/;"	s	object:definitions.secondarydns
type	NetworkManager.json	/^            "type": "string",$/;"	s	object:definitions.ssid
type	NetworkManager.json	/^            "type": "string",$/;"	s	object:definitions.strength
type	NetworkManager.json	/^            "type": "string",$/;"	s	object:definitions.ula
type	NetworkManagerStunClient.h	/^  uint16_t type;$/;"	m	struct:stun::attribute	typeref:typename:uint16_t
udp_blocked	NetworkManagerStunClient.h	/^  udp_blocked,$/;"	e	enum:stun::network_access_type
ula	INetworkManager.h	/^                string ula          \/* @text: ula *\/;$/;"	m	struct:WPEFramework::Exchange::INetworkManager::IPAddress	typeref:typename:string
ula	NetworkManager.json	/^                    "ula": {$/;"	o	object:methods.GetIPSettings.result.properties
ula	NetworkManager.json	/^        "ula": {$/;"	o	object:definitions
unknown	NetworkManagerStunClient.h	/^  unknown$/;"	e	enum:stun::network_access_type
unknown_attributes	NetworkManagerStunClient.h	/^  static uint16_t constexpr unknown_attributes = 0x000a;$/;"	v	namespace:stun::attribute_type	typeref:typename:uint16_t 
unregisterLegacyMethods	LegacyPlugin_NetworkAPIs.cpp	/^        void Network::unregisterLegacyMethods(void)$/;"	f	class:WPEFramework::Plugin::Network	typeref:typename:void
unregisterLegacyMethods	LegacyPlugin_WiFiManagerAPIs.cpp	/^        void WiFiManager::unregisterLegacyMethods(void)$/;"	f	class:WPEFramework::Plugin::WiFiManager	typeref:typename:void
updateConnctionAndactivate	gdbus/NetworkManagerGdbusClient.cpp	/^        bool updateConnctionAndactivate(DbusMgr& m_dbus, GVariantBuilder& connBuilder, const cha/;"	f	namespace:WPEFramework::Plugin	typeref:typename:bool
updateIPSettings	gdbus/NetworkManagerGdbusClient.cpp	/^        bool updateIPSettings(DbusMgr& m_dbus, const std::string& connectionPath, const Exchange/;"	f	namespace:WPEFramework::Plugin	typeref:typename:bool
updateRouteMetric	gdbus/NetworkManagerGdbusClient.cpp	/^        bool updateRouteMetric(DbusMgr& m_dbus, const std::string& connectionPath, gint64 route_/;"	f	namespace:WPEFramework::Plugin	typeref:typename:bool
uri	NetworkManager.json	/^                     "uri": {$/;"	o	object:methods.GetCaptivePortalURI.result.properties
username	NetworkManagerStunClient.h	/^  static uint16_t constexpr username = 0x0006;$/;"	v	namespace:stun::attribute_type	typeref:typename:uint16_t 
value	NetworkManager.h	/^                CacheValue value;$/;"	m	class:WPEFramework::Plugin::NetworkManager::Cache	typeref:typename:CacheValue
value	NetworkManagerStunClient.h	/^  std::vector<uint8_t> value;$/;"	m	struct:stun::attribute	typeref:typename:std::vector<uint8_t>
version	NetworkManager.json	/^        "version": "0.9.0"$/;"	s	object:info
wait	NetworkManagerGnomeWIFI.cpp	/^        bool wifiManager::wait(GMainLoop *loop, int timeOutMs)$/;"	f	class:WPEFramework::Plugin::wifiManager	typeref:typename:bool
wifi	NetworkManagerGnomeProxy.cpp	/^        wifiManager *wifi = nullptr;$/;"	v	namespace:WPEFramework::Plugin	typeref:typename:wifiManager *
wifiConnect	NetworkManagerGnomeWIFI.cpp	/^        bool wifiManager::wifiConnect(Exchange::INetworkManager::WiFiConnectTo ssidInfo)$/;"	f	class:WPEFramework::Plugin::wifiManager	typeref:typename:bool
wifiConnect	gdbus/NetworkManagerGdbusClient.cpp	/^        bool NetworkManagerClient::wifiConnect(const Exchange::INetworkManager::WiFiConnectTo& s/;"	f	class:WPEFramework::Plugin::NetworkManagerClient	typeref:typename:bool
wifiConnectCb	NetworkManagerGnomeWIFI.cpp	/^        static void wifiConnectCb(GObject *client, GAsyncResult *result, gpointer user_data)$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:void	file:
wifiConnectedSSIDInfo	NetworkManagerGnomeWIFI.cpp	/^        bool wifiManager::wifiConnectedSSIDInfo(Exchange::INetworkManager::WiFiSSIDInfo &ssidinf/;"	f	class:WPEFramework::Plugin::wifiManager	typeref:typename:bool
wifiConnectionUpdate	NetworkManagerGnomeWIFI.cpp	/^        static void wifiConnectionUpdate(GObject *rmObject, GAsyncResult *res, gpointer user_dat/;"	f	namespace:WPEFramework::Plugin	typeref:typename:void	file:
wifiDevice	NetworkManagerGnomeEvents.h	/^        NMDeviceWifi *wifiDevice;$/;"	m	struct:WPEFramework::Plugin::__anon87bbc0eb0108	typeref:typename:NMDeviceWifi *
wifiDevicePath	gdbus/NetworkManagerGdbusEvent.h	/^        std::string wifiDevicePath;$/;"	m	struct:WPEFramework::Plugin::__anoncc38525b0108	typeref:typename:std::string
wifiDisconnect	NetworkManagerGnomeWIFI.cpp	/^        bool wifiManager::wifiDisconnect()$/;"	f	class:WPEFramework::Plugin::wifiManager	typeref:typename:bool
wifiDisconnect	gdbus/NetworkManagerGdbusClient.cpp	/^        bool NetworkManagerClient::wifiDisconnect()$/;"	f	class:WPEFramework::Plugin::NetworkManagerClient	typeref:typename:bool
wifiError	NetworkManagerRDKProxy.cpp	/^        } wifiError;$/;"	m	union:_IARM_BUS_WiFiSrvMgr_EventData_t::__anon7d34ee9e0c0a	typeref:struct:_IARM_BUS_WiFiSrvMgr_EventData_t::__anon7d34ee9e0c0a::_WIFI_ERROR	file:
wifiFrequencyFromAp	NetworkManagerGnomeUtils.cpp	/^       std::string nmUtils::wifiFrequencyFromAp(guint32 apFreq)$/;"	f	class:WPEFramework::Plugin::nmUtils	typeref:typename:std::string
wifiLNFStatus	NetworkManagerRDKProxy.cpp	/^        WiFiLNFStatusCode_t wifiLNFStatus;$/;"	m	union:_IARM_Bus_WiFiSrvMgr_Param_t::__anon7d34ee9e0a0a	typeref:typename:WiFiLNFStatusCode_t	file:
wifiManager	NetworkManagerGnomeWIFI.cpp	/^        wifiManager::wifiManager() : m_client(nullptr), m_loop(nullptr), m_createNewConnection(f/;"	f	class:WPEFramework::Plugin::wifiManager
wifiManager	NetworkManagerGnomeWIFI.h	/^        class wifiManager$/;"	c	namespace:WPEFramework::Plugin
wifiSSIDList	NetworkManagerRDKProxy.cpp	/^        } wifiSSIDList;$/;"	m	union:_IARM_BUS_WiFiSrvMgr_EventData_t::__anon7d34ee9e0c0a	typeref:struct:_IARM_BUS_WiFiSrvMgr_EventData_t::__anon7d34ee9e0c0a::_WIFI_SSID_LIST	file:
wifiScanCb	NetworkManagerGnomeWIFI.cpp	/^        static void wifiScanCb(GObject *object, GAsyncResult *result, gpointer user_data)$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:void	file:
wifiScanRequest	NetworkManagerGnomeWIFI.cpp	/^        bool wifiManager::wifiScanRequest(std::string ssidReq)$/;"	f	class:WPEFramework::Plugin::wifiManager	typeref:typename:bool
wifiSecurityModeFromAp	NetworkManagerGnomeUtils.cpp	/^        uint8_t nmUtils::wifiSecurityModeFromAp(guint32 flags, guint32 wpaFlags, guint32 rsnFlag/;"	f	class:WPEFramework::Plugin::nmUtils	typeref:typename:uint8_t
wifiSecurityModeFromApFlags	gdbus/NetworkManagerGdbusUtils.cpp	/^        uint8_t GnomeUtils::wifiSecurityModeFromApFlags(guint32 flags, guint32 wpaFlags, guint32/;"	f	class:WPEFramework::Plugin::GnomeUtils	typeref:typename:uint8_t
wifiSsidData_t	NetworkManagerRDKProxy.cpp	/^} wifiSsidData_t;$/;"	t	typeref:struct:_wifiSsidData_t	file:
wifiStateChange	NetworkManagerRDKProxy.cpp	/^        } wifiStateChange;$/;"	m	union:_IARM_BUS_WiFiSrvMgr_EventData_t::__anon7d34ee9e0c0a	typeref:struct:_IARM_BUS_WiFiSrvMgr_EventData_t::__anon7d34ee9e0c0a::_WIFI_STATECHANGE_DATA	file:
wifiStatus	NetworkManagerRDKProxy.cpp	/^        WiFiStatusCode_t wifiStatus;$/;"	m	union:_IARM_Bus_WiFiSrvMgr_Param_t::__anon7d34ee9e0a0a	typeref:typename:WiFiStatusCode_t	file:
wifi_wps_pbc_ap_t	NetworkManagerGnomeWIFI.h	/^} wifi_wps_pbc_ap_t;$/;"	t	typeref:struct:_wifi_wps_pbc_ap
wifilnfState	NetworkManagerRDKProxy.cpp	/^        }wifilnfState;$/;"	m	union:_IARM_BUS_WiFiSrvMgr_EventData_t::__anon7d34ee9e0c0a	typeref:struct:_IARM_BUS_WiFiSrvMgr_EventData_t::__anon7d34ee9e0c0a::_WIFI_LNF_STATE	file:
wiredDeviceProxy	gdbus/NetworkManagerGdbusEvent.h	/^        GDBusProxy *wiredDeviceProxy; \/\/ eth0 dev$/;"	m	struct:WPEFramework::Plugin::__anoncc38525b0108	typeref:typename:GDBusProxy *
wirelessDeviceProxy	gdbus/NetworkManagerGdbusEvent.h	/^        GDBusProxy *wirelessDeviceProxy; \/\/ wlan0 dev$/;"	m	struct:WPEFramework::Plugin::__anoncc38525b0108	typeref:typename:GDBusProxy *
wirelessProxy	gdbus/NetworkManagerGdbusEvent.h	/^        GDBusProxy *wirelessProxy; \/\/ wireless interface$/;"	m	struct:WPEFramework::Plugin::__anoncc38525b0108	typeref:typename:GDBusProxy *
wlanIPv4Proxy	gdbus/NetworkManagerGdbusEvent.h	/^        GDBusProxy *wlanIPv4Proxy;$/;"	m	struct:WPEFramework::Plugin::__anoncc38525b0108	typeref:typename:GDBusProxy *
wlanIPv6Proxy	gdbus/NetworkManagerGdbusEvent.h	/^        GDBusProxy *wlanIPv6Proxy;$/;"	m	struct:WPEFramework::Plugin::__anoncc38525b0108	typeref:typename:GDBusProxy *
wlanIface	NetworkManagerGnomeUtils.cpp	/^        const char* nmUtils::wlanIface() {return m_wlanifname.c_str();}$/;"	f	class:WPEFramework::Plugin::nmUtils	typeref:typename:const char *
wlanIfname	gdbus/NetworkManagerGdbusEvent.h	/^        char wlanIfname[16];$/;"	m	class:WPEFramework::Plugin::NetworkManagerEvents	typeref:typename:char[16]
wpaFlag	gdbus/NetworkManagerGdbusUtils.h	/^    NM80211ApSecurityFlags wpaFlag;$/;"	m	struct:apInfo	typeref:typename:NM80211ApSecurityFlags
wpsAction	NetworkManagerGnomeWIFI.cpp	/^        void wifiManager::wpsAction()$/;"	f	class:WPEFramework::Plugin::wifiManager	typeref:typename:void
wpsStop	NetworkManagerGnomeWIFI.h	/^            std::atomic<bool> wpsStop = {false};$/;"	m	class:WPEFramework::Plugin::wifiManager	typeref:typename:std::atomic<bool>
wpsThread	NetworkManagerGnomeWIFI.h	/^            std::thread wpsThread;$/;"	m	class:WPEFramework::Plugin::wifiManager	typeref:typename:std::thread
writeEndpointsToFile	NetworkManagerConnectivity.cpp	/^    void EndpointManager::writeEndpointsToFile(const std::vector<std::string>& endpoints)$/;"	f	class:WPEFramework::Plugin::EndpointManager	typeref:typename:void
writeFunction	NetworkManagerConnectivity.cpp	/^    static size_t writeFunction(void* ptr, size_t size, size_t nmemb, std::string* data) {$/;"	f	namespace:WPEFramework::Plugin	typeref:typename:size_t	file:
~ConnectivityMonitor	NetworkManagerConnectivity.cpp	/^    ConnectivityMonitor::~ConnectivityMonitor()$/;"	f	class:WPEFramework::Plugin::ConnectivityMonitor
~DbusMgr	gdbus/NetworkManagerGdbusMgr.cpp	/^        DbusMgr::~DbusMgr() {$/;"	f	class:WPEFramework::Plugin::DbusMgr
~DnsResolver	NetworkManagerConnectivity.h	/^                ~DnsResolver(){};$/;"	f	class:WPEFramework::Plugin::DnsResolver
~EndpointManager	NetworkManagerConnectivity.h	/^            ~EndpointManager() {}$/;"	f	class:WPEFramework::Plugin::EndpointManager
~GnomeNetworkManagerEvents	NetworkManagerGnomeEvents.cpp	/^    GnomeNetworkManagerEvents::~GnomeNetworkManagerEvents()$/;"	f	class:WPEFramework::Plugin::GnomeNetworkManagerEvents
~Network	LegacyPlugin_NetworkAPIs.cpp	/^        Network::~Network()$/;"	f	class:WPEFramework::Plugin::Network
~NetworkManager	NetworkManager.cpp	/^        NetworkManager::~NetworkManager()$/;"	f	class:WPEFramework::Plugin::NetworkManager
~NetworkManagerClient	gdbus/NetworkManagerGdbusClient.cpp	/^        NetworkManagerClient::~NetworkManagerClient() {$/;"	f	class:WPEFramework::Plugin::NetworkManagerClient
~NetworkManagerEvents	gdbus/NetworkManagerGdbusEvent.cpp	/^    NetworkManagerEvents::~NetworkManagerEvents()$/;"	f	class:WPEFramework::Plugin::NetworkManagerEvents
~NetworkManagerImplementation	NetworkManagerImplementation.cpp	/^        NetworkManagerImplementation::~NetworkManagerImplementation()$/;"	f	class:WPEFramework::Plugin::NetworkManagerImplementation
~NetworkManagerTimer	NetworkManagerTimer.h	/^                ~NetworkManagerTimer()$/;"	f	class:WPEFramework::Plugin::NetworkManagerTimer
~NetworkManagerTimerJob	NetworkManagerTimer.h	/^                        ~NetworkManagerTimerJob() {}$/;"	f	class:WPEFramework::Plugin::NetworkManagerTimer::NetworkManagerTimerJob
~Notification	NetworkManager.h	/^                virtual ~Notification() override$/;"	f	class:WPEFramework::Plugin::NetworkManager::Notification
~TestConnectivity	NetworkManagerConnectivity.h	/^            ~TestConnectivity(){}$/;"	f	class:WPEFramework::Plugin::TestConnectivity
~WiFiManager	LegacyPlugin_WiFiManagerAPIs.cpp	/^        WiFiManager::~WiFiManager()$/;"	f	class:WPEFramework::Plugin::WiFiManager
~WiFiSignalStrengthMonitor	WiFiSignalStrengthMonitor.h	/^                ~WiFiSignalStrengthMonitor(){ NMLOG_INFO("~WiFiSignalStrengthMonitor"); }$/;"	f	class:WPEFramework::Plugin::WiFiSignalStrengthMonitor
~client	NetworkManagerStunClient.cpp	/^client::~client()$/;"	f	class:stun::client
~file_descriptor	NetworkManagerStunClient.cpp	/^    ~file_descriptor() {$/;"	f	class:stun::details::file_descriptor	file:
~wifiManager	NetworkManagerGnomeWIFI.h	/^            ~wifiManager() {$/;"	f	class:WPEFramework::Plugin::wifiManager
